<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo 折腾手记</title>
    <url>/2021/01/19/hexo/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<div style="letter-spacing:1px;padding: 0px 50px 0px 0px">求知若渴，虚心若愚。</div>
<div style="text-align: right;padding: 0px 200px 0px 0px">——史蒂夫·乔布斯</div>
</blockquote>

<h2 id="深度优化"><a href="#深度优化" class="headerlink" title="深度优化"></a>深度优化</h2><h3 id="关掉所有多余的信息显示"><a href="#关掉所有多余的信息显示" class="headerlink" title="关掉所有多余的信息显示"></a>关掉所有多余的信息显示</h3><p>标题下方的访问量、阅读时间、发布时间什么的统统都去掉，妨碍阅读。本文字数还算有点用，但如果开启了显示阅读进度的小方块，也可以关掉。</p>
<h3 id="行内代码块美化"><a href="#行内代码块美化" class="headerlink" title="行内代码块美化"></a>行内代码块美化</h3><p>默认的行内代码块黑不溜秋，着实不太美观。逛了好多网站，都不太满意。最后在思否（segmentfault）的基础上把字体颜色再加深了一点，边框加宽，加上圆角，字体换成 Fira Code，自我感觉还不错：<code>My Preference</code></p>
<h3 id="跨行代码块美化"><a href="#跨行代码块美化" class="headerlink" title="跨行代码块美化"></a>跨行代码块美化</h3><p>左边行号的大黑边太辣眼睛了，改改改。我最喜欢的代码块样式是 mkdocs-material 的，简洁大方。网上很火的 mac 样式我不太喜欢，上面的红绿灯实在难看，还占了本来可以写语言、文件名、路径等附加信息的地方。</p>
<p>代码高亮主题我选的是 atom-one-light，和整体风格比较搭，不过自带的也还不错的说。</p>
<figure class="highlight cpp"><figcaption><span>Hello_World.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 祖传 Hello World</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Hello World!&quot;</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="站外链接美化"><a href="#站外链接美化" class="headerlink" title="站外链接美化"></a>站外链接美化</h3><p><a href="https://github.com/Stardusten">猫猫能有什么坏心眼呢</a></p>
<h4 id="颜色改为蓝色"><a href="#颜色改为蓝色" class="headerlink" title="颜色改为蓝色"></a>颜色改为蓝色</h4><p>链接都是灰色的，不太醒目，颜色改为蓝色会更好看。</p>
<h4 id="添加提示图标"><a href="#添加提示图标" class="headerlink" title="添加提示图标"></a>添加提示图标</h4><p>对于站外链接，在右边添加一个提示图标。</p>
<h3 id="换掉默认的分类页"><a href="#换掉默认的分类页" class="headerlink" title="换掉默认的分类页"></a>换掉默认的分类页</h3><p>默认的分类页不能自定义页面显示顺序，干脆关掉，自己新建一个目录页代替原有的分类页。</p>
<p>先用 <code>hexo new page &quot;page_name&quot;</code> 新建一个名为 page_name（当然你可以自己取名字，比如我要用来做目录，就取名为 contents）的文件夹，里面自动生成一个 <code>index.md</code> 文件。打开 <code>index.md</code>，在元信息中加入以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>: <span class="string">&quot;contents&quot;</span></span><br><span class="line">comments: <span class="literal">false</span> <span class="comment"># 关闭评论</span></span><br><span class="line">sidebar: <span class="literal">false</span> <span class="comment"># 关闭侧栏</span></span><br></pre></td></tr></table></figure>
<p>接下来，在主题配置文件的 menu 一项中加入刚刚创建的 contents，格式仿照上面已有的内容：</p>
<figure class="highlight m"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  #home: / || fa fa-home</span><br><span class="line">  #about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  #categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /<span class="number">404</span>/ || fa fa-heartbeat</span><br><span class="line">  contents: /contents/ || fa fa-th # 加到这里</span><br></pre></td></tr></table></figure>
<p>注意 <code>||</code> 后面的部分是用来指定图标的，所有能用的图标参见 <a href="fontawesome.com">Fontawesome</a>。</p>
<p>如果还需改变这一页在 menu 中的名字，修改 <code>/languages/zh-Hans.yml</code> 的相关项即可。</p>
]]></content>
  </entry>
  <entry>
    <title>Latex 学习笔记</title>
    <url>/2021/01/21/latex/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Markdown 学习笔记</title>
    <url>/2021/01/21/md/</url>
    <content><![CDATA[<h2 id="行内代码块输入反引号"><a href="#行内代码块输入反引号" class="headerlink" title="行内代码块输入反引号 `"></a>行内代码块输入反引号 <code>`</code></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;    &#x3D;&gt;  &#96;&#96; &#96; &#96;&#96;</span><br><span class="line">&#96;&#96;   &#x3D;&gt;  &#96; &#96;&#96; &#96;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>C++ 学习笔记</title>
    <url>/2021/01/19/cpp/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<div style="letter-spacing:1px;padding: 0px 50px 0px 0px">当想要保护自己重要的人的时候，人就会变得很坚强。</div>
<div style="text-align: right;padding: 0px 200px 0px 0px">——《火影忍者》白</div>
</blockquote>

<h2 id="类内静态成员的初始化"><a href="#类内静态成员的初始化" class="headerlink" title="类内静态成员的初始化"></a>类内静态成员的初始化</h2><p>虽然 C++ 新标准已经支持 in-class initializer，但如果等号右边不是常量表达式（比如要调用函数计算），还是需要使用传统 <strong>类内定义，类外初始化</strong> 的技术</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">calc</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">double</span> t; <span class="comment">// 类内定义</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> calc::t = <span class="built_in">atan</span>(<span class="number">2</span>); <span class="comment">// 类外初始化，注意不要加 static</span></span><br></pre></td></tr></table></figure>
<p>简单的常量表达式，使用 <code>enum</code> 定义会更优雅：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">calc</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span> TOTAL = <span class="number">10</span> &#125;; <span class="comment">// so elegant!</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如果是 Java，在 <code>static</code> 块里初始化就好了。</p>
<h2 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h2><h3 id="vscode-关闭-C-11-Warning"><a href="#vscode-关闭-C-11-Warning" class="headerlink" title="vscode 关闭 C++ 11 Warning"></a>vscode 关闭 C++ 11 Warning</h3><p>首先，在你用的查错插件里将 C++ 版本换为 C++17，我用的 C/C++ Clang Command Adapter，只要在 <code>Clang: Cxxflags</code> 一栏添加 <code>-std=C++17</code> 即可。</p>
<p>然后，关掉用 Coderunner 一键运行时终端里的警告。打开 <code>settings.json</code>， 在 <code>&quot;code-runner.executorMap&quot;</code>  对应 C++ 的一项里加入 <code>-std=c++17</code> 即可。</p>
<figure class="highlight"><figcaption><span>settings.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&quot;cpp&quot;: &quot;cd $dir &amp;&amp; clang++ -std=c++17 $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,</span><br></pre></td></tr></table></figure>
<p>最后，关掉调试时的警告。在 <code>tasks.json</code> 的运行参数中加入 <code>&quot;-std=c++17&quot;</code> 即可。</p>
<figure class="highlight"><figcaption><span>tasks.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&quot;args&quot;: [</span><br><span class="line">    &quot;$&#123;fileBasename&#125;&quot;,</span><br><span class="line">    &quot;-o&quot;,</span><br><span class="line">    &quot;$&#123;fileBasenameNoExtension&#125;&quot;,</span><br><span class="line">    &quot;-g&quot;,</span><br><span class="line">    &quot;-std=c++17&quot;, // 加在这里</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<h3 id="Jupyter-安装-C-Kernel"><a href="#Jupyter-安装-C-Kernel" class="headerlink" title="Jupyter 安装 C++ Kernel"></a>Jupyter 安装 C++ Kernel</h3><p>安装 Xeus-Cling Kernel 让我们也能在 Jupyter 上愉快地写 C++。我用的 pyenv 管理 Python 版本，所以先切换到 miniconda 环境，用 conda 新建一个环境来装 Xeus-Cling。注意，根据官方教程只能用 miniconda，而不能用 anaconda。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv <span class="built_in">local</span> miniconda3-4.7.12 <span class="comment"># 切换到 miniconda</span></span><br><span class="line">conda create -n cpp <span class="comment"># 为 xeus-cling 创建名为 cpp 的虚拟环境</span></span><br><span class="line">conda activate cling <span class="comment"># 切换到新创建的 cpp 环境</span></span><br><span class="line">conda install jupyter notebook <span class="comment"># 为新环境安装 jupyter</span></span><br><span class="line">conda install xeus-cling -c conda-forge <span class="comment"># 安装 xeus-cling 内核</span></span><br><span class="line">jupyter kernelspec list <span class="comment"># 查看所有安装的 kernel</span></span><br></pre></td></tr></table></figure>
<p>如果 <code>xcpp11</code>、<code>xcpp14</code>、<code>xcpp17</code> 都有显示，则说明已经安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Available kernels:</span><br><span class="line">  python3    &#x2F;Users&#x2F;stardust&#x2F;.pyenv&#x2F;versions&#x2F;miniconda3-4.7.12&#x2F;envs&#x2F;cling&#x2F;share&#x2F;jupyter&#x2F;kernels&#x2F;python3</span><br><span class="line">  xcpp11     &#x2F;Users&#x2F;stardust&#x2F;.pyenv&#x2F;versions&#x2F;miniconda3-4.7.12&#x2F;envs&#x2F;cling&#x2F;share&#x2F;jupyter&#x2F;kernels&#x2F;xcpp11</span><br><span class="line">  xcpp14     &#x2F;Users&#x2F;stardust&#x2F;.pyenv&#x2F;versions&#x2F;miniconda3-4.7.12&#x2F;envs&#x2F;cling&#x2F;share&#x2F;jupyter&#x2F;kernels&#x2F;xcpp14</span><br><span class="line">  xcpp17     &#x2F;Users&#x2F;stardust&#x2F;.pyenv&#x2F;versions&#x2F;miniconda3-4.7.12&#x2F;envs&#x2F;cling&#x2F;share&#x2F;jupyter&#x2F;kernels&#x2F;xcpp17</span><br></pre></td></tr></table></figure>
<p>打开 <code>jupyter notebook</code> ，看看是不是已经可以写 C++ 了。</p>
]]></content>
  </entry>
  <entry>
    <title>Wolfram Language 学习笔记</title>
    <url>/2021/01/16/wolfram/</url>
    <content><![CDATA[<h2 id="三种方式调用函数"><a href="#三种方式调用函数" class="headerlink" title="三种方式调用函数"></a>三种方式调用函数</h2><p>Wolfram Language 不仅支持普通的前缀调用，还支持以中缀、后缀的方式调用函数。合理使用这三种调用方式，能使代码逻辑清晰，增强可读性。</p>
<h3 id="中缀调用"><a href="#中缀调用" class="headerlink" title="中缀调用"></a>中缀调用</h3><figure class="highlight mma"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Join</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span><span class="number">2</span><span class="operator">,</span><span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span><span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span><span class="number">5</span><span class="operator">,</span><span class="number">6</span><span class="punctuation">&#125;</span><span class="operator">,</span><span class="punctuation">&#123;</span><span class="number">7</span><span class="operator">,</span><span class="number">8</span><span class="operator">,</span><span class="number">9</span><span class="punctuation">&#125;</span><span class="punctuation">]</span> <span class="comment">(*前缀调用*)</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span><span class="number">2</span><span class="operator">,</span><span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">~</span><span class="built_in">Join</span><span class="operator">~</span><span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span><span class="number">5</span><span class="operator">,</span><span class="number">6</span><span class="punctuation">&#125;</span><span class="operator">~</span><span class="built_in">Join</span><span class="operator">~</span><span class="punctuation">&#123;</span><span class="number">7</span><span class="operator">,</span><span class="number">8</span><span class="operator">,</span><span class="number">9</span><span class="punctuation">&#125;</span> <span class="comment">(*中缀调用*)</span></span><br></pre></td></tr></table></figure>
<h3 id="后缀调用"><a href="#后缀调用" class="headerlink" title="后缀调用"></a>后缀调用</h3><figure class="highlight mma"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Total</span><span class="punctuation">[</span><span class="built_in">Flatten</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span><span class="number">2</span><span class="operator">,</span><span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span><span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span><span class="number">5</span><span class="operator">,</span><span class="number">6</span><span class="punctuation">&#125;</span><span class="operator">,</span><span class="punctuation">&#123;</span><span class="number">7</span><span class="operator">,</span><span class="number">8</span><span class="operator">,</span><span class="number">9</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="comment">(*前缀调用*)</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span><span class="number">2</span><span class="operator">,</span><span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span><span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span><span class="number">5</span><span class="operator">,</span><span class="number">6</span><span class="punctuation">&#125;</span><span class="operator">,</span><span class="punctuation">&#123;</span><span class="number">7</span><span class="operator">,</span><span class="number">8</span><span class="operator">,</span><span class="number">9</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span> <span class="operator">//</span> <span class="built_in">Flatten</span> <span class="operator">//</span> <span class="built_in">Total</span> <span class="comment">(*后缀调用*)</span></span><br></pre></td></tr></table></figure>
<h2 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h2><h3 id="纯函数递归"><a href="#纯函数递归" class="headerlink" title="纯函数递归"></a>纯函数递归</h3><p>Wolfram Language 中，<code>#0</code> 就是纯函数自己，可以用来实现纯函数递归。要在 Python 中实现这一点可不容易。</p>
<figure class="highlight mma"><table><tr><td class="code"><pre><span class="line"><span class="built_in">If</span><span class="punctuation">[</span><span class="type">#</span><span class="operator">==</span><span class="number">1</span><span class="operator">,</span><span class="number">1</span><span class="operator">,</span><span class="type">#</span><span class="operator">*</span><span class="type">#0</span><span class="punctuation">[</span><span class="type">#</span><span class="operator">-</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">&amp;</span><span class="punctuation">[</span><span class="number">3</span><span class="punctuation">]</span> <span class="comment">(*计算 3 的阶乘*)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight mma"><table><tr><td class="code"><pre><span class="line"><span class="built_in">If</span><span class="punctuation">[</span><span class="type">#</span><span class="operator">==</span><span class="number">0</span><span class="operator">||</span><span class="type">#</span><span class="operator">==</span><span class="number">1</span><span class="operator">,</span><span class="number">1</span><span class="operator">,</span><span class="type">#0</span><span class="punctuation">[</span><span class="type">#</span><span class="operator">-</span><span class="number">1</span><span class="punctuation">]</span><span class="operator">+</span><span class="type">#0</span><span class="punctuation">[</span><span class="type">#</span><span class="operator">-</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">&amp;</span><span class="punctuation">[</span><span class="number">5</span><span class="punctuation">]</span> <span class="comment">(*计算斐波拉契数列第 5 项*)</span></span><br></pre></td></tr></table></figure>
<h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><h3 id="Work-with-LaTeX"><a href="#Work-with-LaTeX" class="headerlink" title="Work with $\LaTeX$"></a>Work with $\LaTeX$</h3><p>MaTex 可以让我们协同使用 $\LaTeX$ 和 Wolfram Language 这两大神器，下面给出 Mac OS 的安装方法，其他平台安装方式见 <a href="https://github.com/szhorvat/MaTeX">GitHub 地址</a>.</p>
<ol>
<li>安装 MacTex</li>
<li>打开 Mathematica ，执行 <code>ResourceFunction[&quot;MaTeXInstall&quot;][]</code> 即可安装 MaTex</li>
<li>执行 <code>&lt;&lt;MaTeX`</code> 加载 MaTex（别丢了最后的反引号）</li>
<li>输入 <code>MaTeX[&quot;x^2&quot;]</code> 看看是不是已经能够使用了</li>
</ol>
<h4 id="XeLaTex-中文支持"><a href="#XeLaTex-中文支持" class="headerlink" title="XeLaTex 中文支持"></a>XeLaTex 中文支持</h4><p>MaTex 默认使用 PDFLaTex 渲染，但 Mac OS 上使用 XeLatex 会比 PDFLaTex 更方便：一来可以直接调用系统字体，二来原生 Unicode 支持不要太香。</p>
<p>一行命令将 PDFLaTex 换为 XeLatex：</p>
<figure class="highlight mma"><table><tr><td class="code"><pre><span class="line"><span class="variable">ConfigureMaTeX</span><span class="punctuation">[</span><span class="string">&quot;pdfLaTeX&quot;</span> <span class="operator">-&gt;</span> <span class="string">&quot;/Library/TeX/texbin/xelatex&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<p>下面添加常用中文宏包：</p>
<figure class="highlight mma"><table><tr><td class="code"><pre><span class="line"><span class="built_in">SetOptions</span><span class="punctuation">[</span></span><br><span class="line">    <span class="variable">MaTeX</span><span class="operator">,</span> <span class="string">&quot;BasePreamble&quot;</span> <span class="operator">-&gt;</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="string">&quot;\\usepackage&#123;lmodern,exscale&#125;&quot;</span><span class="operator">,</span> </span><br><span class="line">        <span class="string">&quot;\\usepackage&#123;amsmath,amssymb&#125;&quot;</span><span class="operator">,</span> </span><br><span class="line">        <span class="string">&quot;\\usepackage&#123;xeCJK&#125;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<p>试试执行 <code>MaTeX[&quot;Miao \\text&#123;猫猫能有什么坏心眼呢&#125;&quot;]</code>，看中文是否已经可以显示。</p>
<h4 id="自动加载"><a href="#自动加载" class="headerlink" title="自动加载"></a>自动加载</h4><p>每次使用都要执行 <code>&lt;&lt;MaTeX`</code> 实在是有些麻烦，可以将其加入 <code>init.m</code> 中，实现打开时自动加载。修改 <code>init.m</code> 的具体方法参见 <a href="https://reference.wolfram.com/language/tutorial/ConfigurationFiles.html.zh?source=footer">Wolfram 系统配置文件</a>，<a href="https://reference.wolfram.com/language/ref/file/init.m.html.zh?source=footer">init.m</a></p>
<p>Mac OS 下做如下修改即可：</p>
<figure class="highlight mma"><figcaption><span>./Library/Mathematica/Kernel/init.m</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">(** User Mathematica initialization file **)</span></span><br><span class="line"><span class="operator">&lt;&lt;</span><span class="variable">MaTeX</span><span class="operator">`</span></span><br><span class="line"><span class="variable">ConfigureMaTeX</span><span class="punctuation">[</span><span class="string">&quot;pdfLaTeX&quot;</span> <span class="operator">-&gt;</span> <span class="string">&quot;/Library/TeX/texbin/xelatex&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">SetOptions</span><span class="punctuation">[</span></span><br><span class="line">    <span class="variable">MaTeX</span><span class="operator">,</span> <span class="string">&quot;BasePreamble&quot;</span> <span class="operator">-&gt;</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="string">&quot;\\usepackage&#123;lmodern,exscale&#125;&quot;</span><span class="operator">,</span> </span><br><span class="line">        <span class="string">&quot;\\usepackage&#123;amsmath,amssymb&#125;&quot;</span><span class="operator">,</span> </span><br><span class="line">        <span class="string">&quot;\\usepackage&#123;xeCJK&#125;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p>更多教程移步 <a href="http://szhorvat.net/pelican/latex-typesetting-in-mathematica.html">开发者博客</a>，在 <a href="https://gitter.im/MaTeX-help/Lobby">Gitter 讨论组</a> 获得帮助。</p>
]]></content>
  </entry>
  <entry>
    <title>Haskell 学习笔记</title>
    <url>/2021/01/19/haskell/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<div style="letter-spacing:1px;padding: 0px 50px 0px 0px">只要是人，都是依靠自己的知识与认知并被之束缚的生活着的，那就叫做现实。</div>
<div style="text-align: right;padding: 0px 200px 0px 0px">——《火影忍者》宇智波·鼬</div>
</blockquote>]]></content>
  </entry>
  <entry>
    <title>Java 学习笔记</title>
    <url>/2021/01/20/java/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Python 学习笔记</title>
    <url>/2021/01/19/python/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
