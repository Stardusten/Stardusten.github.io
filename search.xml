<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>iTerm2</title>
    <url>/2021/01/02/iTerm2/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<div style="letter-spacing:1px;padding: 0px 50px 0px 0px">凉风起天末，君子意如何</div>
<div style="text-align: right;padding: 0px 200px 0px 0px">——《天末怀李白》 杜甫</div>
</blockquote>

<p>推荐使用 iTerm 替换系统默终端，效果如下：</p>
<center>
<img data-src='https://cdn.jsdelivr.net/gh/Stardusten/Pic@master/uPic/WKRy6U.png' alt='WKRy6U' width=550px/>
</center>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用 Homebrew 安装 iTerm2 和 zsh：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install iTerm2 zsh zsh-completions</span><br></pre></td></tr></table></figure>
<p>使用 <code>curl</code> 安装 oh-my-zsh：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span></span><br></pre></td></tr></table></figure>
<p>安装时会提示是否将 iTerm2 为默认终端，选 “yes” 即可。可通过菜单栏 <code>iTerm2 - Make iTerm2 Defaut Term</code> 修改默认终端（按下 command 可以将默认终端改回系统终端）</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>插件的安装参见具体帮助文档，此处不再赘述。装好后记得要在 <code>~/.zshrc</code> 中激活要用的插件。</p>
<p>下面推荐四款插件：</p>
<h3 id="git：支持-git-缩写"><a href="#git：支持-git-缩写" class="headerlink" title="git：支持 git 缩写"></a>git：支持 git 缩写</h3><p>提供对各种 git 命令缩写的支持，比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add --all ===&gt; gaa</span><br><span class="line">git commit -m ===&gt; gcmsg</span><br></pre></td></tr></table></figure>
<p>使用 <code>cat</code> 可查看支持的全部缩写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.oh-my-zsh/plugins/git/git.plugin.zsh</span><br></pre></td></tr></table></figure>
<p>注：git 默认安装且激活</p>
<h3 id="z：快速的切换文件路径"><a href="#z：快速的切换文件路径" class="headerlink" title="z：快速的切换文件路径"></a>z：快速的切换文件路径</h3><ol>
<li><code>z foo</code> ：进入到最匹配的 foo 关键字的目录</li>
<li><code>z foo bar</code> ：进入层级匹配，先匹配 foo 关键字，再匹配 bar 关键字的目录</li>
<li><code>z -r foo</code> ：进入匹配 foo 关键字目录列表中 rank 值最高的目录</li>
<li><code>z -t foo</code> ：进入匹配 foo 关键字目录列表中最近访问的目录</li>
<li><code>z -l foo</code> ：列出所有匹配 foo 关键字的目录列表</li>
</ol>
<p>注：z 默认安装，但没有激活，需要自己到 <code>.zshrc</code> 中激活</p>
<h3 id="zsh-syntax-highlighting：语法高亮"><a href="#zsh-syntax-highlighting：语法高亮" class="headerlink" title="zsh-syntax-highlighting：语法高亮"></a>zsh-syntax-highlighting：语法高亮</h3><p><a href="https://github.com/zsh-users/zsh-syntax-highlighting">GitHub 项目地址</a></p>
<p>语法高亮的插件</p>
<h3 id="zsh-autosuggestions：自动补全"><a href="#zsh-autosuggestions：自动补全" class="headerlink" title="zsh-autosuggestions：自动补全"></a>zsh-autosuggestions：自动补全</h3><p><a href="https://github.com/zsh-users/zsh-autosuggestions">GitHub 项目地址</a></p>
<p>默认按右箭头 → 补全，可以在 <code>.zshrc</code> 中添加以下内容，修改默认的键位：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bindkey <span class="string">&#x27;,&#x27;</span> autosuggest-accept <span class="comment">#  设置逗号补全</span></span><br></pre></td></tr></table></figure>
<h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>表示默认主题很好看，不打算换，但可以自行更换新主题。很多人喜欢的 <code>agnoster</code> 还需要安装配置 Powerline 字体</p>
<h3 id="设置背景图片"><a href="#设置背景图片" class="headerlink" title="设置背景图片"></a>设置背景图片</h3><p>在 <code>Preferences-Profile-Window</code> 项设置即可，注意 Mode 选择 <strong>Scale to fold</strong>，否则拉伸很难看。</p>
<h2 id="设置为-vscode-内部终端"><a href="#设置为-vscode-内部终端" class="headerlink" title="设置为 vscode 内部终端"></a>设置为 vscode 内部终端</h2><p>设置 json 中添加如下内容即可。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;terminal.external.osxExec&quot;: &quot;iTerm.app&quot;,</span><br><span class="line">&quot;terminal.integrated.shell.osx&quot;: &quot;/bin/zsh&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Mac 折腾手记</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 多线程</title>
    <url>/2021/01/05/multithreading/</url>
    <content><![CDATA[<h2 id="两种方式创建新线程"><a href="#两种方式创建新线程" class="headerlink" title="两种方式创建新线程"></a>两种方式创建新线程</h2><p>Python 中实现多线程编程，主流方法是使用 <code>threading</code> 模块。</p>
<h3 id="继承-Thread-amp-重写-run-方法"><a href="#继承-Thread-amp-重写-run-方法" class="headerlink" title="继承 Thread &amp; 重写 run 方法"></a>继承 Thread &amp; 重写 run 方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">multithreading_task</span>(<span class="params">Thread</span>):</span> <span class="comment"># 继承 Thread</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span> <span class="comment"># 重写 run 方法</span></span><br><span class="line"></span><br><span class="line">t1=multithreading_task()</span><br></pre></td></tr></table></figure>
<h3 id="创建-Thread-对象"><a href="#创建-Thread-对象" class="headerlink" title="创建 Thread 对象"></a>创建 Thread 对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multithreading_task</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">p=Thread(target=multithreading_task,args=()) <span class="comment"># 创建 Thread 对象</span></span><br></pre></td></tr></table></figure>
<h2 id="Daemon-amp-Join"><a href="#Daemon-amp-Join" class="headerlink" title="Daemon &amp; Join"></a>Daemon &amp; Join</h2><p>假设主线程 A 创建了子线程 B：</p>
<h3 id="Daemon-方法"><a href="#Daemon-方法" class="headerlink" title="Daemon 方法"></a>Daemon 方法</h3><p>在 B 的 <code>start</code> <strong>方法调用前</strong> 使用 <code>B.setDaemon(True)</code> 将把主线程 A 设置为 B 的 <strong>守护线程</strong></p>
<p>作用：不管子线程 B 有没有执行完，只要主线程 A 执行完了，A 和 B 就会一起退出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>():</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20000000</span>):</span><br><span class="line">        x+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">x=<span class="number">0</span></span><br><span class="line">B=Thread(target=calc)</span><br><span class="line">B.setDaemon(<span class="literal">True</span>)</span><br><span class="line">B.start()</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">43859</span><br></pre></td></tr></table></figure>
<h3 id="Join-方法"><a href="#Join-方法" class="headerlink" title="Join 方法"></a>Join 方法</h3><p>在 B 的 <code>start</code> <strong>方法调用后</strong> 使用 <code>B.join([timeout])</code> 将 <strong>阻塞主进程 A</strong></p>
<p>作用：主线程 A 将等待子线程 B 执行完后才退出，缺省参数 <code>timeout</code> 代表线程运行的最大时间，即如果超过这个时间，不管这个此线程有没有执行完毕都会被回收</p>
<p>比如：要在子线程 B 中执行大量计算，主线程中调用计算结果，则需要让主线程等待子线程完成计算（阻塞），可用 <code>B.join()</code> 实现这一要求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>():</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20000000</span>):</span><br><span class="line">        x+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">x=<span class="number">0</span></span><br><span class="line">B=Thread(target=calc)</span><br><span class="line">B.start()</span><br><span class="line">B.join()</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20000000</span><br></pre></td></tr></table></figure>

<h2 id="Mutex"><a href="#Mutex" class="headerlink" title="Mutex"></a>Mutex</h2><h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2><p><code>Event</code> 的使用场景较为单一，仅用于 <strong>某一线程控制其他几个线程同时开始运行</strong> 的情况。可以类比为赛跑，发令员（控制线程）拿发令枪（信号），枪响（信号改变）后所有运动员一起开始跑。</p>
<p><code>Event</code> 的主要方法有：</p>
<ol>
<li><code>set()</code>：将 <code>Event</code> 对象内部的信号设置为 <code>True</code> </li>
<li><code>clear()</code>：将 <code>Event</code> 对象内部的信号设置为 <code>False</code></li>
<li><code>wait()</code>：如果标志为 <code>True</code> 将立即返回，否则阻塞直至表示变为 <code>True</code></li>
<li><code>is_et()</code>：获取 <code>Event</code> 对象内部的信号</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">activity</span>():</span></span><br><span class="line">    print(<span class="string">f&#x27;<span class="subst">&#123;currentThread().getName()&#125;</span> Prepared&#x27;</span>)</span><br><span class="line">    event.wait()</span><br><span class="line">    print(<span class="string">f&#x27;<span class="subst">&#123;currentThread().getName()&#125;</span> Run&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t1=Thread(target=activity)</span><br><span class="line">t2=Thread(target=activity)</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">event.<span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Thread-1 Prepared</span><br><span class="line">Thread-2 Prepared</span><br><span class="line">Thread-2 Run</span><br><span class="line">Thread-1 Run</span><br></pre></td></tr></table></figure>
<h2 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h2><p><code>Condition</code> 实际上维护了一个锁（Lock or RLock）和一个 waiting 池（存储所有挂起的线程）。通过锁的获得与释放、线程的唤醒与挂起，<code>Condition</code> 可以实现多个线程按特定要求访问同一临界资源。</p>
<p><code>Condition</code> 的主要方法有：</p>
<ol>
<li><code>acquire()</code>：获得内部锁</li>
<li><code>release()</code>：释放内部锁</li>
<li><code>wait()</code>：释放内部锁，并挂起</li>
<li><code>notify()</code>：任选一个挂起的线程，将其唤醒，并通知其尝试获取锁</li>
<li><code>notify_all()</code>：对所有挂起的线程调用 <code>notify()</code> 方法</li>
</ol>
<p>下面看一个使用 <code>Condition</code> 方法实现 “生产者-消费者” 模型的实例。生产者、消费者都操作 “产品” 这一临界资源，但要求如果没有产品可供消费，则停止消费并开始生产，如果还有商品可供消费，则停止生产开始消费。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Condition,currentThread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">products=[]</span><br><span class="line">con=Condition()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            con.acquire()</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(products)&gt;<span class="number">0</span>:</span><br><span class="line">                con.wait()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&#x27;Start Produce...&#x27;</span>)</span><br><span class="line">                sleep(randint(<span class="number">0</span>,<span class="number">4</span>))</span><br><span class="line">                print(<span class="string">&#x27;Produce Finished&#x27;</span>)</span><br><span class="line">                products.append(randint(<span class="number">20</span>,<span class="number">30</span>))</span><br><span class="line">                con.notify()</span><br><span class="line">                con.wait()</span><br><span class="line">            con.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            con.acquire()</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(products)&gt;<span class="number">0</span>:</span><br><span class="line">                print(<span class="string">&#x27;Start Consume&#x27;</span>)</span><br><span class="line">                sleep(randint(<span class="number">0</span>,<span class="number">4</span>))</span><br><span class="line">                print(<span class="string">&#x27;Consume Finished&#x27;</span>)</span><br><span class="line">                products.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&#x27;Oops, no products&#x27;</span>)</span><br><span class="line">                con.notify()</span><br><span class="line">                con.wait()</span><br><span class="line">            con.release()</span><br><span class="line"></span><br><span class="line">_producer=Producer()</span><br><span class="line">_consumer=Consumer()</span><br><span class="line">_consumer.start()</span><br><span class="line">_producer.start()</span><br><span class="line">_producer.join()</span><br><span class="line">_consumer.join()</span><br></pre></td></tr></table></figure>
<h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><h3 id="FIFO-Queue"><a href="#FIFO-Queue" class="headerlink" title="FIFO Queue"></a>FIFO Queue</h3><h3 id="LIFO-Queue"><a href="#LIFO-Queue" class="headerlink" title="LIFO Queue"></a>LIFO Queue</h3><h3 id="Priority-Queue"><a href="#Priority-Queue" class="headerlink" title="Priority Queue"></a>Priority Queue</h3><h2 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h2><p><code>Timer</code> 用于指定 <strong>多少秒后启动线程</strong></p>
<h2 id="semaphore"><a href="#semaphore" class="headerlink" title="semaphore"></a>semaphore</h2><p><code>semaphore</code> 用于 <strong>控制同一时刻能最多运行线程的数量</strong>。其原理非常简单，就是一个计数器，计数器为 0 时，所有调用都会被阻塞。可以认为 <code>semaphore</code> 就是 <strong>特定数量的锁的集合</strong>，锁发完了就阻塞。</p>
<p><code>semaphore</code> 就只有两个方法，和 <code>Mutex</code> 一样：</p>
<ol>
<li><code>acquire()</code>：计数器减 1（获得锁）</li>
<li><code>release()</code>：计数器加 1（释放锁）</li>
</ol>
<h2 id="Barrier"><a href="#Barrier" class="headerlink" title="Barrier"></a>Barrier</h2><p><code>Barrier</code>（障碍量） ，是一个阻碍线程的屏障，在被阻碍的线程数达到给定数量后，一次性释放所有被阻碍的线程，并执行特定操作。类似日常生活中的拼车操作，只有四个人都到了司机才会开车，有一个没到其他几个人就都得等着。</p>
<p><code>Barrier</code> 的主要方法有：</p>
<ol>
<li><code>Barrier(parties,action=None,timeout=None)</code>：构造一个最多阻碍 <code>parties</code> 个线程的障碍量。如果提供了可调用的 <code>action</code> 参数，它会在所有线程被释放时在其中一个线程中自动调用。 <code>timeout</code> 是默认的超时时间，如果没有在 <code>wait()</code> 方法中指定的话。</li>
<li><code>wait(timeout=None)</code>：尝试通过障碍，如果被阻碍的线程数不够，则阻塞当前线程。<code>timeout</code> 为超时时间。</li>
<li><code>reset()</code>：重置被阻碍的线程数。如果在有线程等待时重置，则会引发 <code>BrokenBarrierError</code> 错误。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Barrier</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;开始播放视频...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">barrier=Barrier(<span class="number">3</span>,action=play)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span>(<span class="params">s</span>):</span></span><br><span class="line">    print(<span class="string">f&#x27;正在加载<span class="subst">&#123;s&#125;</span>......&#x27;</span>)</span><br><span class="line">    sleep(randint(<span class="number">0</span>,<span class="number">5</span>))</span><br><span class="line">    print(<span class="string">f&#x27;加载<span class="subst">&#123;s&#125;</span>成功!&#x27;</span>)</span><br><span class="line">    barrier.wait()</span><br><span class="line"></span><br><span class="line">l=[<span class="string">&#x27;用户配置文件&#x27;</span>,<span class="string">&#x27;播放器&#x27;</span>,<span class="string">&#x27;视频内容&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> l:</span><br><span class="line">    t=Thread(target=load,args=(x,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>
<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>线程池也用于 <strong>控制同一时刻能最多运行线程的数量</strong>。线程池的最大容量即为同一时刻最多能运行线程的数量，如果满了，申请运行的线程会先排队，等池内的线程运行完再进去。</p>
<p>线程池的主要方法有：</p>
<ol>
<li><code>submit()</code>：尝试将任务放入线程池，若已满则排队</li>
<li><code>done()</code>：判断任务是否完成</li>
<li><code>cancel()</code>：若任务还在排队，则取消该任务</li>
<li><code>result()</code>：获得任务的返回值，如果还在排队或正在执行则阻塞</li>
</ol>
<p>可以看到，与上面介绍的 <code>semaphore</code> 相比，线程池的功能更为强大。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_simulate</span>(<span class="params">sleep_time</span>):</span></span><br><span class="line">    sleep(sleep_time)</span><br><span class="line">    <span class="keyword">return</span> sleep_time</span><br><span class="line"></span><br><span class="line">pool=ThreadPoolExecutor(max_workers=<span class="number">2</span>) <span class="comment"># 同时最多开 2 个线程用于下载</span></span><br><span class="line">tasks=[]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    tasks.append(pool.submit(download_simulate,(<span class="number">1</span>)))</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">f&#x27;Task 1 is finished? <span class="subst">&#123;tasks[<span class="number">0</span>].done()&#125;</span>&#x27;</span>)</span><br><span class="line">print(<span class="string">f&#x27;Can task 1 be cancelled? <span class="subst">&#123;tasks[<span class="number">0</span>].cancel()&#125;</span>&#x27;</span>)</span><br><span class="line">print(<span class="string">f&#x27;Task 3 is finished? <span class="subst">&#123;tasks[<span class="number">2</span>].done()&#125;</span>&#x27;</span>)</span><br><span class="line">print(<span class="string">f&#x27;Can task 3 be cancelled? <span class="subst">&#123;tasks[<span class="number">2</span>].cancel()&#125;</span>&#x27;</span>)</span><br><span class="line">print(<span class="string">f&#x27;Task 5 is finished? <span class="subst">&#123;tasks[<span class="number">4</span>].done()&#125;</span>&#x27;</span>)</span><br><span class="line">print(<span class="string">f&#x27;Can task 5 be cancelled? <span class="subst">&#123;tasks[<span class="number">4</span>].cancel()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> sq <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> sq==<span class="number">4</span>:</span><br><span class="line">        <span class="keyword">continue</span> <span class="comment"># task 5 被取消了，不能调用 result() 方法</span></span><br><span class="line">    print(<span class="string">f&#x27;Task <span class="subst">&#123;sq+<span class="number">1</span>&#125;</span> slept <span class="subst">&#123;tasks[sq].result()&#125;</span>s&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Task 1 is finished? True</span><br><span class="line">Can task 1 be cancelled? False</span><br><span class="line">Task 3 is finished? False</span><br><span class="line">Can task 3 be cancelled? False</span><br><span class="line">Task 5 is finished? False</span><br><span class="line">Can task 5 be cancelled? True</span><br><span class="line">Task 1 slept 1s</span><br><span class="line">Task 2 slept 1s</span><br><span class="line">Task 3 slept 1s</span><br><span class="line">Task 4 slept 1s</span><br><span class="line">Task 6 slept 1s</span><br><span class="line">Task 7 slept 1s</span><br><span class="line">Task 8 slept 1s</span><br><span class="line">Task 9 slept 1s</span><br><span class="line">Task 10 slept 1s</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.BrokenBarrierError">Python 标准库&gt;&gt;并发执行</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 开发环境配置</title>
    <url>/2021/01/02/python_env/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<div style="letter-spacing:1px;padding: 0px 50px 0px 0px">求知若渴，虚心若愚。</div>
<div style="text-align: right;padding: 0px 200px 0px 0px">—— 史蒂夫·乔布斯</div>
</blockquote>

<h2 id="Pyenv：Python-环境管理神器"><a href="#Pyenv：Python-环境管理神器" class="headerlink" title="Pyenv：Python 环境管理神器"></a>Pyenv：Python 环境管理神器</h2><p>建议使用 pyenv 安装和管理多个 Python 版本</p>
<h3 id="安装-Pyenv"><a href="#安装-Pyenv" class="headerlink" title="安装 Pyenv"></a>安装 Pyenv</h3><p>使用 Homebrew 安装 pyenv：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install pyenv</span><br></pre></td></tr></table></figure>
<h3 id="安装-Python-相关"><a href="#安装-Python-相关" class="headerlink" title="安装 Python 相关"></a>安装 Python 相关</h3><p>使用 <code>-l</code> 查看所有可以安装的解释器、包组件等。没有特殊要求，新手安装 Anaconda 即可。如果嫌 Anaconda 太大，也可选择 miniconda。</p>
<p>默认的安装路径是 <code>~/.pyenv/shims/python</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install -l</span><br></pre></td></tr></table></figure>
<h2 id="将-python-映射为-python3"><a href="#将-python-映射为-python3" class="headerlink" title="将 python 映射为 python3"></a>将 python 映射为 python3</h2><p>macOS 自带的 Python 版本为 2.7，默认的 <code>python</code> 命令调用的也是这个低版本的 Python，如果用自己安装的 Python 则需要使用 <code>python3</code>。但这很麻烦，比如 vscode 的 coderunner 插件就会默认调用系统自带的 Python，这会导致许多问题。可以将默认 Python 改为我们自己安装的，但通常不建议，因为很可能造成未知的问题。</p>
<p>更好的方法是，在 <code>.bash_profile</code> 中用 <code>alias</code>，将 <code>python</code> 关键字映射为 <code>python3</code> ，即：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> python=<span class="string">&quot;python3&quot;</span></span><br></pre></td></tr></table></figure>
<p>同样的操作可以将 <code>pip</code> 映射为 <code>pip3</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> pip=<span class="string">&quot;pip3&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vscode-配置-Python-开发环境"><a href="#Vscode-配置-Python-开发环境" class="headerlink" title="Vscode 配置 Python 开发环境"></a>Vscode 配置 Python 开发环境</h2><p>安装 Python Extension Pack ，并按提示安装 Pylance 即可。</p>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>什么都不用配置，直接点 <code>Run and Debug</code> 并选择调试模式即可</p>
<p>注意：在新窗口、新文件夹中调试，不然会默认把你工作区的所有文件一起运行</p>
<h3 id="Jupyter"><a href="#Jupyter" class="headerlink" title="Jupyter"></a>Jupyter</h3><p>Pylance 支持 Jupyter，<code>shift + command + P</code> 输入 <code>Jupyter</code> 即可查看支持的命令。</p>
]]></content>
      <tags>
        <tag>Mac 折腾手记</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 面向对象编程</title>
    <url>/2021/01/02/python_object_oriented/</url>
    <content><![CDATA[<blockquote class="blockquote-center">

<div style="letter-spacing:1px;padding: 0px 50px 0px 0px">思念着你的人所在之处，便是你的归宿</div>
<div style="text-align: right;padding: 0px 200px 0px 0px">——《火影忍者》 幽鬼丸</div>

</blockquote>

<h2 id="type-amp-value-amp-id"><a href="#type-amp-value-amp-id" class="headerlink" title="type &amp; value &amp; id"></a>type &amp; value &amp; id</h2><p>Python 中对象有三要素：<strong>type（类型）</strong>、<strong>value（值）</strong>、<strong>id（身份）</strong>，可以将 id（身份）理解为对象在内存中的地址，每个对象都有唯一的 id。</p>
<p>在有些书中，会说还有一个 “要素” 是 <strong>alias（别名）</strong>，别名和变量名一样，也是对象的引用。</p>
<h2 id="访问权限控制"><a href="#访问权限控制" class="headerlink" title="访问权限控制"></a>访问权限控制</h2><p>Python 中通过命名限定访问权限，以两个下划线开头的成员为私有成员。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__private=<span class="string">&#x27;__private&#x27;</span></span><br><span class="line"></span><br><span class="line">Test=test()</span><br><span class="line">print(Test.__private)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">AttributeError: <span class="string">&#x27;test&#x27;</span> object has no attribute <span class="string">&#x27;__private&#x27;</span></span><br></pre></td></tr></table></figure>
<p>但事实上，Python 只不过是把所有私有成员重新命名了一下，在原来的名字前面加上了 <code>_类名</code> 。我们知道了命名规则，一样可以在类外访问私有成员:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__private=<span class="string">&#x27;__private&#x27;</span></span><br><span class="line"></span><br><span class="line">Test=test()</span><br><span class="line">print(Test._test__private) <span class="comment"># 新的命名</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__private</span><br></pre></td></tr></table></figure>
<p>也就是说，Python 并没有从语法上严格保证私有成员的私密性，它只是给私有成员换了个名字来妨碍对它们的访问。之所以这样设定，可以用这样一句名言加以解释，就是：</p>
<center>

<p><strong>“ We are all consenting adults here. ”</strong></p>
</center>

<p>因为绝大多数程序员都认为开放比封闭要好，这提供了更高的自由度。况且程序员应该自己为自己的行为负责。在实际开发中，我们通常 <strong>不将任何成员设置为私有的</strong>，因为这会导致子类无法访问。对于不希望在类外被访问的成员，一种惯例是 <strong>命名时以单下划线开头</strong>，提示该属性是受保护的，在类外访问时应慎重（还是能访问）</p>
<p>虽然不建议将属性设置为私有的，但如果直接将属性暴露给外界也是不合适的。比如，我们没有办法进行 <strong>合法性检查</strong>。这时，一般的处理方法是：遵循上面 <strong>以单下划线开头</strong> 的命名惯例，并为属性 <strong>包装 getter 和 setter 方法</strong>，这样就能使对属性的访问既安全又方便。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._name=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问器 - getter 方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改器 - setter 方法</span></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self,new_name</span>):</span></span><br><span class="line">        <span class="comment"># 可在此加入合法性检测语句</span></span><br><span class="line">        self._name=new_name</span><br><span class="line"></span><br><span class="line">person=Person()</span><br><span class="line">person.name=<span class="string">&#x27;Harry&#x27;</span></span><br><span class="line">print(person.name)</span><br></pre></td></tr></table></figure>
<h2 id="实例方法-amp-类方法-amp-静态方法"><a href="#实例方法-amp-类方法-amp-静态方法" class="headerlink" title="实例方法 &amp; 类方法 &amp; 静态方法"></a>实例方法 &amp; 类方法 &amp; 静态方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">methods</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span> <span class="comment"># 实例方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_method</span>(<span class="params">cls,l</span>):</span> <span class="comment"># 类方法</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_method</span>(<span class="params">l</span>):</span> <span class="comment"># 静态方法</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(methods.__str__)</span><br><span class="line">print(methods.class_method)</span><br><span class="line">print(methods.static_method)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;function methods.__str__ at 0x10ec0c3a0&gt;</span><br><span class="line">&lt;bound method methods.class_method of &lt;class &#39;__main__.methods&#39;&gt;&gt;</span><br><span class="line">&lt;function methods.static_method at 0x10ec0c4c0&gt;</span><br></pre></td></tr></table></figure>
<h3 id="工厂函数"><a href="#工厂函数" class="headerlink" title="工厂函数"></a>工厂函数</h3><p>我们知道 Python 中类只能有一个构造函数 <code>__init__</code>，如果我们需要 “重载构造函数”，就需要自己写 <strong>工厂函数</strong>。</p>
<p>所谓工厂函数，不过是把构造函数包装一下：将传入的参数转化为构造函数可接受的形式，再调用构造函数。工厂函数既可以用类方法，也可以用静态方法实现，但一般选择类方法，因为类方法中传入了类参数 <code>cls</code> ，使用 <code>cls()</code> 即可方便灵活地调用构造函数创建实例，而静态函数必须自己指定类名（硬编码）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">methods</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,arg_1,arg_2</span>):</span></span><br><span class="line">        self.arg_1=arg_1</span><br><span class="line">        self.arg_2=arg_2</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_method</span>(<span class="params">cls,l</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls(l[<span class="number">0</span>],l[<span class="number">1</span>]) <span class="comment"># 如果类名改变，这里不需要改变</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_method</span>(<span class="params">l</span>):</span></span><br><span class="line">        <span class="keyword">return</span> methods(l[<span class="number">0</span>],l[<span class="number">1</span>]) <span class="comment"># 如果类名改变，这里也要跟着改</span></span><br></pre></td></tr></table></figure>
<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>静态方法常用于 <strong>合法性检测</strong></p>
<h2 id="魔法函数"><a href="#魔法函数" class="headerlink" title="魔法函数"></a>魔法函数</h2><p>魔法函数（Magic Methods）是 <strong>Python 内置</strong> 的 <strong>以双下划线开头结尾的</strong> ，用来 <strong>增强自己写的类，使其具有新的特性</strong> 的一类特殊函数</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><code>__str__</code>：指定类实例用 <code>print()</code> 输出时的格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">date</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,year,month,day</span>):</span></span><br><span class="line">        self.year=year</span><br><span class="line">        self.month.month</span><br><span class="line">        self.day=day</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.year&#125;</span>/<span class="subst">&#123;self.month&#125;</span>/<span class="subst">&#123;self.day&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><ol>
<li><code>__iter__</code>：可迭代（Iterable）声明</li>
<li><code>__next__</code>：返回 <strong>下一个值</strong>，直到抛出 <code>StopIteration</code> 异常</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,num</span>):</span></span><br><span class="line">        <span class="comment"># 迭代初值</span></span><br><span class="line">        self.prev=<span class="number">0</span></span><br><span class="line">        self.curr=<span class="number">1</span></span><br><span class="line">        <span class="comment"># 计数器</span></span><br><span class="line">        self.num=num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 声明 Fib 为可迭代对象</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实现迭代</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.num&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 暂存 self.curr 以返回当前值而非下一个值</span></span><br><span class="line">            ans=self.curr</span><br><span class="line">            self.prev, self.curr=self.curr, self.prev+self.curr</span><br><span class="line">            self.num-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> Fib(<span class="number">5</span>):</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure>
<h3 id="可调用"><a href="#可调用" class="headerlink" title="可调用"></a>可调用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">call</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self,x,y</span>):</span></span><br><span class="line">        <span class="keyword">if</span> x&gt;y:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">a=call()</span><br><span class="line">print(a(<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>
<h3 id="上下文管理"><a href="#上下文管理" class="headerlink" title="上下文管理"></a>上下文管理</h3><h2 id="继承与多态"><a href="#继承与多态" class="headerlink" title="继承与多态"></a>继承与多态</h2><h3 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h3>]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>八数码</title>
    <url>/2021/01/05/eight_puzzle/</url>
    <content><![CDATA[<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p><a href="https://github.com/Stardusten/8_puzzle_algo">Github 项目地址</a></p>
<figure class="highlight txt"><figcaption><span>Test.in</span></figcaption><table><tr><td class="code"><pre><span class="line">1 2 3 4 5 6 7 8 0</span><br><span class="line">8 7 6 5 4 3 2 1 0</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>BFS.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// by Stardust 2020.12.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Tags: 1. BFS</span></span><br><span class="line"><span class="comment">         2. Bitmap</span></span><br><span class="line"><span class="comment">         3. Use Cantor expansion to encode</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// preprocess d[pos_0][move_direction]=new_pos_0</span></span><br><span class="line"><span class="comment">// move_direction: 0-Up, 1-Down, 2-Left, 3-Right</span></span><br><span class="line"><span class="comment">// val: -1-illegal move, 0~8: new_pos_0</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">9</span>][<span class="number">4</span>]=&#123;</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">-1</span>,<span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">7</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="number">-1</span>,<span class="number">6</span>,<span class="number">8</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>,<span class="number">-1</span>,<span class="number">7</span>,<span class="number">-1</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Preprocess factor range 0~9 for Cantor expansion</span></span><br><span class="line"><span class="keyword">int</span> fact[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use Cantor expansion to encode all the permutations of 123456780 to integer range 0~9!</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> code=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(p[j]&lt;p[i])  cnt++;</span><br><span class="line">        code+=fact[<span class="number">8</span>-i]*cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ceil function for bitmap constructor</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;(<span class="keyword">int</span>)x?(<span class="keyword">int</span>)x+<span class="number">1</span>:(<span class="keyword">int</span>)x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use bitmap as Closed list</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bitmap</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span>* buf;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    bitmap(): buf(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    bitmap(<span class="keyword">int</span> siz)&#123;</span><br><span class="line">        buf=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">ceil</span>(siz/<span class="number">32</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    ~bitmap()&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] buf;</span><br><span class="line">        buf=<span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_visited</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// State structure</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">9</span>]; <span class="comment">// 0 represents Space</span></span><br><span class="line">    <span class="keyword">int</span> pos; <span class="comment">// Position of space</span></span><br><span class="line">    <span class="keyword">int</span> fa; <span class="comment">// Save father state idx for each state to print the path</span></span><br><span class="line">    <span class="keyword">int</span> steps; <span class="comment">// steps to reach current state</span></span><br><span class="line">&#125;ini,goal;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use queue as Open list</span></span><br><span class="line"><span class="comment">// To save all the states, we use STL vector to simulate queue</span></span><br><span class="line"><span class="built_in">vector</span>&lt;state&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use bitmap as Closed list</span></span><br><span class="line"><span class="function">bitmap <span class="title">vis</span><span class="params">(<span class="number">362880</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(state &amp; st)</span></span>&#123;</span><br><span class="line">    <span class="comment">// flexible input method</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;)&#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;0&#x27;</span>) st.pos=i;</span><br><span class="line">        <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>) st.s[i++]=ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; <span class="comment">// Recursive print path</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">-1</span>) <span class="keyword">return</span>; <span class="comment">// Reach ini state, return</span></span><br><span class="line">    print(q[n].fa);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;q[n].s[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// Initialize factor[]</span></span><br><span class="line">    fact[<span class="number">0</span>]=<span class="number">1</span>; <span class="comment">// 0!=1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        fact[i]=i*fact[i<span class="number">-1</span>];</span><br><span class="line">    ini.fa=<span class="number">-1</span>; <span class="comment">// Recursive termination condition</span></span><br><span class="line">    ini.steps=<span class="number">0</span>;</span><br><span class="line">    q.push_back(ini); <span class="comment">// Push ini state into the Open list</span></span><br><span class="line">    <span class="keyword">int</span> front=<span class="number">0</span>, rear=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(front&lt;rear)&#123; <span class="comment">// Loop until queue is empty</span></span><br><span class="line">        state &amp; cur=q[front];</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">memcmp</span>(cur.s,goal.s,<span class="keyword">sizeof</span>(goal.s)))&#123; <span class="comment">// Find!</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;steps: &quot;</span>&lt;&lt;cur.steps&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            print(front);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123; <span class="comment">// try 4 direction</span></span><br><span class="line">            <span class="keyword">if</span>(~d[cur.pos][i])&#123; <span class="comment">// If current move is accepted</span></span><br><span class="line">                <span class="comment">// Construct the new state after move</span></span><br><span class="line">                state next;</span><br><span class="line">                <span class="built_in">memcpy</span>(next.s,cur.s,<span class="keyword">sizeof</span>(cur.s));</span><br><span class="line">                next.pos=d[cur.pos][i];</span><br><span class="line">                swap(next.s[cur.pos],next.s[next.pos]);</span><br><span class="line">                next.fa=front;</span><br><span class="line">                next.steps=cur.steps+<span class="number">1</span>;</span><br><span class="line">                <span class="comment">// Encode new state</span></span><br><span class="line">                <span class="keyword">int</span> code=encode(next.s);</span><br><span class="line">                <span class="keyword">if</span>(!vis.is_visited(code))&#123; <span class="comment">// If the new state is unvisited</span></span><br><span class="line">                    vis.visit(code); <span class="comment">// Mark it as visited</span></span><br><span class="line">                    q.push_back(next); <span class="comment">// Add it to the Open list</span></span><br><span class="line">                    rear++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        front++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine if there is a solution</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp; ini, <span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>; <span class="comment">// Inverse number</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ini.s[i]&gt;ini.s[j] &amp;&amp; ini.s[j]!=<span class="number">0</span>) n1++;</span><br><span class="line">            <span class="keyword">if</span>(goal.s[i]&gt;goal.s[j] &amp;&amp; goal.s[j]!=<span class="number">0</span>) n2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n1&amp;<span class="number">1</span>)!=(n2&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Same parity =&gt; Solvable</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// Different parity =&gt; Insolvable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">clock_t</span> start,end;</span><br><span class="line">    freopen(<span class="string">&quot;Test.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;Test.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    input(ini);</span><br><span class="line">    input(goal);</span><br><span class="line">    start=clock();</span><br><span class="line">    <span class="keyword">if</span>(is_solvable(ini,goal)) bfs();</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    end=clock();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;time: &quot;</span>&lt;&lt;end-start&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    fclose(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitmap::visit</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    n is in the j-th bit of the i-th int</span></span><br><span class="line"><span class="comment">    +----------+----------+----------+----   ---+----------+----------</span></span><br><span class="line"><span class="comment">    |  1st int |  2nd int |  3rd int |          | i-th int |</span></span><br><span class="line"><span class="comment">    +----------+----------+----------+----   ---+----------+----------</span></span><br><span class="line"><span class="comment">                                                       ↑</span></span><br><span class="line"><span class="comment">                                                    j-th bit</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> i=n/<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n&amp;<span class="number">31</span>; <span class="comment">// Equivalent to j=n%32;</span></span><br><span class="line">    buf[i]|=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       To change the j-th bit from 0 to 1,</span></span><br><span class="line"><span class="comment">       we need to construct a number whose j-th bit is 1 and the rest bits are 0 (1&lt;&lt;j),</span></span><br><span class="line"><span class="comment">       then OR the original number with the constructed number.</span></span><br><span class="line"><span class="comment">       e.g      1100 0000</span></span><br><span class="line"><span class="comment">                0000 0010</span></span><br><span class="line"><span class="comment">            OR  1100 0010</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bitmap::is_visited</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=n/<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n&amp;<span class="number">31</span>;</span><br><span class="line">    <span class="keyword">return</span> ((buf[i]&amp;(<span class="number">1</span>&lt;&lt;j))!=<span class="number">0</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       To check the j-th bit,</span></span><br><span class="line"><span class="comment">       we need to construct a number whose j-th is 1 and the rest bits are 0 (1&lt;&lt;j),</span></span><br><span class="line"><span class="comment">       then AND the original number with the constructed number.</span></span><br><span class="line"><span class="comment">       e.g      1100 0000			        1100 0000</span></span><br><span class="line"><span class="comment">                0000 0010			        0100 0000</span></span><br><span class="line"><span class="comment">           AND  0000 0000 (false)      AND  0100 0000 (true)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>BFS_2.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// by Stardust 2020.12.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Tags: 1. BFS</span></span><br><span class="line"><span class="comment">         2. Bitmap</span></span><br><span class="line"><span class="comment">         3. Use bit operation to encode</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// preprocess d[pos_0][move_direction]=new_pos_0</span></span><br><span class="line"><span class="comment">// move_direction: 0-Up, 1-Down, 2-Left, 3-Right</span></span><br><span class="line"><span class="comment">// val: -1-illegal move, 0~8: new_pos_0</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">9</span>][<span class="number">4</span>]=&#123;</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">-1</span>,<span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">7</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="number">-1</span>,<span class="number">6</span>,<span class="number">8</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>,<span class="number">-1</span>,<span class="number">7</span>,<span class="number">-1</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// State structure</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">9</span>]; <span class="comment">// 0 represents Space</span></span><br><span class="line">    <span class="keyword">int</span> pos; <span class="comment">// Position of space</span></span><br><span class="line">    <span class="keyword">int</span> steps; <span class="comment">// Steps to reach current state</span></span><br><span class="line">    <span class="keyword">int</span> h; <span class="comment">// Heuristic function</span></span><br><span class="line">    <span class="keyword">int</span> f;</span><br><span class="line">&#125;ini,goal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> state &amp; x, <span class="keyword">const</span> state &amp; y)&#123; <span class="comment">// Reload operator &lt; for priority_queue</span></span><br><span class="line">    <span class="keyword">return</span> x.f&gt;y.f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Preprocess factor range 0~9 for Cantor expansion</span></span><br><span class="line"><span class="keyword">int</span> fact[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use Cantor expansion to encode all the permutations of 123456780 to integer range 0~9!</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> code=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        code|=((<span class="keyword">long</span>)p[i]&lt;&lt;(i&lt;&lt;<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ceil function for bitmap constructor</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;(<span class="keyword">int</span>)x?(<span class="keyword">int</span>)x+<span class="number">1</span>:(<span class="keyword">int</span>)x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use bitmap as Closed list</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bitmap</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span>* buf;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    bitmap(): buf(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    bitmap(T siz)&#123;</span><br><span class="line">        buf=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">ceil</span>(siz/<span class="number">32</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    ~bitmap()&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] buf;</span><br><span class="line">        buf=<span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(T)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_visited</span><span class="params">(T)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">bitmap&lt;<span class="keyword">long</span>&gt; <span class="title">vis</span><span class="params">(<span class="number">36344967696</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use queue as Open list</span></span><br><span class="line"><span class="comment">// To save all the states, we use STL vector to simulate queue</span></span><br><span class="line"><span class="built_in">priority_queue</span>&lt;state&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc_misplaced</span><span class="params">(<span class="keyword">const</span> state &amp; cur,<span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur.s[i]!=goal.s[i]) num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine if there is a solution</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp; ini, <span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>; <span class="comment">// Inverse number</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ini.s[i]&gt;ini.s[j] &amp;&amp; ini.s[j]!=<span class="number">0</span>) n1++;</span><br><span class="line">            <span class="keyword">if</span>(goal.s[i]&gt;goal.s[j] &amp;&amp; goal.s[j]!=<span class="number">0</span>) n2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n1&amp;<span class="number">1</span>)!=(n2&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Same parity =&gt; Solvable</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// Different parity =&gt; Insolvable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// Initialize factor[]</span></span><br><span class="line">    fact[<span class="number">0</span>]=<span class="number">1</span>; <span class="comment">// 0!=1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        fact[i]=i*fact[i<span class="number">-1</span>];</span><br><span class="line">    <span class="comment">// Initialize ini state</span></span><br><span class="line">    ini.steps=<span class="number">0</span>;</span><br><span class="line">    ini.h=calc_misplaced(ini,goal);</span><br><span class="line">    ini.f=ini.steps+ini.h;</span><br><span class="line">    q.push(ini);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        state cur=q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(!cur.h)&#123; <span class="comment">// Find!</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;steps: &quot;</span>&lt;&lt;cur.steps&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123; <span class="comment">// try 4 direction</span></span><br><span class="line">            <span class="keyword">if</span>(~d[cur.pos][i])&#123; <span class="comment">// If current move is accepted</span></span><br><span class="line">                <span class="comment">// Construct the new state after move</span></span><br><span class="line">                state next;</span><br><span class="line">                <span class="built_in">memcpy</span>(next.s, cur.s, <span class="keyword">sizeof</span>(cur.s));</span><br><span class="line">                next.pos=d[cur.pos][i];</span><br><span class="line">                swap(next.s[cur.pos],next.s[next.pos]);</span><br><span class="line">                next.steps=cur.steps+<span class="number">1</span>;</span><br><span class="line">                next.h=calc_misplaced(next,goal);</span><br><span class="line">                next.f=next.steps+next.h;</span><br><span class="line">                <span class="keyword">long</span> code=encode(next.s);</span><br><span class="line">                <span class="keyword">if</span>(!vis.is_visited(code))&#123;</span><br><span class="line">                    vis.visit(code);</span><br><span class="line">                    q.push(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(state &amp; st)</span></span>&#123;</span><br><span class="line">    <span class="comment">// flexible input method</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;)&#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;0&#x27;</span>) st.pos=i;</span><br><span class="line">        <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>) st.s[i++]=ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">clock_t</span> start,end;</span><br><span class="line">    freopen(<span class="string">&quot;Test.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;Test.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    input(ini);</span><br><span class="line">    input(goal);</span><br><span class="line">    start=clock();</span><br><span class="line">    <span class="keyword">if</span>(is_solvable(ini,goal)) bfs();</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    end=clock();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;time: &quot;</span>&lt;&lt;end-start&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    fclose(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> bitmap&lt;T&gt;::visit(T n)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    n is in the j-th bit of the i-th int</span></span><br><span class="line"><span class="comment">    +----------+----------+----------+----   ---+----------+----------</span></span><br><span class="line"><span class="comment">    |  1st int |  2nd int |  3rd int |          | i-th int |</span></span><br><span class="line"><span class="comment">    +----------+----------+----------+----   ---+----------+----------</span></span><br><span class="line"><span class="comment">                                                       ↑</span></span><br><span class="line"><span class="comment">                                                    j-th bit</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> i=n/<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n&amp;<span class="number">31</span>; <span class="comment">// Equivalent to j=n%32;</span></span><br><span class="line">    buf[i]|=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       To change the j-th bit from 0 to 1,</span></span><br><span class="line"><span class="comment">       we need to construct a number whose j-th bit is 1 and the rest bits are 0 (1&lt;&lt;j),</span></span><br><span class="line"><span class="comment">       then OR the original number with the constructed number.</span></span><br><span class="line"><span class="comment">       e.g      1100 0000</span></span><br><span class="line"><span class="comment">                0000 0010</span></span><br><span class="line"><span class="comment">            OR  1100 0010</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">bool</span> bitmap&lt;T&gt;::is_visited(T n)&#123;</span><br><span class="line">    <span class="keyword">int</span> i=n/<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n&amp;<span class="number">31</span>;</span><br><span class="line">    <span class="keyword">return</span> ((buf[i]&amp;(<span class="number">1</span>&lt;&lt;j))!=<span class="number">0</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       To check the j-th bit,</span></span><br><span class="line"><span class="comment">       we need to construct a number whose j-th is 1 and the rest bits are 0 (1&lt;&lt;j),</span></span><br><span class="line"><span class="comment">       then AND the original number with the constructed number.</span></span><br><span class="line"><span class="comment">       e.g      1100 0000			        1100 0000</span></span><br><span class="line"><span class="comment">                0000 0010			        0100 0000</span></span><br><span class="line"><span class="comment">           AND  0000 0000 (false)      AND  0100 0000 (true)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>DFS.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Depth First Search</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="keyword">static</span> jmp_buf buf;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span>)</span></span>; <span class="comment">// 向上取整</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>&amp;,<span class="keyword">int</span>&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span>* p)</span></span>; <span class="comment">// 康拓展开</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bitmap</span>&#123;</span> <span class="comment">// 位图</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span>* buf;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    bitmap();</span><br><span class="line">    bitmap(<span class="keyword">int</span>);</span><br><span class="line">    ~bitmap();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">undo_visit</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_visited</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXS=<span class="number">1000</span>;</span><br><span class="line"><span class="comment">// 四种移动方式</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> fact[<span class="number">9</span>]; <span class="comment">// 预处理 0~9 的阶乘</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> state[<span class="number">9</span>]; <span class="comment">// 定义状态</span></span><br><span class="line">state st[MAXS]; <span class="comment">// 所有状态记录在 st 中</span></span><br><span class="line"><span class="keyword">int</span> dist[MAXS]; <span class="comment">// 记录初始状态到每个状态的距离</span></span><br><span class="line"><span class="keyword">int</span> goal[<span class="number">9</span>]; <span class="comment">// 目标状态</span></span><br><span class="line"><span class="function">bitmap <span class="title">vis</span><span class="params">(<span class="number">362880</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="comment">// if(d&gt;4) return;</span></span><br><span class="line">    state&amp; cur=st[d];</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">memcmp</span>(goal,cur,<span class="keyword">sizeof</span>(goal))==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;d&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=d;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;st[i][j]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        longjmp(buf,<span class="number">0</span>); <span class="comment">// longjmp 实现全局跳转</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> p0;</span><br><span class="line">    <span class="keyword">for</span>(p0=<span class="number">0</span>;p0&lt;<span class="number">9</span>;p0++) <span class="keyword">if</span>(!cur[p0]) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">int</span> x=p0/<span class="number">3</span>,y=p0%<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123; <span class="comment">// 尝试上、下、左、右移动空格</span></span><br><span class="line">        <span class="keyword">int</span> new_x=x+dx[i];</span><br><span class="line">        <span class="keyword">int</span> new_y=y+dy[i];</span><br><span class="line">        <span class="keyword">int</span> new_p0=new_x*<span class="number">3</span>+new_y;</span><br><span class="line">        <span class="keyword">if</span>(new_x&gt;=<span class="number">0</span> &amp;&amp; new_x&lt;<span class="number">3</span> &amp;&amp; new_y&gt;=<span class="number">0</span> &amp;&amp; new_y&lt;<span class="number">3</span>)&#123;</span><br><span class="line">            state&amp; t=st[d+<span class="number">1</span>];</span><br><span class="line">            <span class="built_in">memcpy</span>(&amp;t,&amp;cur,<span class="keyword">sizeof</span>(cur));</span><br><span class="line">            swap(t[new_p0],t[p0]);</span><br><span class="line">            <span class="keyword">int</span> code=encode(t);</span><br><span class="line">            <span class="keyword">if</span>(!vis.is_visited(code))&#123;</span><br><span class="line">                vis.visit(code);</span><br><span class="line">                dfs(d+<span class="number">1</span>);</span><br><span class="line">                vis.undo_visit(code);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    freopen(<span class="string">&quot;Test.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;Test.out&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;st[<span class="number">0</span>][i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;goal[i];</span><br><span class="line">    fact[<span class="number">0</span>]=<span class="number">1</span>; <span class="comment">// 0!=1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        fact[i]=i*fact[i<span class="number">-1</span>];</span><br><span class="line">    <span class="comment">//int a[9]=&#123;1,2,3,4,0,6,7,5,8&#125;;</span></span><br><span class="line">    <span class="comment">//std::cout&lt;&lt;encode(a);</span></span><br><span class="line">    vis.visit(encode(st[<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">int</span> r=setjmp(buf);</span><br><span class="line">    <span class="keyword">if</span>(!r) dfs(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//std::cout&lt;&lt;dist[ans];</span></span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    fclose(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;(<span class="keyword">int</span>)x?(<span class="keyword">int</span>)x+<span class="number">1</span>:(<span class="keyword">int</span>)x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>&amp; x,<span class="keyword">int</span>&amp; y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> code=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(p[j]&lt;p[i])  cnt++;</span><br><span class="line">        code+=fact[<span class="number">8</span>-i]*cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line">bitmap::bitmap():buf(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">bitmap::bitmap(<span class="keyword">int</span> upper_bound)&#123;</span><br><span class="line">    buf=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">ceil</span>(upper_bound/<span class="number">32</span>)];</span><br><span class="line">&#125;</span><br><span class="line">bitmap::~bitmap()&#123;</span><br><span class="line">    <span class="keyword">delete</span> [] buf;</span><br><span class="line">    buf=<span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitmap::visit</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">// n 对应的 bit 为第 i 个 int 的第 j 位</span></span><br><span class="line">    <span class="keyword">int</span> i=n/<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n&amp;<span class="number">31</span>;</span><br><span class="line">    <span class="comment">// a%b==a&amp;(b-1) b 为 2 的幂</span></span><br><span class="line">    buf[i]|=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitmap::undo_visit</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=n/<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n&amp;<span class="number">31</span>;</span><br><span class="line">    buf[i]|=~(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bitmap::is_visited</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=n/<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n&amp;<span class="number">31</span>;</span><br><span class="line">    <span class="keyword">return</span> ((buf[i]&amp;(<span class="number">1</span>&lt;&lt;j))!=<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>IDDFS.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// by Stardust 2020.12.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Tags: 1. IDDFS</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> max_depth=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// preprocess d[pos_0][move_direction]=new_pos_0</span></span><br><span class="line"><span class="comment">// move_direction: 0-Up, 1-Down, 2-Left, 3-Right</span></span><br><span class="line"><span class="comment">// val: -1-illegal move, 0~8: new_pos_0</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">9</span>][<span class="number">4</span>]=&#123;</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">-1</span>,<span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">7</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="number">-1</span>,<span class="number">6</span>,<span class="number">8</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>,<span class="number">-1</span>,<span class="number">7</span>,<span class="number">-1</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// State structure</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">9</span>]; <span class="comment">// 0 represents Space</span></span><br><span class="line">    <span class="keyword">int</span> pos; <span class="comment">// Position of space</span></span><br><span class="line">&#125;ini,goal;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;state&gt; st; <span class="comment">// Save states to print path</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine if there is a solution</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp; ini, <span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>; <span class="comment">// Inverse number</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ini.s[i]&gt;ini.s[j] &amp;&amp; ini.s[j]!=<span class="number">0</span>) n1++;</span><br><span class="line">            <span class="keyword">if</span>(goal.s[i]&gt;goal.s[j] &amp;&amp; goal.s[j]!=<span class="number">0</span>) n2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n1&amp;<span class="number">1</span>)!=(n2&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Same parity =&gt; Solvable</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// Different parity =&gt; Insolvable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IDDFS</span><span class="params">(state &amp; cur, <span class="keyword">const</span> <span class="keyword">int</span> &amp; steps, <span class="keyword">const</span> <span class="keyword">int</span> &amp; prepos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">memcmp</span>(cur.s,goal.s,<span class="keyword">sizeof</span>(goal.s)))&#123; <span class="comment">// Find!</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;steps: &quot;</span>&lt;&lt;steps&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        st.push(cur);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// Set return flag</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Reach max_f and no solution was found</span></span><br><span class="line">    <span class="comment">// Return recursively and search with bigger max_f later</span></span><br><span class="line">    <span class="keyword">if</span>(steps&gt;max_depth) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123; <span class="comment">// try 4 direction</span></span><br><span class="line">        <span class="comment">// If the next state is the same as the previous state,</span></span><br><span class="line">        <span class="comment">// there is a loop, so we need to skip this state</span></span><br><span class="line">        <span class="comment">// We choose to compare the position of 0 between the two states instead of using memcmp,</span></span><br><span class="line">        <span class="comment">// because you cannot move 0 back and move another block at the same time</span></span><br><span class="line">        <span class="keyword">if</span>(d[cur.pos][i]==prepos) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(~d[cur.pos][i])&#123;  <span class="comment">// If current move is accepted</span></span><br><span class="line">            <span class="comment">// Construct the new state after move</span></span><br><span class="line">            state next;</span><br><span class="line">            <span class="built_in">memcpy</span>(next.s,cur.s,<span class="keyword">sizeof</span>(cur.s));</span><br><span class="line">            next.pos=d[cur.pos][i];</span><br><span class="line">            swap(next.s[cur.pos],next.s[next.pos]);</span><br><span class="line">            <span class="keyword">if</span>(IDDFS(next, steps+<span class="number">1</span>, cur.pos))&#123;</span><br><span class="line">                st.push(cur);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// Return recursively</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(state &amp; st)</span></span>&#123;</span><br><span class="line">    <span class="comment">// flexible input method</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;)&#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;0&#x27;</span>) st.pos=i;</span><br><span class="line">        <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>) st.s[i++]=ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line">        state &amp; tmp=st.top();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;tmp.s[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        st.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">clock_t</span> start,end;</span><br><span class="line">    freopen(<span class="string">&quot;Test.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;Test.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    input(ini);</span><br><span class="line">    input(goal);</span><br><span class="line">    start=clock();</span><br><span class="line">    <span class="keyword">if</span>(is_solvable(ini,goal))&#123;</span><br><span class="line">        <span class="comment">// Increase max_f iteratively until a solution was found</span></span><br><span class="line">        <span class="keyword">while</span>(!IDDFS(ini,<span class="number">0</span>,<span class="number">-1</span>)) max_depth++;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    print();</span><br><span class="line">    end=clock();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;time: &quot;</span>&lt;&lt;end-start&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    fclose(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>IDA*_manhattan.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// by Stardust 2020.12.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Tags: 1. IDA*</span></span><br><span class="line"><span class="comment">         2. Manhattan</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> max_f; <span class="comment">// Maximun search f value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// preprocess d[pos_0][move_direction]=new_pos_0</span></span><br><span class="line"><span class="comment">// move_direction: 0-Up, 1-Down, 2-Left, 3-Right</span></span><br><span class="line"><span class="comment">// val: -1-illegal move, 0~8: new_pos_0</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">9</span>][<span class="number">4</span>]=&#123;</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">-1</span>,<span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">7</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="number">-1</span>,<span class="number">6</span>,<span class="number">8</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>,<span class="number">-1</span>,<span class="number">7</span>,<span class="number">-1</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// State structure</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">9</span>]; <span class="comment">// 0 represents Space</span></span><br><span class="line">    <span class="keyword">int</span> pos; <span class="comment">// Position of space</span></span><br><span class="line">&#125;ini,goal;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;state&gt; st; <span class="comment">// Save states to print path</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// preprocess manhattan[pos_1][pos_2] = manhattan distance between block 1 and block 2</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> manhattan[<span class="number">9</span>][<span class="number">9</span>]=&#123;</span><br><span class="line">        <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,</span><br><span class="line">        <span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br><span class="line">        <span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,</span><br><span class="line">        <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br><span class="line">        <span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,</span><br><span class="line">        <span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,</span><br><span class="line">        <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,</span><br><span class="line">        <span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">        <span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc_manhattan</span><span class="params">(<span class="keyword">const</span> state &amp; cur,<span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dis=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.s[i]==goal.s[j])&#123;</span><br><span class="line">                dis+=manhattan[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine if there is a solution</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp; ini, <span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>; <span class="comment">// Inverse number</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ini.s[i]&gt;ini.s[j] &amp;&amp; ini.s[j]!=<span class="number">0</span>) n1++;</span><br><span class="line">            <span class="keyword">if</span>(goal.s[i]&gt;goal.s[j] &amp;&amp; goal.s[j]!=<span class="number">0</span>) n2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n1&amp;<span class="number">1</span>)!=(n2&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Same parity =&gt; Solvable</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// Different parity =&gt; Insolvable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IDA_star</span><span class="params">(state &amp; cur, <span class="keyword">const</span> <span class="keyword">int</span> &amp; steps, <span class="keyword">const</span> <span class="keyword">int</span> &amp; h, <span class="keyword">const</span> <span class="keyword">int</span> &amp; prepos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">memcmp</span>(cur.s,goal.s,<span class="keyword">sizeof</span>(goal.s)))&#123; <span class="comment">// Find!</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;steps: &quot;</span>&lt;&lt;steps&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        st.push(cur);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// Set return flag</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Reach max_f and no solution was found</span></span><br><span class="line">    <span class="comment">// Return recursively and search with bigger max_f later</span></span><br><span class="line">    <span class="keyword">if</span>(steps+h&gt;max_f) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123; <span class="comment">// try 4 direction</span></span><br><span class="line">        <span class="comment">// If the next state is the same as the previous state,</span></span><br><span class="line">        <span class="comment">// there is a loop, so we need to skip this state</span></span><br><span class="line">        <span class="comment">// We choose to compare the position of 0 in the two states instead of using memcmp,</span></span><br><span class="line">        <span class="comment">// because you cannot move 0 back and move another block at the same time</span></span><br><span class="line">        <span class="keyword">if</span>(d[cur.pos][i]==prepos) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(~d[cur.pos][i])&#123;  <span class="comment">// If current move is accepted</span></span><br><span class="line">            <span class="comment">// Construct the new state after move</span></span><br><span class="line">            state next;</span><br><span class="line">            <span class="built_in">memcpy</span>(next.s,cur.s,<span class="keyword">sizeof</span>(cur.s));</span><br><span class="line">            next.pos=d[cur.pos][i];</span><br><span class="line">            swap(next.s[cur.pos],next.s[next.pos]);</span><br><span class="line">            <span class="keyword">if</span>(IDA_star(next, steps+<span class="number">1</span>, calc_manhattan(next,goal), cur.pos))&#123;</span><br><span class="line">                st.push(cur);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// Return recursively</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(state &amp; st)</span></span>&#123;</span><br><span class="line">    <span class="comment">// flexible input method</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;)&#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;0&#x27;</span>) st.pos=i;</span><br><span class="line">        <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>) st.s[i++]=ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line">        state &amp; tmp=st.top();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;tmp.s[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        st.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">clock_t</span> start,end;</span><br><span class="line">    freopen(<span class="string">&quot;Test.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;Test.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    input(ini);</span><br><span class="line">    input(goal);</span><br><span class="line">    start=clock();</span><br><span class="line">    max_f=calc_manhattan(ini,goal);</span><br><span class="line">    <span class="keyword">if</span>(is_solvable(ini,goal))&#123;</span><br><span class="line">        <span class="comment">// Increase max_f iteratively until a solution was found</span></span><br><span class="line">        <span class="keyword">while</span>(!IDA_star(ini,<span class="number">0</span>,max_f,<span class="number">-1</span>)) max_f++;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    print();</span><br><span class="line">    end=clock();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;time: &quot;</span>&lt;&lt;end-start&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    fclose(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>A*_manhattan.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// by Stardust 2020.12.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Tags: 1. A*</span></span><br><span class="line"><span class="comment">         2. Manhattan</span></span><br><span class="line"><span class="comment">         3. Bitmap</span></span><br><span class="line"><span class="comment">         4. Use Cantor expansion to encode</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// preprocess d[pos_0][move_direction]=new_pos_0</span></span><br><span class="line"><span class="comment">// move_direction: 0-Up, 1-Down, 2-Left, 3-Right</span></span><br><span class="line"><span class="comment">// val: -1-illegal move, 0~8: new_pos_0</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">9</span>][<span class="number">4</span>]=&#123;</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">-1</span>,<span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">7</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="number">-1</span>,<span class="number">6</span>,<span class="number">8</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>,<span class="number">-1</span>,<span class="number">7</span>,<span class="number">-1</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// State structure</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">9</span>]; <span class="comment">// 0 represents Space</span></span><br><span class="line">    <span class="keyword">int</span> pos; <span class="comment">// Position of space</span></span><br><span class="line">    <span class="keyword">int</span> steps; <span class="comment">// Steps to reach current state</span></span><br><span class="line">    <span class="keyword">int</span> h; <span class="comment">// Heuristic function</span></span><br><span class="line">    <span class="keyword">int</span> f;</span><br><span class="line">    <span class="keyword">int</span> fa;</span><br><span class="line">&#125;ini,goal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> state &amp; x, <span class="keyword">const</span> state &amp; y)&#123; <span class="comment">// Reload operator &lt; for priority_queue</span></span><br><span class="line">    <span class="keyword">return</span> x.f&gt;y.f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use vector to save all the states</span></span><br><span class="line"><span class="built_in">vector</span>&lt;state&gt; v;</span><br><span class="line"><span class="keyword">int</span> v_end=<span class="number">-1</span>; <span class="comment">// End index</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Preprocess factor range 0~9 for Cantor expansion</span></span><br><span class="line"><span class="keyword">int</span> fact[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use Cantor expansion to encode all the permutations of 123456780 to integer range 0~9!</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> code=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(p[j]&lt;p[i])  cnt++;</span><br><span class="line">        code+=fact[<span class="number">8</span>-i]*cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ceil function for bitmap constructor</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;(<span class="keyword">int</span>)x?(<span class="keyword">int</span>)x+<span class="number">1</span>:(<span class="keyword">int</span>)x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use bitmap as Closed list</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bitmap</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span>* buf;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    bitmap(): buf(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    bitmap(<span class="keyword">int</span> siz)&#123;</span><br><span class="line">        buf=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">ceil</span>(siz/<span class="number">32</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    ~bitmap()&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] buf;</span><br><span class="line">        buf=<span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_visited</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">bitmap <span class="title">vis</span><span class="params">(<span class="number">362880</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use queue as Open list</span></span><br><span class="line"><span class="comment">// To save all the states, we use STL vector to simulate queue</span></span><br><span class="line"><span class="built_in">priority_queue</span>&lt;state&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="comment">// preprocess manhattan[pos_1][pos_2] = manhattan distance between block 1 and block 2</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> manhattan[<span class="number">9</span>][<span class="number">9</span>]=&#123;</span><br><span class="line">        <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,</span><br><span class="line">        <span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br><span class="line">        <span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,</span><br><span class="line">        <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br><span class="line">        <span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,</span><br><span class="line">        <span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,</span><br><span class="line">        <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,</span><br><span class="line">        <span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">        <span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc_manhattan</span><span class="params">(<span class="keyword">const</span> state &amp; cur,<span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dis=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.s[i]==goal.s[j])&#123;</span><br><span class="line">                dis+=manhattan[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine if there is a solution</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp; ini, <span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>; <span class="comment">// Inverse number</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ini.s[i]&gt;ini.s[j] &amp;&amp; ini.s[j]!=<span class="number">0</span>) n1++;</span><br><span class="line">            <span class="keyword">if</span>(goal.s[i]&gt;goal.s[j] &amp;&amp; goal.s[j]!=<span class="number">0</span>) n2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n1&amp;<span class="number">1</span>)!=(n2&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Same parity =&gt; Solvable</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// Different parity =&gt; Insolvable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp; fa)</span></span>&#123; <span class="comment">// Print path recursively</span></span><br><span class="line">    <span class="keyword">if</span>(fa==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    print(v[fa].fa);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;v[fa].s[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// Initialize factor[]</span></span><br><span class="line">    fact[<span class="number">0</span>]=<span class="number">1</span>; <span class="comment">// 0!=1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        fact[i]=i*fact[i<span class="number">-1</span>];</span><br><span class="line">    <span class="comment">// Initialize ini state</span></span><br><span class="line">    ini.steps=<span class="number">0</span>;</span><br><span class="line">    ini.h=calc_manhattan(ini,goal);</span><br><span class="line">    ini.f=ini.steps+ini.h;</span><br><span class="line">    ini.fa=<span class="number">-1</span>;</span><br><span class="line">    q.push(ini);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        state cur=q.top();</span><br><span class="line">        v.push_back(cur);</span><br><span class="line">        v_end++;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(!cur.h)&#123; <span class="comment">// Find!</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;steps: &quot;</span>&lt;&lt;cur.steps&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            print(v_end);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123; <span class="comment">// try 4 direction</span></span><br><span class="line">            <span class="keyword">if</span>(~d[cur.pos][i])&#123; <span class="comment">// If current move is accepted</span></span><br><span class="line">                <span class="comment">// Construct the new state after move</span></span><br><span class="line">                state next;</span><br><span class="line">                <span class="built_in">memcpy</span>(next.s, cur.s, <span class="keyword">sizeof</span>(cur.s));</span><br><span class="line">                next.pos=d[cur.pos][i];</span><br><span class="line">                swap(next.s[cur.pos],next.s[next.pos]);</span><br><span class="line">                next.steps=cur.steps+<span class="number">1</span>;</span><br><span class="line">                next.h=calc_manhattan(next,goal);</span><br><span class="line">                next.f=next.steps+next.h;</span><br><span class="line">                next.fa=v_end;</span><br><span class="line">                <span class="keyword">int</span> code=encode(next.s);</span><br><span class="line">                <span class="keyword">if</span>(!vis.is_visited(code))&#123;</span><br><span class="line">                    vis.visit(code);</span><br><span class="line">                    q.push(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(state &amp; st)</span></span>&#123;</span><br><span class="line">    <span class="comment">// flexible input method</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;)&#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;0&#x27;</span>) st.pos=i;</span><br><span class="line">        <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>) st.s[i++]=ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">clock_t</span> start,end;</span><br><span class="line">    freopen(<span class="string">&quot;Test.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;Test.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    input(ini);</span><br><span class="line">    input(goal);</span><br><span class="line">    start=clock();</span><br><span class="line">    <span class="keyword">if</span>(is_solvable(ini,goal)) bfs();</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    end=clock();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;time: &quot;</span>&lt;&lt;end-start&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    fclose(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitmap::visit</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    n is in the j-th bit of the i-th int</span></span><br><span class="line"><span class="comment">    +----------+----------+----------+----   ---+----------+----------</span></span><br><span class="line"><span class="comment">    |  1st int |  2nd int |  3rd int |          | i-th int |</span></span><br><span class="line"><span class="comment">    +----------+----------+----------+----   ---+----------+----------</span></span><br><span class="line"><span class="comment">                                                       ↑</span></span><br><span class="line"><span class="comment">                                                    j-th bit</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> i=n/<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n&amp;<span class="number">31</span>; <span class="comment">// Equivalent to j=n%32;</span></span><br><span class="line">    buf[i]|=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       To change the j-th bit from 0 to 1,</span></span><br><span class="line"><span class="comment">       we need to construct a number whose j-th bit is 1 and the rest bits are 0 (1&lt;&lt;j),</span></span><br><span class="line"><span class="comment">       then OR the original number with the constructed number.</span></span><br><span class="line"><span class="comment">       e.g      1100 0000</span></span><br><span class="line"><span class="comment">                0000 0010</span></span><br><span class="line"><span class="comment">            OR  1100 0010</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bitmap::is_visited</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=n/<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n&amp;<span class="number">31</span>;</span><br><span class="line">    <span class="keyword">return</span> ((buf[i]&amp;(<span class="number">1</span>&lt;&lt;j))!=<span class="number">0</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       To check the j-th bit,</span></span><br><span class="line"><span class="comment">       we need to construct a number whose j-th is 1 and the rest bits are 0 (1&lt;&lt;j),</span></span><br><span class="line"><span class="comment">       then AND the original number with the constructed number.</span></span><br><span class="line"><span class="comment">       e.g      1100 0000			        1100 0000</span></span><br><span class="line"><span class="comment">                0000 0010			        0100 0000</span></span><br><span class="line"><span class="comment">           AND  0000 0000 (false)      AND  0100 0000 (true)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>A*_manhattan_2.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// by Stardust 2020.12.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Tags: 1. A*</span></span><br><span class="line"><span class="comment">         2. Manhattan</span></span><br><span class="line"><span class="comment">         3. Bitmap</span></span><br><span class="line"><span class="comment">         4. Use bit operation to encode</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// preprocess d[pos_0][move_direction]=new_pos_0</span></span><br><span class="line"><span class="comment">// move_direction: 0-Up, 1-Down, 2-Left, 3-Right</span></span><br><span class="line"><span class="comment">// val: -1-illegal move, 0~8: new_pos_0</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">9</span>][<span class="number">4</span>]=&#123;</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">-1</span>,<span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">7</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="number">-1</span>,<span class="number">6</span>,<span class="number">8</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>,<span class="number">-1</span>,<span class="number">7</span>,<span class="number">-1</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// State structure</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">9</span>]; <span class="comment">// 0 represents Space</span></span><br><span class="line">    <span class="keyword">int</span> pos; <span class="comment">// Position of space</span></span><br><span class="line">    <span class="keyword">int</span> steps; <span class="comment">// Steps to reach current state</span></span><br><span class="line">    <span class="keyword">int</span> h; <span class="comment">// Heuristic function</span></span><br><span class="line">    <span class="keyword">int</span> f;</span><br><span class="line">    <span class="keyword">int</span> fa;</span><br><span class="line">&#125;ini,goal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> state &amp; x, <span class="keyword">const</span> state &amp; y)&#123; <span class="comment">// Reload operator &lt; for priority_queue</span></span><br><span class="line">    <span class="keyword">return</span> x.f&gt;y.f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use vector to save all the states</span></span><br><span class="line"><span class="built_in">vector</span>&lt;state&gt; v;</span><br><span class="line"><span class="keyword">int</span> v_end=<span class="number">-1</span>; <span class="comment">// End index</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Preprocess factor range 0~9 for Cantor expansion</span></span><br><span class="line"><span class="keyword">int</span> fact[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use bit operation to encode all the permutations of 123456780 to long integer</span></span><br><span class="line"><span class="comment">// Store an integer range 0(0000)~8(1000) every 4 bits</span></span><br><span class="line"><span class="comment">// So the min_code = 305419896 (represents 0,1,2,3,4,5,6,7,8)</span></span><br><span class="line"><span class="comment">//        max_code = 36344967696 (represents 8,7,6,5,4,3,2,1,0)</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> code=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        code|=((<span class="keyword">long</span>)p[i]&lt;&lt;(i&lt;&lt;<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ceil function for bitmap constructor</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;(<span class="keyword">int</span>)x?(<span class="keyword">int</span>)x+<span class="number">1</span>:(<span class="keyword">int</span>)x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use bitmap as Closed list</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bitmap</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span>* buf;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    bitmap(): buf(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    bitmap(T siz)&#123;</span><br><span class="line">        buf=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">ceil</span>(siz/<span class="number">32</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    ~bitmap()&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] buf;</span><br><span class="line">        buf=<span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(T)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_visited</span><span class="params">(T)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">bitmap&lt;<span class="keyword">long</span>&gt; <span class="title">vis</span><span class="params">(<span class="number">36344967696</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use queue as Open list</span></span><br><span class="line"><span class="comment">// To save all the states, we use STL vector to simulate queue</span></span><br><span class="line"><span class="built_in">priority_queue</span>&lt;state&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="comment">// preprocess manhattan[pos_1][pos_2] = manhattan distance between block 1 and block 2</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> manhattan[<span class="number">9</span>][<span class="number">9</span>]=&#123;</span><br><span class="line">        <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,</span><br><span class="line">        <span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br><span class="line">        <span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,</span><br><span class="line">        <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br><span class="line">        <span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,</span><br><span class="line">        <span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,</span><br><span class="line">        <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,</span><br><span class="line">        <span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">        <span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc_manhattan</span><span class="params">(<span class="keyword">const</span> state &amp; cur,<span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dis=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.s[i]==goal.s[j])&#123;</span><br><span class="line">                dis+=manhattan[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine if there is a solution</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp; ini, <span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>; <span class="comment">// Inverse number</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ini.s[i]&gt;ini.s[j] &amp;&amp; ini.s[j]!=<span class="number">0</span>) n1++;</span><br><span class="line">            <span class="keyword">if</span>(goal.s[i]&gt;goal.s[j] &amp;&amp; goal.s[j]!=<span class="number">0</span>) n2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n1&amp;<span class="number">1</span>)!=(n2&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Same parity =&gt; Solvable</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// Different parity =&gt; Insolvable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp; fa)</span></span>&#123; <span class="comment">// Print path recursively</span></span><br><span class="line">    <span class="keyword">if</span>(fa==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    print(v[fa].fa);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;v[fa].s[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// Initialize factor[]</span></span><br><span class="line">    fact[<span class="number">0</span>]=<span class="number">1</span>; <span class="comment">// 0!=1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        fact[i]=i*fact[i<span class="number">-1</span>];</span><br><span class="line">    <span class="comment">// Initialize ini state</span></span><br><span class="line">    ini.steps=<span class="number">0</span>;</span><br><span class="line">    ini.h=calc_manhattan(ini,goal);</span><br><span class="line">    ini.f=ini.steps+ini.h;</span><br><span class="line">    ini.fa=<span class="number">-1</span>;</span><br><span class="line">    q.push(ini);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        state cur=q.top();</span><br><span class="line">        v.push_back(cur);</span><br><span class="line">        v_end++;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(!cur.h)&#123; <span class="comment">// Find!</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;steps: &quot;</span>&lt;&lt;cur.steps&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            print(v_end);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123; <span class="comment">// try 4 direction</span></span><br><span class="line">            <span class="keyword">if</span>(~d[cur.pos][i])&#123; <span class="comment">// If current move is accepted</span></span><br><span class="line">                <span class="comment">// Construct the new state after move</span></span><br><span class="line">                state next;</span><br><span class="line">                <span class="built_in">memcpy</span>(next.s, cur.s, <span class="keyword">sizeof</span>(cur.s));</span><br><span class="line">                next.pos=d[cur.pos][i];</span><br><span class="line">                swap(next.s[cur.pos],next.s[next.pos]);</span><br><span class="line">                next.steps=cur.steps+<span class="number">1</span>;</span><br><span class="line">                next.h=calc_manhattan(next,goal);</span><br><span class="line">                next.f=next.steps+next.h;</span><br><span class="line">                next.fa=v_end;</span><br><span class="line">                <span class="keyword">long</span> code=encode(next.s);</span><br><span class="line">                <span class="keyword">if</span>(!vis.is_visited(code))&#123;</span><br><span class="line">                    vis.visit(code);</span><br><span class="line">                    q.push(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(state &amp; st)</span></span>&#123;</span><br><span class="line">    <span class="comment">// flexible input method</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;)&#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;0&#x27;</span>) st.pos=i;</span><br><span class="line">        <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>) st.s[i++]=ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">clock_t</span> start,end;</span><br><span class="line">    freopen(<span class="string">&quot;Test.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;Test.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    input(ini);</span><br><span class="line">    input(goal);</span><br><span class="line">    start=clock();</span><br><span class="line">    <span class="keyword">if</span>(is_solvable(ini,goal)) bfs();</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    end=clock();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;time: &quot;</span>&lt;&lt;end-start&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    fclose(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> bitmap&lt;T&gt;::visit(T n)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    n is in the j-th bit of the i-th int</span></span><br><span class="line"><span class="comment">    +----------+----------+----------+----   ---+----------+----------</span></span><br><span class="line"><span class="comment">    |  1st int |  2nd int |  3rd int |          | i-th int |</span></span><br><span class="line"><span class="comment">    +----------+----------+----------+----   ---+----------+----------</span></span><br><span class="line"><span class="comment">                                                       ↑</span></span><br><span class="line"><span class="comment">                                                    j-th bit</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> i=n/<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n&amp;<span class="number">31</span>; <span class="comment">// Equivalent to j=n%32;</span></span><br><span class="line">    buf[i]|=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       To change the j-th bit from 0 to 1,</span></span><br><span class="line"><span class="comment">       we need to construct a number whose j-th bit is 1 and the rest bits are 0 (1&lt;&lt;j),</span></span><br><span class="line"><span class="comment">       then OR the original number with the constructed number.</span></span><br><span class="line"><span class="comment">       e.g      1100 0000</span></span><br><span class="line"><span class="comment">                0000 0010</span></span><br><span class="line"><span class="comment">            OR  1100 0010</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">bool</span> bitmap&lt;T&gt;::is_visited(T n)&#123;</span><br><span class="line">    <span class="keyword">int</span> i=n/<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n&amp;<span class="number">31</span>;</span><br><span class="line">    <span class="keyword">return</span> ((buf[i]&amp;(<span class="number">1</span>&lt;&lt;j))!=<span class="number">0</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       To check the j-th bit,</span></span><br><span class="line"><span class="comment">       we need to construct a number whose j-th is 1 and the rest bits are 0 (1&lt;&lt;j),</span></span><br><span class="line"><span class="comment">       then AND the original number with the constructed number.</span></span><br><span class="line"><span class="comment">       e.g      1100 0000			        1100 0000</span></span><br><span class="line"><span class="comment">                0000 0010			        0100 0000</span></span><br><span class="line"><span class="comment">           AND  0000 0000 (false)      AND  0100 0000 (true)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>A*_manhattan_3.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// by Stardust 2020.12.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Tags: 1. A*</span></span><br><span class="line"><span class="comment">         2. Misplaced number</span></span><br><span class="line"><span class="comment">         3. Bitmap</span></span><br><span class="line"><span class="comment">         4. Use bit operation to encode</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// preprocess d[pos_0][move_direction]=new_pos_0</span></span><br><span class="line"><span class="comment">// move_direction: 0-Up, 1-Down, 2-Left, 3-Right</span></span><br><span class="line"><span class="comment">// val: -1-illegal move, 0~8: new_pos_0</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">9</span>][<span class="number">4</span>]=&#123;</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">-1</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">-1</span>,<span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">7</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>,<span class="number">-1</span>,<span class="number">6</span>,<span class="number">8</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>,<span class="number">-1</span>,<span class="number">7</span>,<span class="number">-1</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// State structure</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">9</span>]; <span class="comment">// 0 represents Space</span></span><br><span class="line">    <span class="keyword">int</span> pos; <span class="comment">// Position of space</span></span><br><span class="line">    <span class="keyword">int</span> steps; <span class="comment">// Steps to reach current state</span></span><br><span class="line">    <span class="keyword">int</span> h; <span class="comment">// Heuristic function</span></span><br><span class="line">    <span class="keyword">int</span> f;</span><br><span class="line">    <span class="keyword">int</span> fa;</span><br><span class="line">&#125;ini,goal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> state &amp; x, <span class="keyword">const</span> state &amp; y)&#123; <span class="comment">// Reload operator &lt; for priority_queue</span></span><br><span class="line">    <span class="keyword">return</span> x.f&gt;y.f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use vector to save all the states</span></span><br><span class="line"><span class="built_in">vector</span>&lt;state&gt; v;</span><br><span class="line"><span class="keyword">int</span> v_end=<span class="number">-1</span>; <span class="comment">// End index</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Preprocess factor range 0~9 for Cantor expansion</span></span><br><span class="line"><span class="keyword">int</span> fact[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use Cantor expansion to encode all the permutations of 123456780 to integer range 0~9!</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> code=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        code|=((<span class="keyword">long</span>)p[i]&lt;&lt;(i&lt;&lt;<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ceil function for bitmap constructor</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;(<span class="keyword">int</span>)x?(<span class="keyword">int</span>)x+<span class="number">1</span>:(<span class="keyword">int</span>)x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use bitmap as Closed list</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bitmap</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span>* buf;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    bitmap(): buf(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    bitmap(T siz)&#123;</span><br><span class="line">        buf=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">ceil</span>(siz/<span class="number">32</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    ~bitmap()&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] buf;</span><br><span class="line">        buf=<span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(T)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_visited</span><span class="params">(T)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">bitmap&lt;<span class="keyword">long</span>&gt; <span class="title">vis</span><span class="params">(<span class="number">36344967696</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use queue as Open list</span></span><br><span class="line"><span class="comment">// To save all the states, we use STL vector to simulate queue</span></span><br><span class="line"><span class="built_in">priority_queue</span>&lt;state&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc_misplaced</span><span class="params">(<span class="keyword">const</span> state &amp; cur,<span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur.s[i]!=goal.s[i]) num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine if there is a solution</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp; ini, <span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>; <span class="comment">// Inverse number</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ini.s[i]&gt;ini.s[j] &amp;&amp; ini.s[j]!=<span class="number">0</span>) n1++;</span><br><span class="line">            <span class="keyword">if</span>(goal.s[i]&gt;goal.s[j] &amp;&amp; goal.s[j]!=<span class="number">0</span>) n2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n1&amp;<span class="number">1</span>)!=(n2&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Same parity =&gt; Solvable</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// Different parity =&gt; Insolvable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp; fa)</span></span>&#123; <span class="comment">// Print path recursively</span></span><br><span class="line">    <span class="keyword">if</span>(fa==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    print(v[fa].fa);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;v[fa].s[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// Initialize factor[]</span></span><br><span class="line">    fact[<span class="number">0</span>]=<span class="number">1</span>; <span class="comment">// 0!=1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        fact[i]=i*fact[i<span class="number">-1</span>];</span><br><span class="line">    <span class="comment">// Initialize ini state</span></span><br><span class="line">    ini.steps=<span class="number">0</span>;</span><br><span class="line">    ini.h=calc_misplaced(ini,goal);</span><br><span class="line">    ini.f=ini.steps+ini.h;</span><br><span class="line">    ini.fa=<span class="number">-1</span>;</span><br><span class="line">    q.push(ini);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        state cur=q.top();</span><br><span class="line">        v.push_back(cur);</span><br><span class="line">        v_end++;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(!cur.h)&#123; <span class="comment">// Find!</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;steps: &quot;</span>&lt;&lt;cur.steps&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            print(v_end);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123; <span class="comment">// try 4 direction</span></span><br><span class="line">            <span class="keyword">if</span>(~d[cur.pos][i])&#123; <span class="comment">// If current move is accepted</span></span><br><span class="line">                <span class="comment">// Construct the new state after move</span></span><br><span class="line">                state next;</span><br><span class="line">                <span class="built_in">memcpy</span>(next.s, cur.s, <span class="keyword">sizeof</span>(cur.s));</span><br><span class="line">                next.pos=d[cur.pos][i];</span><br><span class="line">                swap(next.s[cur.pos],next.s[next.pos]);</span><br><span class="line">                next.steps=cur.steps+<span class="number">1</span>;</span><br><span class="line">                next.h=calc_misplaced(next,goal);</span><br><span class="line">                next.f=next.steps+next.h;</span><br><span class="line">                next.fa=v_end;</span><br><span class="line">                <span class="keyword">long</span> code=encode(next.s);</span><br><span class="line">                <span class="keyword">if</span>(!vis.is_visited(code))&#123;</span><br><span class="line">                    vis.visit(code);</span><br><span class="line">                    q.push(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(state &amp; st)</span></span>&#123;</span><br><span class="line">    <span class="comment">// flexible input method</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;)&#123;</span><br><span class="line">        ch=getchar();</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;0&#x27;</span>) st.pos=i;</span><br><span class="line">        <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>) st.s[i++]=ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">clock_t</span> start,end;</span><br><span class="line">    freopen(<span class="string">&quot;Test.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;Test.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    input(ini);</span><br><span class="line">    input(goal);</span><br><span class="line">    start=clock();</span><br><span class="line">    <span class="keyword">if</span>(is_solvable(ini,goal)) bfs();</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    end=clock();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;time: &quot;</span>&lt;&lt;end-start&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    fclose(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> bitmap&lt;T&gt;::visit(T n)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    n is in the j-th bit of the i-th int</span></span><br><span class="line"><span class="comment">    +----------+----------+----------+----   ---+----------+----------</span></span><br><span class="line"><span class="comment">    |  1st int |  2nd int |  3rd int |          | i-th int |</span></span><br><span class="line"><span class="comment">    +----------+----------+----------+----   ---+----------+----------</span></span><br><span class="line"><span class="comment">                                                       ↑</span></span><br><span class="line"><span class="comment">                                                    j-th bit</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> i=n/<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n&amp;<span class="number">31</span>; <span class="comment">// Equivalent to j=n%32;</span></span><br><span class="line">    buf[i]|=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       To change the j-th bit from 0 to 1,</span></span><br><span class="line"><span class="comment">       we need to construct a number whose j-th bit is 1 and the rest bits are 0 (1&lt;&lt;j),</span></span><br><span class="line"><span class="comment">       then OR the original number with the constructed number.</span></span><br><span class="line"><span class="comment">       e.g      1100 0000</span></span><br><span class="line"><span class="comment">                0000 0010</span></span><br><span class="line"><span class="comment">            OR  1100 0010</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">bool</span> bitmap&lt;T&gt;::is_visited(T n)&#123;</span><br><span class="line">    <span class="keyword">int</span> i=n/<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n&amp;<span class="number">31</span>;</span><br><span class="line">    <span class="keyword">return</span> ((buf[i]&amp;(<span class="number">1</span>&lt;&lt;j))!=<span class="number">0</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       To check the j-th bit,</span></span><br><span class="line"><span class="comment">       we need to construct a number whose j-th is 1 and the rest bits are 0 (1&lt;&lt;j),</span></span><br><span class="line"><span class="comment">       then AND the original number with the constructed number.</span></span><br><span class="line"><span class="comment">       e.g      1100 0000			        1100 0000</span></span><br><span class="line"><span class="comment">                0000 0010			        0100 0000</span></span><br><span class="line"><span class="comment">           AND  0000 0000 (false)      AND  0100 0000 (true)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="GUI-部分代码"><a href="#GUI-部分代码" class="headerlink" title="GUI 部分代码"></a>GUI 部分代码</h2><p><a href="https://github.com/Stardusten/8_puzzle_QT">GitHub 项目地址</a></p>
<figure class="highlight bash"><figcaption><span>8_puzzle.pro</span></figcaption><table><tr><td class="code"><pre><span class="line">QT       += core gui</span><br><span class="line"></span><br><span class="line">greaterThan(QT_MAJOR_VERSION, 4): QT += widgets</span><br><span class="line"></span><br><span class="line">CONFIG += c++11</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can make your code fail to compile if it uses deprecated APIs.</span></span><br><span class="line"><span class="comment"># In order to do so, uncomment the following line.</span></span><br><span class="line"><span class="comment">#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0</span></span><br><span class="line"></span><br><span class="line">SOURCES += \</span><br><span class="line">    A_star.cpp \</span><br><span class="line">    BFS.cpp \</span><br><span class="line">    DFS.cpp \</span><br><span class="line">    IDA_star.cpp \</span><br><span class="line">    IDDFS.cpp \</span><br><span class="line">    a_star_graph.cpp \</span><br><span class="line">    advanced_analyse_tool.cpp \</span><br><span class="line">    base.cpp \</span><br><span class="line">    bfs_graph.cpp \</span><br><span class="line">    bitmap.cpp \</span><br><span class="line">    dfs_graph.cpp \</span><br><span class="line">    game.cpp \</span><br><span class="line">    graph_select.cpp \</span><br><span class="line">    heu_func_select.cpp \</span><br><span class="line">    ida_star_graph.cpp \</span><br><span class="line">    iddfs_graph.cpp \</span><br><span class="line">    main.cpp \</span><br><span class="line">    eight_puzzle.cpp</span><br><span class="line"></span><br><span class="line">HEADERS += \</span><br><span class="line">    A_star.h \</span><br><span class="line">    BFS.h \</span><br><span class="line">    DFS.h \</span><br><span class="line">    IDA_star.h \</span><br><span class="line">    IDDFS.h \</span><br><span class="line">    a_star_graph.h \</span><br><span class="line">    advanced_analyse_tool.h \</span><br><span class="line">    base.h \</span><br><span class="line">    bfs_graph.h \</span><br><span class="line">    bitmap.h \</span><br><span class="line">    dfs_graph.h \</span><br><span class="line">    eight_puzzle.h \</span><br><span class="line">    game.h \</span><br><span class="line">    graph_select.h \</span><br><span class="line">    heu_func_select.h \</span><br><span class="line">    ida_star_graph.h \</span><br><span class="line">    iddfs_graph.h</span><br><span class="line"></span><br><span class="line">FORMS += \</span><br><span class="line">    eight_puzzle.ui</span><br><span class="line"></span><br><span class="line">TRANSLATIONS += \</span><br><span class="line">    8_puzzle_zh_CN.ts</span><br><span class="line"></span><br><span class="line"><span class="comment"># Default rules for deployment.</span></span><br><span class="line">qnx: target.path = /tmp/$<span class="variable">$&#123;TARGET&#125;</span>/bin</span><br><span class="line"><span class="keyword">else</span>: unix:!android: target.path = /opt/$<span class="variable">$&#123;TARGET&#125;</span>/bin</span><br><span class="line">!isEmpty(target.path): INSTALLS += target</span><br><span class="line"></span><br><span class="line">DISTFILES += \</span><br><span class="line">    ../../8_puzzle/PressButton/0.png \</span><br><span class="line">    ../../8_puzzle/PressButton/1.png \</span><br><span class="line">    ../../8_puzzle/PressButton/2.png \</span><br><span class="line">    ../../8_puzzle/PressButton/3.png \</span><br><span class="line">    ../../8_puzzle/PressButton/4.png \</span><br><span class="line">    ../../8_puzzle/PressButton/5.png \</span><br><span class="line">    ../../8_puzzle/PressButton/6.png \</span><br><span class="line">    ../../8_puzzle/PressButton/7.png \</span><br><span class="line">    ../../8_puzzle/PressButton/8.png</span><br><span class="line"></span><br><span class="line">ICON = Icon.icns</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>main.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;eight_puzzle.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;a_star_graph.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QPixmap <span class="title">pixmap</span><span class="params">(<span class="string">&quot;/Users/stardust/8_puzzle/Launch.png&quot;</span>)</span></span>;</span><br><span class="line">    pixmap = pixmap.scaled(<span class="number">700</span>, <span class="number">700</span>, Qt::KeepAspectRatio, Qt::SmoothTransformation);</span><br><span class="line"></span><br><span class="line">    <span class="function">QSplashScreen <span class="title">splash</span><span class="params">(pixmap)</span></span>;</span><br><span class="line">    splash.show();</span><br><span class="line"></span><br><span class="line">    eight_puzzle w;</span><br><span class="line">    w.show();</span><br><span class="line">    <span class="comment">//splash.finish(&amp;w);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>BFS.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BFS_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BFS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QString&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QEventLoop&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QTimer&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;bitmap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">9</span>][<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BFS</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 数据成员</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> s[<span class="number">9</span>];</span><br><span class="line">        <span class="keyword">int</span> pos;</span><br><span class="line">        <span class="keyword">int</span> fa;</span><br><span class="line">        <span class="keyword">int</span> steps;</span><br><span class="line">    &#125;ini,goal;</span><br><span class="line">    <span class="keyword">int</span> nodes=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">clock_t</span> start,end;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;state&gt; q;</span><br><span class="line">    <span class="keyword">int</span> front,rear;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工具函数</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp;, <span class="keyword">const</span> state &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print_in</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp; idx, QString &amp; str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">const</span> QString &amp;, <span class="keyword">const</span> QString &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">QString <span class="title">steps</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> q.empty()?QString(<span class="string">&quot;&quot;</span>):QString::number(q[front].steps); &#125;</span><br><span class="line">    <span class="function">QString <span class="title">time_used</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> q.empty()?QString(<span class="string">&quot;&quot;</span>):QString::number((end-start)/<span class="number">1e3</span>); &#125;</span><br><span class="line">    <span class="function">QString <span class="title">traveled_nodes</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> q.empty()?QString(<span class="string">&quot;&quot;</span>):QString::number(nodes); &#125;</span><br><span class="line">    <span class="function">QString <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>eight_puzzle.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> EIGHT_PUZZLE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EIGHT_PUZZLE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QVBoxLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QHBoxLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGridLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLineEdit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QString&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QComboBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGroupBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextBrowser&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QIntValidator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSplashScreen&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPlainTextEdit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPixmap&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="class"><span class="keyword">class</span> <span class="title">eight_puzzle</span>;</span> &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">eight_puzzle</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Advanced_analyse_tool</span>;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    eight_puzzle(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~eight_puzzle();</span><br><span class="line">    QTextBrowser *path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update_grid_ini</span><span class="params">(<span class="keyword">const</span> QString &amp;)</span></span>; <span class="comment">// 根据输入实时更新棋盘数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update_grid_goal</span><span class="params">(<span class="keyword">const</span> QString &amp;)</span></span>; <span class="comment">// 根据输入实时更新棋盘数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calc_func</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">advanced_func</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::eight_puzzle *ui;</span><br><span class="line">    QLabel *nodes;</span><br><span class="line">    QLabel *time;</span><br><span class="line">    QLabel *memory;</span><br><span class="line">    QLabel *steps;</span><br><span class="line">    QComboBox *method;</span><br><span class="line">    QLineEdit *input_line;</span><br><span class="line">    QLineEdit *output_line;</span><br><span class="line">    QLineEdit *block_ini[<span class="number">9</span>]; <span class="comment">// 初始棋盘布局</span></span><br><span class="line">    QLineEdit *block_goal[<span class="number">9</span>]; <span class="comment">// 目标棋盘布局</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// EIGHT_PUZZLE_H</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>eight_puzzle.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;eight_puzzle.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ui_eight_puzzle.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;IDA_star.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;BFS.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;IDDFS.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;A_star.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;DFS.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;advanced_analyse_tool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">eight_puzzle::eight_puzzle(QWidget *parent)</span><br><span class="line">    : QWidget(parent)</span><br><span class="line">    , ui(<span class="keyword">new</span> Ui::eight_puzzle)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    setWindowTitle(<span class="string">&quot;8_puzzle&quot;</span>);</span><br><span class="line"></span><br><span class="line">    QVBoxLayout* mainUI = <span class="keyword">new</span> QVBoxLayout(<span class="keyword">this</span>);</span><br><span class="line">    QHBoxLayout* UP = <span class="keyword">new</span> QHBoxLayout();</span><br><span class="line"></span><br><span class="line">    QGroupBox* Ini = <span class="keyword">new</span> QGroupBox;</span><br><span class="line">    Ini-&gt;setTitle(<span class="string">&quot;Ini&quot;</span>);</span><br><span class="line"></span><br><span class="line">    QGridLayout* grid_ini = <span class="keyword">new</span> QGridLayout;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        block_ini[i]= <span class="keyword">new</span> QLineEdit;</span><br><span class="line">        block_ini[i]-&gt;setMaximumWidth(<span class="number">20</span>);</span><br><span class="line">        block_ini[i]-&gt;setReadOnly(<span class="literal">true</span>);</span><br><span class="line">        block_ini[i]-&gt;setAlignment(Qt::AlignCenter);</span><br><span class="line">        <span class="comment">// Connect to get input</span></span><br><span class="line">        grid_ini-&gt;addWidget(block_ini[i], i/<span class="number">3</span>, i%<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ini-&gt;setLayout(grid_ini);</span><br><span class="line">    UP-&gt;addWidget(Ini);</span><br><span class="line"></span><br><span class="line">    QGroupBox* Goal = <span class="keyword">new</span> QGroupBox;</span><br><span class="line">    Goal-&gt;setTitle(<span class="string">&quot;Goal&quot;</span>);</span><br><span class="line"></span><br><span class="line">    QGridLayout* grid_goal = <span class="keyword">new</span> QGridLayout;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        block_goal[i]= <span class="keyword">new</span> QLineEdit;</span><br><span class="line">        block_goal[i]-&gt;setMaximumWidth(<span class="number">20</span>);</span><br><span class="line">        block_goal[i]-&gt;setReadOnly(<span class="literal">true</span>); <span class="comment">// 设为只读</span></span><br><span class="line">        block_goal[i]-&gt;setAlignment(Qt::AlignCenter);</span><br><span class="line">        <span class="comment">// Connect to get input</span></span><br><span class="line">        grid_goal-&gt;addWidget(block_goal[i], i/<span class="number">3</span>, i%<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Goal-&gt;setLayout(grid_goal);</span><br><span class="line">    UP-&gt;addWidget(Goal);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右栏</span></span><br><span class="line">    QVBoxLayout *r_column = <span class="keyword">new</span> QVBoxLayout;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>; <span class="comment">// 纵向行数计数器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入输出</span></span><br><span class="line">    QHBoxLayout* IN=<span class="keyword">new</span> QHBoxLayout;</span><br><span class="line">    QLabel *input = <span class="keyword">new</span> QLabel(<span class="string">&quot;Ini: &quot;</span>);</span><br><span class="line">    input_line = <span class="keyword">new</span> QLineEdit;</span><br><span class="line">    input_line-&gt;setMaxLength(<span class="number">9</span>); <span class="comment">// 最多输入 9 个数</span></span><br><span class="line">    input_line-&gt;setValidator(<span class="keyword">new</span> QIntValidator());</span><br><span class="line">    input_line-&gt;setText(<span class="string">&quot;123456780&quot;</span>);</span><br><span class="line">    update_grid_ini(input_line-&gt;text());</span><br><span class="line">    connect(input_line, &amp;QLineEdit::textChanged, <span class="keyword">this</span>, &amp;eight_puzzle::update_grid_ini);</span><br><span class="line">    IN-&gt;addWidget(input);</span><br><span class="line">    IN-&gt;addWidget(input_line);</span><br><span class="line"></span><br><span class="line">    QHBoxLayout* OUT=<span class="keyword">new</span> QHBoxLayout;</span><br><span class="line">    QLabel *output = <span class="keyword">new</span> QLabel(<span class="string">&quot;Goal: &quot;</span>);</span><br><span class="line">    output_line = <span class="keyword">new</span> QLineEdit;</span><br><span class="line">    output_line-&gt;setMaxLength(<span class="number">9</span>); <span class="comment">// 最多输入 9 个数</span></span><br><span class="line">    output_line-&gt;setValidator(<span class="keyword">new</span> QIntValidator());</span><br><span class="line">    output_line-&gt;setText(<span class="string">&quot;103426758&quot;</span>);</span><br><span class="line">    update_grid_goal(output_line-&gt;text());</span><br><span class="line">    connect(output_line, &amp;QLineEdit::textChanged, <span class="keyword">this</span>, &amp;eight_puzzle::update_grid_goal);</span><br><span class="line">    OUT-&gt;addWidget(output,<span class="number">0</span>);</span><br><span class="line">    OUT-&gt;addWidget(output_line,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    r_column-&gt;addLayout(IN,cnt++);</span><br><span class="line">    r_column-&gt;addLayout(OUT,cnt++);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择计算方法</span></span><br><span class="line">    QHBoxLayout* METHOD = <span class="keyword">new</span> QHBoxLayout;</span><br><span class="line">    QLabel *method_label = <span class="keyword">new</span> QLabel(<span class="string">&quot;Method: &quot;</span>);</span><br><span class="line">    METHOD-&gt;addWidget(method_label,<span class="number">0</span>);</span><br><span class="line">    method = <span class="keyword">new</span> QComboBox;</span><br><span class="line">    method-&gt;addItem(<span class="string">&quot;BFS&quot;</span>);</span><br><span class="line">    method-&gt;addItem(<span class="string">&quot;A*&quot;</span>);</span><br><span class="line">    method-&gt;addItem(<span class="string">&quot;DFS&quot;</span>);</span><br><span class="line">    method-&gt;addItem(<span class="string">&quot;IDDFS&quot;</span>);</span><br><span class="line">    method-&gt;addItem(<span class="string">&quot;IDA*&quot;</span>);</span><br><span class="line">    METHOD-&gt;addWidget(method,<span class="number">1</span>);</span><br><span class="line">    r_column-&gt;addLayout(METHOD, cnt++);</span><br><span class="line"></span><br><span class="line">    QHBoxLayout *buttoms = <span class="keyword">new</span> QHBoxLayout;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  计算</span></span><br><span class="line">    QPushButton *calc = <span class="keyword">new</span> QPushButton(<span class="string">&quot;Calculate&quot;</span>);</span><br><span class="line">    connect(calc, SIGNAL(clicked()), <span class="keyword">this</span>, SLOT(calc_func()));</span><br><span class="line">    buttoms-&gt;addWidget(calc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 高级功能</span></span><br><span class="line">    QPushButton *advanced  = <span class="keyword">new</span> QPushButton(<span class="string">&quot;Advanced&quot;</span>);</span><br><span class="line">    connect(advanced, SIGNAL(clicked()), <span class="keyword">this</span>, SLOT(advanced_func()));</span><br><span class="line">    buttoms-&gt;addWidget(advanced);</span><br><span class="line"></span><br><span class="line">    r_column-&gt;addLayout(buttoms);</span><br><span class="line">    UP-&gt;addLayout(r_column);</span><br><span class="line"></span><br><span class="line">    mainUI-&gt;addLayout(UP);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结果部分</span></span><br><span class="line"></span><br><span class="line">    QVBoxLayout *DOWN = <span class="keyword">new</span> QVBoxLayout;</span><br><span class="line"></span><br><span class="line">    QLabel *down_label = <span class="keyword">new</span> QLabel(<span class="string">&quot;Statistics: &quot;</span>);</span><br><span class="line">    DOWN-&gt;addWidget(down_label,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    QHBoxLayout *Statistics = <span class="keyword">new</span> QHBoxLayout;</span><br><span class="line"></span><br><span class="line">    QGridLayout *info = <span class="keyword">new</span> QGridLayout;</span><br><span class="line">    QLabel *nodes_label = <span class="keyword">new</span> QLabel(<span class="string">&quot;     Traveled nodes: &quot;</span>);</span><br><span class="line">    QLabel *time_label = <span class="keyword">new</span> QLabel(<span class="string">&quot;     Time used (ms): &quot;</span>);</span><br><span class="line">    QLabel *memory_label = <span class="keyword">new</span> QLabel(<span class="string">&quot;     Memory used (KB): &quot;</span>);</span><br><span class="line">    QLabel *steps_label = <span class="keyword">new</span> QLabel(<span class="string">&quot;     Steps: &quot;</span>);</span><br><span class="line">    nodes = <span class="keyword">new</span> QLabel;</span><br><span class="line">    time = <span class="keyword">new</span> QLabel;</span><br><span class="line">    memory = <span class="keyword">new</span> QLabel;</span><br><span class="line">    steps = <span class="keyword">new</span> QLabel;</span><br><span class="line">    info-&gt;addWidget(nodes_label,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    info-&gt;addWidget(time_label,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    info-&gt;addWidget(memory_label,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    info-&gt;addWidget(steps_label,<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line">    info-&gt;addWidget(nodes,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    info-&gt;addWidget(time,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    info-&gt;addWidget(memory,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">    info-&gt;addWidget(steps,<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    QVBoxLayout *path_col = <span class="keyword">new</span> QVBoxLayout;</span><br><span class="line">    QLabel *path_label = <span class="keyword">new</span> QLabel(<span class="string">&quot;Path: &quot;</span>);</span><br><span class="line">    path = <span class="keyword">new</span> QTextBrowser;</span><br><span class="line">    path-&gt;setMaximumWidth(<span class="number">200</span>);</span><br><span class="line">    path_col-&gt;addWidget(path_label);</span><br><span class="line">    path_col-&gt;addWidget(path);</span><br><span class="line"></span><br><span class="line">    Statistics-&gt;addLayout(info,<span class="number">0</span>);</span><br><span class="line">    Statistics-&gt;addLayout(path_col,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    DOWN-&gt;addLayout(Statistics,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    mainUI-&gt;addLayout(DOWN);</span><br><span class="line"></span><br><span class="line">    resize(<span class="number">500</span>,<span class="number">150</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eight_puzzle::~eight_puzzle()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eight_puzzle::update_grid_ini</span><span class="params">(<span class="keyword">const</span> QString &amp; in)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;in.count();i++)&#123;</span><br><span class="line">        block_ini[i]-&gt;setText(in.at(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eight_puzzle::update_grid_goal</span><span class="params">(<span class="keyword">const</span> QString &amp; in)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;in.count();i++)&#123;</span><br><span class="line">        block_goal[i]-&gt;setText(in.at(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eight_puzzle::calc_func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(input_line-&gt;text().length()&lt;<span class="number">9</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(output_line-&gt;text().length()&lt;<span class="number">9</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">switch</span>(method-&gt;currentIndex())&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:&#123;</span><br><span class="line">        BFS *c0=<span class="keyword">new</span> BFS;</span><br><span class="line">        c0-&gt;<span class="built_in">set</span>(input_line-&gt;text(),output_line-&gt;text());</span><br><span class="line">        c0-&gt;calc();</span><br><span class="line">        steps-&gt;setText(c0-&gt;steps());</span><br><span class="line">        time-&gt;setText(c0-&gt;time_used());</span><br><span class="line">        nodes-&gt;setText(c0-&gt;traveled_nodes());</span><br><span class="line">        path-&gt;setText(c0-&gt;print());</span><br><span class="line">        <span class="keyword">delete</span> c0;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">        A_star *c1=<span class="keyword">new</span> A_star;</span><br><span class="line">        c1-&gt;<span class="built_in">set</span>(input_line-&gt;text(),output_line-&gt;text());</span><br><span class="line">        c1-&gt;calc();</span><br><span class="line">        steps-&gt;setText(c1-&gt;steps());</span><br><span class="line">        time-&gt;setText(c1-&gt;time_used());</span><br><span class="line">        nodes-&gt;setText(c1-&gt;traveled_nodes());</span><br><span class="line">        path-&gt;setText(c1-&gt;print());</span><br><span class="line">        <span class="keyword">delete</span> c1;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">        DFS *c2 = <span class="keyword">new</span> DFS;</span><br><span class="line">        c2-&gt;<span class="built_in">set</span>(input_line-&gt;text(),output_line-&gt;text());</span><br><span class="line">        c2-&gt;calc();</span><br><span class="line">        steps-&gt;setText(c2-&gt;steps());</span><br><span class="line">        time-&gt;setText(c2-&gt;time_used());</span><br><span class="line">        nodes-&gt;setText(c2-&gt;traveled_nodes());</span><br><span class="line">        path-&gt;setText(c2-&gt;print());</span><br><span class="line">        <span class="keyword">delete</span> c2;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">        IDDFS *c3 = <span class="keyword">new</span> IDDFS;</span><br><span class="line">        c3-&gt;<span class="built_in">set</span>(input_line-&gt;text(),output_line-&gt;text());</span><br><span class="line">        c3-&gt;calc();</span><br><span class="line">        steps-&gt;setText(c3-&gt;steps());</span><br><span class="line">        time-&gt;setText(c3-&gt;time_used());</span><br><span class="line">        nodes-&gt;setText(c3-&gt;traveled_nodes());</span><br><span class="line">        path-&gt;setText(c3-&gt;print());</span><br><span class="line">        <span class="keyword">delete</span> c3;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">        IDA_star *c4 = <span class="keyword">new</span> IDA_star;</span><br><span class="line">        c4-&gt;<span class="built_in">set</span>(input_line-&gt;text(),output_line-&gt;text());</span><br><span class="line">        c4-&gt;calc();</span><br><span class="line">        steps-&gt;setText(c4-&gt;steps());</span><br><span class="line">        time-&gt;setText(c4-&gt;time_used());</span><br><span class="line">        nodes-&gt;setText(c4-&gt;traveled_nodes());</span><br><span class="line">        path-&gt;setText(c4-&gt;print());</span><br><span class="line">        <span class="keyword">delete</span> c4;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eight_puzzle::advanced_func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Advanced_analyse_tool *ad = <span class="keyword">new</span> Advanced_analyse_tool;</span><br><span class="line">    ad-&gt;<span class="built_in">set</span>(input_line-&gt;text(), output_line-&gt;text(), method-&gt;currentIndex());</span><br><span class="line">    ad-&gt;show();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>graph_select.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Graph_select_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Graph_select_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bitmap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">9</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> manhattan[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph_select</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘图部分</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Graph_select</span><span class="params">(QWidget* parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~Graph_select();</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent *)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sig_update</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主算法部分</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">const</span> QString &amp;, <span class="keyword">const</span> QString &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">time</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> end-start;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">traveled_nodes</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> nodes;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">need_steps</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> steps;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 数据成员</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> s[<span class="number">9</span>]; <span class="comment">// 0 represents Space</span></span><br><span class="line">        <span class="keyword">int</span> pos; <span class="comment">// Position of space</span></span><br><span class="line">        <span class="keyword">int</span> steps; <span class="comment">// Steps to reach current state</span></span><br><span class="line">        <span class="keyword">int</span> h; <span class="comment">// Heuristic function</span></span><br><span class="line">        <span class="keyword">int</span> f;</span><br><span class="line">        <span class="keyword">double</span> px,py;</span><br><span class="line">        <span class="keyword">double</span> fpx,fpy;</span><br><span class="line">    &#125;ini,goal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> nodes;</span><br><span class="line">    <span class="keyword">int</span> steps;</span><br><span class="line">    <span class="keyword">clock_t</span> start,end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> A,B;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">priority_queue</span>&lt;state&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> h=<span class="number">20</span>; <span class="comment">// 每层高</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> w[<span class="number">32</span>]=&#123; <span class="comment">// 第 i 层两节点间宽度的一半</span></span><br><span class="line">        <span class="number">300</span>,</span><br><span class="line">        <span class="number">75</span>,</span><br><span class="line">        <span class="number">18.75</span>,</span><br><span class="line">        <span class="number">4.6875</span>,</span><br><span class="line">        <span class="number">1.17188</span>,</span><br><span class="line">        <span class="number">0.292969</span>,</span><br><span class="line">        <span class="number">0.0732422</span>,</span><br><span class="line">        <span class="number">0.0183105</span>,</span><br><span class="line">        <span class="number">0.00457764</span>,</span><br><span class="line">        <span class="number">0.00114441</span>,</span><br><span class="line">        <span class="number">0.000286102</span>,</span><br><span class="line">        <span class="number">7.15256e-05</span>,</span><br><span class="line">        <span class="number">1.78814e-05</span>,</span><br><span class="line">        <span class="number">4.47035e-06</span>,</span><br><span class="line">        <span class="number">1.11759e-06</span>,</span><br><span class="line">        <span class="number">2.79397e-07</span>,</span><br><span class="line">        <span class="number">6.98492e-08</span>,</span><br><span class="line">        <span class="number">1.74623e-08</span>,</span><br><span class="line">        <span class="number">4.36557e-09</span>,</span><br><span class="line">        <span class="number">1.09139e-09</span>,</span><br><span class="line">        <span class="number">2.72848e-10</span>,</span><br><span class="line">        <span class="number">6.82121e-11</span>,</span><br><span class="line">        <span class="number">1.7053e-11</span>,</span><br><span class="line">        <span class="number">4.26326e-12</span>,</span><br><span class="line">        <span class="number">1.06581e-12</span>,</span><br><span class="line">        <span class="number">2.66454e-13</span>,</span><br><span class="line">        <span class="number">6.66134e-14</span>,</span><br><span class="line">        <span class="number">1.66533e-14</span>,</span><br><span class="line">        <span class="number">4.16334e-15</span>,</span><br><span class="line">        <span class="number">1.04083e-15</span>,</span><br><span class="line">        <span class="number">2.60209e-16</span>,</span><br><span class="line">        <span class="number">6.50521e-17</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工具函数</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Graph_select::state &amp;, <span class="keyword">const</span> Graph_select::state &amp;);</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc_manhattan</span><span class="params">(<span class="keyword">const</span> state &amp;,<span class="keyword">const</span> state &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp;, <span class="keyword">const</span> state &amp;)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// Graph_select_H</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>graph_select.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;graph_select.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">Graph_select::Graph_select(QWidget* parent)</span><br><span class="line">    : QWidget(parent)&#123;</span><br><span class="line">    setWindowTitle(<span class="string">&quot;Advanced Analyse Tools&quot;</span>);</span><br><span class="line">    resize(<span class="number">650</span>,<span class="number">700</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Graph_select::~Graph_select()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Graph_select::state &amp; x, <span class="keyword">const</span> Graph_select::state &amp; y)&#123;</span><br><span class="line">    <span class="keyword">return</span> x.f&gt;y.f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Graph_select::set</span><span class="params">(<span class="keyword">const</span> QString &amp; input1, <span class="keyword">const</span> QString &amp; input2, <span class="keyword">const</span> <span class="keyword">int</span> &amp; _A, <span class="keyword">const</span> <span class="keyword">int</span> &amp; _B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        ini.s[i]=<span class="keyword">int</span>(input1[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        goal.s[i]=<span class="keyword">int</span>(input2[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!ini.s[i]) ini.pos=i;</span><br><span class="line">        <span class="keyword">if</span>(!goal.s[i]) goal.pos=i;</span><br><span class="line">    &#125;</span><br><span class="line">    A=_A;</span><br><span class="line">    B=_B;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Graph_select::calc_manhattan</span><span class="params">(<span class="keyword">const</span> state &amp; cur,<span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dis=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cur.s[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.s[i]==goal.s[j])&#123;</span><br><span class="line">                dis+=manhattan[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Graph_select::is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp; ini, <span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>; <span class="comment">// Inverse number</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ini.s[i]&gt;ini.s[j] &amp;&amp; ini.s[j]!=<span class="number">0</span>) n1++;</span><br><span class="line">            <span class="keyword">if</span>(goal.s[i]&gt;goal.s[j] &amp;&amp; goal.s[j]!=<span class="number">0</span>) n2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n1&amp;<span class="number">1</span>)!=(n2&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Same parity =&gt; Solvable</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// Different parity =&gt; Insolvable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Graph_select::paintEvent</span><span class="params">(QPaintEvent *)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    qDebug()&lt;&lt;A&lt;&lt;B&lt;&lt;Qt::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定绘图设备</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抗锯齿</span></span><br><span class="line">    painter.setRenderHint(QPainter::Antialiasing);</span><br><span class="line">    painter.setRenderHint(QPainter::TextAntialiasing);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置画笔</span></span><br><span class="line">    QPen penLine;</span><br><span class="line">    penLine.setWidth(<span class="number">1</span>); <span class="comment">//线宽</span></span><br><span class="line">    penLine.setColor(Qt::black); <span class="comment">//划线颜色</span></span><br><span class="line">    penLine.setStyle(Qt::SolidLine); <span class="comment">//线的类型，实线、虚线等</span></span><br><span class="line">    penLine.setCapStyle(Qt::FlatCap); <span class="comment">//线端点样式</span></span><br><span class="line">    penLine.setJoinStyle(Qt::BevelJoin); <span class="comment">//线的连接点样式</span></span><br><span class="line">    painter.setBrush(Qt::red); <span class="comment">// 填充颜色</span></span><br><span class="line">    painter.setPen(penLine);</span><br><span class="line"></span><br><span class="line">    <span class="function">QFont <span class="title">font</span><span class="params">(<span class="string">&quot;Fira Code&quot;</span>, <span class="number">13</span>, QFont::Normal, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    painter.setFont(font);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置画布</span></span><br><span class="line">    painter.translate(<span class="number">300</span>,<span class="number">30</span>); <span class="comment">// 坐标原点初始化为 画布上边缘中点</span></span><br><span class="line"></span><br><span class="line">    start=clock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_solvable(ini,goal))&#123;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">        <span class="function">bitmap <span class="title">vis</span><span class="params">(<span class="number">362880</span>)</span></span>;</span><br><span class="line">        ini.steps=<span class="number">0</span>;</span><br><span class="line">        ini.h=calc_manhattan(ini,goal);</span><br><span class="line">        ini.f=A*ini.steps+B*ini.h;</span><br><span class="line">        ini.px=ini.py=ini.fpx=ini.fpy=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        painter.drawEllipse(ini.px<span class="number">-4</span>,ini.py<span class="number">-4</span>,<span class="number">8</span>,<span class="number">8</span>);</span><br><span class="line">        painter.drawText(ini.px<span class="number">-10</span>,ini.py<span class="number">-10</span>,<span class="string">&quot;Ini&quot;</span>);</span><br><span class="line"></span><br><span class="line">        q.push(ini);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            state cur=q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            painter.drawLine(cur.px,cur.py,cur.fpx,cur.fpy); <span class="comment">// 画线</span></span><br><span class="line">            <span class="keyword">if</span>(!cur.h)&#123;</span><br><span class="line">                steps=cur.steps;</span><br><span class="line">                painter.drawEllipse(cur.px<span class="number">-4</span>,cur.py<span class="number">-4</span>,<span class="number">8</span>,<span class="number">8</span>);</span><br><span class="line">                painter.drawText(cur.px<span class="number">-15</span>,cur.py+<span class="number">18</span>,<span class="string">&quot;Goal&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nodes++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123; <span class="comment">// try 4 direction</span></span><br><span class="line">                <span class="keyword">if</span>(~d[cur.pos][i])&#123; <span class="comment">// If current move is accepted</span></span><br><span class="line">                    <span class="comment">// Construct the new state after move</span></span><br><span class="line">                    state next;</span><br><span class="line">                    <span class="built_in">memcpy</span>(next.s, cur.s, <span class="keyword">sizeof</span>(cur.s));</span><br><span class="line">                    next.pos=d[cur.pos][i];</span><br><span class="line">                    <span class="built_in">std</span>::swap(next.s[cur.pos],next.s[next.pos]);</span><br><span class="line">                    next.steps=cur.steps+<span class="number">1</span>;</span><br><span class="line">                    next.h=calc_manhattan(next,goal);</span><br><span class="line">                    next.f=A*next.steps+B*next.h;</span><br><span class="line">                    <span class="comment">// 设置 next 坐标</span></span><br><span class="line">                    next.px=cur.px-(<span class="number">3.0</span>-i*<span class="number">2</span>)*w[next.steps];</span><br><span class="line">                    next.py=cur.py+h;</span><br><span class="line">                    next.fpx=cur.px;</span><br><span class="line">                    next.fpy=cur.py;</span><br><span class="line">                    <span class="comment">//qDebug()&lt;&lt;next.px&lt;&lt;&#x27; &#x27;&lt;&lt;next.py&lt;&lt;Qt::endl;</span></span><br><span class="line">                    <span class="keyword">int</span> code=encode(next.s);</span><br><span class="line">                    <span class="keyword">if</span>(!vis.is_visited(code))&#123;</span><br><span class="line">                        vis.visit(code);</span><br><span class="line">                        q.push(next);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    end=clock();</span><br><span class="line">    <span class="function">emit <span class="title">sig_update</span><span class="params">((end-start)/<span class="number">1e3</span>, nodes, steps)</span></span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>heu_func_select.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Heu_func_select_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Heu_func_select_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLineEdit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QHBoxLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QVBoxLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGroupBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bitmap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">9</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> manhattan[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Heu_func_select</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘图部分</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Heu_func_select</span><span class="params">(QWidget* parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~Heu_func_select();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update_A</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update_B</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">graph</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> A,B;</span><br><span class="line">    QLineEdit *IN_line;</span><br><span class="line">    QLineEdit *OUT_line;</span><br><span class="line">    QString ini_line;</span><br><span class="line">    QString goal_line;</span><br><span class="line">    QLabel *nodes_show;</span><br><span class="line">    QLabel *time_show;</span><br><span class="line">    QLabel *steps_show;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">const</span> QString &amp;, <span class="keyword">const</span> QString &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// Heu_func_select_H</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>heu_func_select.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;heu_func_select.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;graph_select.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">Heu_func_select::Heu_func_select(QWidget* parent)</span><br><span class="line">    : QWidget(parent)&#123;</span><br><span class="line">    setWindowTitle(<span class="string">&quot;Heu_func Comparison&quot;</span>);</span><br><span class="line"></span><br><span class="line">    QHBoxLayout *mainUI = <span class="keyword">new</span> QHBoxLayout(<span class="keyword">this</span>);</span><br><span class="line">    QVBoxLayout *L = <span class="keyword">new</span> QVBoxLayout;</span><br><span class="line"></span><br><span class="line">    QLabel *Introduction = <span class="keyword">new</span> QLabel(<span class="string">&quot;f(x)=A*g(x)+B*h(x)&quot;</span>);</span><br><span class="line">    QLabel *IN_label = <span class="keyword">new</span> QLabel(<span class="string">&quot;Input A: &quot;</span>);</span><br><span class="line">    QLabel *OUT_label = <span class="keyword">new</span> QLabel(<span class="string">&quot;Input B: &quot;</span>);</span><br><span class="line">    IN_line = <span class="keyword">new</span> QLineEdit;</span><br><span class="line">    OUT_line = <span class="keyword">new</span> QLineEdit;</span><br><span class="line">    connect(IN_line, &amp;QLineEdit::textChanged, <span class="keyword">this</span>, &amp;Heu_func_select::update_A);</span><br><span class="line">    connect(OUT_line, &amp;QLineEdit::textChanged, <span class="keyword">this</span>, &amp;Heu_func_select::update_B);</span><br><span class="line">    QHBoxLayout *IN = <span class="keyword">new</span> QHBoxLayout;</span><br><span class="line">    IN-&gt;addWidget(IN_label);</span><br><span class="line">    IN-&gt;addWidget(IN_line);</span><br><span class="line">    QHBoxLayout *OUT = <span class="keyword">new</span> QHBoxLayout;</span><br><span class="line">    OUT-&gt;addWidget(OUT_label);</span><br><span class="line">    OUT-&gt;addWidget(OUT_line);</span><br><span class="line">    QPushButton *Bt = <span class="keyword">new</span> QPushButton(<span class="string">&quot;Analyse&quot;</span>);</span><br><span class="line">    connect(Bt, SIGNAL(clicked()), <span class="keyword">this</span>, SLOT(graph()));</span><br><span class="line"></span><br><span class="line">    L-&gt;addWidget(Introduction);</span><br><span class="line">    L-&gt;addLayout(IN);</span><br><span class="line">    L-&gt;addLayout(OUT);</span><br><span class="line">    L-&gt;addWidget(Bt);</span><br><span class="line"></span><br><span class="line">    QGroupBox *info = <span class="keyword">new</span> QGroupBox;</span><br><span class="line">    info-&gt;setTitle(<span class="string">&quot;Statistics&quot;</span>);</span><br><span class="line">    QGridLayout *info_grid = <span class="keyword">new</span> QGridLayout;</span><br><span class="line">    QLabel *nodes = <span class="keyword">new</span> QLabel(<span class="string">&quot;Travelled nodes: &quot;</span>);</span><br><span class="line">    QLabel *time = <span class="keyword">new</span> QLabel(<span class="string">&quot;Time used (ms): &quot;</span>);</span><br><span class="line">    QLabel *steps = <span class="keyword">new</span> QLabel(<span class="string">&quot;Steps: &quot;</span>);</span><br><span class="line">    nodes_show = <span class="keyword">new</span> QLabel;</span><br><span class="line">    nodes_show-&gt;setMinimumWidth(<span class="number">50</span>);</span><br><span class="line">    time_show = <span class="keyword">new</span> QLabel;</span><br><span class="line">    time_show-&gt;setMinimumWidth(<span class="number">50</span>);</span><br><span class="line">    steps_show = <span class="keyword">new</span> QLabel;</span><br><span class="line">    steps_show-&gt;setMinimumWidth(<span class="number">50</span>);</span><br><span class="line">    info_grid-&gt;addWidget(nodes,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    info_grid-&gt;addWidget(nodes_show,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    info_grid-&gt;addWidget(time,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    info_grid-&gt;addWidget(time_show,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    info_grid-&gt;addWidget(steps,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    info_grid-&gt;addWidget(steps_show,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">    info-&gt;setLayout(info_grid);</span><br><span class="line"></span><br><span class="line">    mainUI-&gt;addLayout(L);</span><br><span class="line">    mainUI-&gt;addWidget(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Heu_func_select::update_A</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A=IN_line-&gt;text().toInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Heu_func_select::update_B</span><span class="params">()</span></span>&#123;</span><br><span class="line">    B=OUT_line-&gt;text().toInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Heu_func_select::~Heu_func_select()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Heu_func_select::set</span><span class="params">(<span class="keyword">const</span> QString &amp; input1, <span class="keyword">const</span> QString &amp; input2, <span class="keyword">const</span> <span class="keyword">int</span> &amp; _A, <span class="keyword">const</span> <span class="keyword">int</span> &amp; _B)</span></span>&#123;</span><br><span class="line">    ini_line=input1;</span><br><span class="line">    goal_line=input2;</span><br><span class="line">    A=_A;</span><br><span class="line">    B=_B;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Heu_func_select::graph</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Graph_select *g = <span class="keyword">new</span> Graph_select;</span><br><span class="line">    connect(g, SIGNAL(sig_update(<span class="keyword">const</span> <span class="keyword">double</span> &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;, <span class="keyword">const</span> <span class="keyword">int</span>&amp;)), <span class="keyword">this</span>, SLOT(update(<span class="keyword">const</span> <span class="keyword">double</span> &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;)));</span><br><span class="line">    g-&gt;<span class="built_in">set</span>(ini_line, goal_line, A, B);</span><br><span class="line">    g-&gt;show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Heu_func_select::update</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> &amp; t, <span class="keyword">const</span> <span class="keyword">int</span> &amp; n, <span class="keyword">const</span> <span class="keyword">int</span> &amp; s)</span></span>&#123;</span><br><span class="line">    time_show-&gt;setText(QString::number(t));</span><br><span class="line">    nodes_show-&gt;setText(QString::number(n));</span><br><span class="line">    steps_show-&gt;setText(QString::number(s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>BFS.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;BFS.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS::set</span><span class="params">(<span class="keyword">const</span> QString &amp; input1, <span class="keyword">const</span> QString &amp; input2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        ini.s[i]=<span class="keyword">int</span>(input1[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        goal.s[i]=<span class="keyword">int</span>(input2[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!ini.s[i]) ini.pos=i;</span><br><span class="line">        <span class="keyword">if</span>(!goal.s[i]) goal.pos=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS::is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp; ini, <span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ini.s[i]&gt;ini.s[j] &amp;&amp; ini.s[j]!=<span class="number">0</span>) n1++;</span><br><span class="line">            <span class="keyword">if</span>(goal.s[i]&gt;goal.s[j] &amp;&amp; goal.s[j]!=<span class="number">0</span>) n2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n1&amp;<span class="number">1</span>)!=(n2&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS::print_in</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp; idx, QString &amp; ans)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(~idx)&#123;</span><br><span class="line">        print_in(q[idx].fa, ans);</span><br><span class="line">        QString tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">            tmp.<span class="built_in">sprintf</span>(<span class="string">&quot;%d &quot;</span>,q[idx].s[i]);</span><br><span class="line">            ans+=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QString <span class="title">BFS::print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    QString ans;</span><br><span class="line">    <span class="keyword">if</span>(q.empty())&#123;</span><br><span class="line">        ans.append(<span class="string">&quot;No Solution.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    print_in(front, ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS::bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">bitmap <span class="title">vis</span><span class="params">(<span class="number">362880</span>)</span></span>;</span><br><span class="line">    ini.fa=<span class="number">-1</span>; <span class="comment">// Recursive termination condition</span></span><br><span class="line">    ini.steps=<span class="number">0</span>;</span><br><span class="line">    q.push_back(ini); <span class="comment">// Push ini state into the Open list</span></span><br><span class="line">    front=<span class="number">0</span>, rear=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(front&lt;rear)&#123; <span class="comment">// Loop until queue is empty</span></span><br><span class="line">        state cur=q[front];</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">memcmp</span>(cur.s,goal.s,<span class="keyword">sizeof</span>(goal.s)))&#123; <span class="comment">// Find!</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nodes++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123; <span class="comment">// try 4 direction</span></span><br><span class="line">            <span class="keyword">if</span>(~d[cur.pos][i])&#123; <span class="comment">// If current move is accepted</span></span><br><span class="line">                <span class="comment">// Construct the new state after move</span></span><br><span class="line">                state next;</span><br><span class="line">                <span class="built_in">memcpy</span>(next.s,cur.s,<span class="keyword">sizeof</span>(cur.s));</span><br><span class="line">                next.pos=d[cur.pos][i];</span><br><span class="line">                <span class="built_in">std</span>::swap(next.s[cur.pos],next.s[next.pos]);</span><br><span class="line">                next.fa=front;</span><br><span class="line">                next.steps=cur.steps+<span class="number">1</span>;</span><br><span class="line">                <span class="comment">// Encode new state</span></span><br><span class="line">                <span class="keyword">int</span> code=encode(next.s);</span><br><span class="line">                <span class="keyword">if</span>(!vis.is_visited(code))&#123; <span class="comment">// If the new state is unvisited</span></span><br><span class="line">                    vis.visit(code); <span class="comment">// Mark it as visited</span></span><br><span class="line">                    q.push_back(next); <span class="comment">// Add it to the Open list</span></span><br><span class="line">                    rear++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        front++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS::calc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    start=clock();</span><br><span class="line">    <span class="keyword">if</span>(is_solvable(ini,goal)) bfs();</span><br><span class="line">    end=clock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>DFS.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/*#ifndef DFS_H</span></span><br><span class="line"><span class="comment">#define DFS_H</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#include&lt;stack&gt;</span></span><br><span class="line"><span class="comment">#include&lt;ctime&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string&gt;</span></span><br><span class="line"><span class="comment">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">#include&lt;QString&gt;</span></span><br><span class="line"><span class="comment">#include&lt;QDebug&gt;</span></span><br><span class="line"><span class="comment">#include&quot;algo_base.h&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class DFS&#123;</span></span><br><span class="line"><span class="comment">private:</span></span><br><span class="line"><span class="comment">    // 数据成员</span></span><br><span class="line"><span class="comment">    struct state&#123;</span></span><br><span class="line"><span class="comment">        int s[9]; // 0 represents Space</span></span><br><span class="line"><span class="comment">        int pos; // Position of space</span></span><br><span class="line"><span class="comment">    &#125;ini,goal;</span></span><br><span class="line"><span class="comment">    int nodes=0,need_steps;</span></span><br><span class="line"><span class="comment">    std::stack&lt;state&gt; path;</span></span><br><span class="line"><span class="comment">    clock_t start,end;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    // 工具函数</span></span><br><span class="line"><span class="comment">    bool is_solvable(const state &amp;, const state &amp;);</span></span><br><span class="line"><span class="comment">    bool DFS_in(state &amp;, const int &amp;, bitmap &amp;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    void set(const QString &amp;, const QString &amp;);</span></span><br><span class="line"><span class="comment">    void calc();</span></span><br><span class="line"><span class="comment">    QString steps()&#123; return path.empty()?QString(&quot;&quot;):QString::number(need_steps); &#125;</span></span><br><span class="line"><span class="comment">    QString time_used()&#123; return path.empty()?QString(&quot;&quot;):QString::number(end-start); &#125;</span></span><br><span class="line"><span class="comment">    QString traveled_nodes()&#123; return path.empty()?QString(&quot;&quot;):QString::number(nodes); &#125;</span></span><br><span class="line"><span class="comment">    QString print();</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">bool DFS::is_solvable(const state &amp; ini, const state &amp; goal)&#123;</span></span><br><span class="line"><span class="comment">    int n1=0,n2=0;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;9;i++)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=i+1;j&lt;9;j++)&#123;</span></span><br><span class="line"><span class="comment">            if(ini.s[i]&gt;ini.s[j] &amp;&amp; ini.s[j]!=0) n1++;</span></span><br><span class="line"><span class="comment">            if(goal.s[i]&gt;goal.s[j] &amp;&amp; goal.s[j]!=0) n2++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if((n1&amp;1)!=(n2&amp;1)) return 0;</span></span><br><span class="line"><span class="comment">    return 1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">bool DFS::DFS_in(state &amp; cur, const int &amp; steps, bitmap &amp; vis)&#123;</span></span><br><span class="line"><span class="comment">    if(!memcmp(cur.s,goal.s,sizeof(goal.s)))&#123;</span></span><br><span class="line"><span class="comment">        need_steps=steps;</span></span><br><span class="line"><span class="comment">        path.push(cur);</span></span><br><span class="line"><span class="comment">        return true;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    nodes++;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;4;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(~d[cur.pos][i])&#123;</span></span><br><span class="line"><span class="comment">            state next;</span></span><br><span class="line"><span class="comment">            memcpy(next.s,cur.s,sizeof(cur.s));</span></span><br><span class="line"><span class="comment">            next.pos=d[cur.pos][i];</span></span><br><span class="line"><span class="comment">            std::swap(next.s[cur.pos],next.s[next.pos]);</span></span><br><span class="line"><span class="comment">            int code=encode(next.s);</span></span><br><span class="line"><span class="comment">            if(vis.is_visited(code)) continue;</span></span><br><span class="line"><span class="comment">            vis.visit(code);</span></span><br><span class="line"><span class="comment">            if(DFS_in(next, steps+1, vis))&#123;</span></span><br><span class="line"><span class="comment">                path.push(cur);</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            vis.undo_visit(code);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return false;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">bool DFS::DFS_in(state &amp; cur, const int &amp; steps, bitmap &amp; vis)&#123;</span></span><br><span class="line"><span class="comment">    if(!memcmp(cur.s,goal.s,sizeof(goal.s)))&#123;</span></span><br><span class="line"><span class="comment">        need_steps=steps;</span></span><br><span class="line"><span class="comment">        path.push(cur);</span></span><br><span class="line"><span class="comment">        return true;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    nodes++;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;4;i++)&#123;</span></span><br><span class="line"><span class="comment">        if(~d[cur.pos][i])&#123;</span></span><br><span class="line"><span class="comment">            state next;</span></span><br><span class="line"><span class="comment">            memcpy(next.s,cur.s,sizeof(cur.s));</span></span><br><span class="line"><span class="comment">            next.pos=d[cur.pos][i];</span></span><br><span class="line"><span class="comment">            std::swap(next.s[cur.pos],next.s[next.pos]);</span></span><br><span class="line"><span class="comment">            int code=encode(next.s);</span></span><br><span class="line"><span class="comment">            if(!vis.is_visited(code))&#123;</span></span><br><span class="line"><span class="comment">                vis.visit(code);</span></span><br><span class="line"><span class="comment">                if(DFS_in(next, steps+1, vis))&#123;</span></span><br><span class="line"><span class="comment">                    path.push(cur);</span></span><br><span class="line"><span class="comment">                    return true;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                vis.undo_visit(code);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return false;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void DFS::set(const QString &amp; input1, const QString &amp; input2)&#123;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;9;i++)&#123;</span></span><br><span class="line"><span class="comment">        ini.s[i]=int(input1[i].toLatin1()-&#x27;0&#x27;);</span></span><br><span class="line"><span class="comment">        goal.s[i]=int(input2[i].toLatin1()-&#x27;0&#x27;);</span></span><br><span class="line"><span class="comment">        if(!ini.s[i]) ini.pos=i;</span></span><br><span class="line"><span class="comment">        if(!goal.s[i]) goal.pos=i;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void DFS::calc()&#123;</span></span><br><span class="line"><span class="comment">    bitmap vis(362880);</span></span><br><span class="line"><span class="comment">    start=clock();</span></span><br><span class="line"><span class="comment">    vis.visit(encode(ini.s));</span></span><br><span class="line"><span class="comment">    if(is_solvable(ini,goal))&#123;</span></span><br><span class="line"><span class="comment">        DFS_in(ini,0,vis);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    end=clock();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">QString DFS::print()&#123;</span></span><br><span class="line"><span class="comment">    QString ans;</span></span><br><span class="line"><span class="comment">    if(path.empty())&#123;</span></span><br><span class="line"><span class="comment">        ans.append(&quot;No Solution.&quot;);</span></span><br><span class="line"><span class="comment">        return ans;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    while(!path.empty())&#123;</span></span><br><span class="line"><span class="comment">        state &amp; cur = path.top();</span></span><br><span class="line"><span class="comment">        QString tmp;</span></span><br><span class="line"><span class="comment">        for(int i=0;i&lt;9;i++)&#123;</span></span><br><span class="line"><span class="comment">            tmp.sprintf(&quot;%d &quot;,cur.s[i]);</span></span><br><span class="line"><span class="comment">            ans+=tmp;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        ans+=&#x27;\n&#x27;;</span></span><br><span class="line"><span class="comment">        path.pop();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return ans;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#endif // DFS_H</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DFS_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DFS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QString&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;bitmap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">9</span>][<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DFS</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 数据成员</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> s[<span class="number">9</span>]; <span class="comment">// 0 represents Space</span></span><br><span class="line">        <span class="keyword">int</span> pos; <span class="comment">// Position of space</span></span><br><span class="line">    &#125;ini,goal;</span><br><span class="line">    <span class="keyword">int</span> max_f=<span class="number">30</span>,nodes=<span class="number">0</span>,need_steps;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;state&gt; path;</span><br><span class="line">    <span class="keyword">clock_t</span> start,end;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工具函数</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp;, <span class="keyword">const</span> state &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">DFS_in</span><span class="params">(state &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">const</span> QString &amp;, <span class="keyword">const</span> QString &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">QString <span class="title">steps</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> path.empty()?QString(<span class="string">&quot;&quot;</span>):QString::number(need_steps); &#125;</span><br><span class="line">    <span class="function">QString <span class="title">time_used</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> path.empty()?QString(<span class="string">&quot;&quot;</span>):QString::number((end-start)/<span class="number">1e3</span>); &#125;</span><br><span class="line">    <span class="function">QString <span class="title">traveled_nodes</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> path.empty()?QString(<span class="string">&quot;&quot;</span>):QString::number(nodes); &#125;</span><br><span class="line">    <span class="function">QString <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// DFS_H</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>DFS.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;DFS.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS::is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp; ini, <span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ini.s[i]&gt;ini.s[j] &amp;&amp; ini.s[j]!=<span class="number">0</span>) n1++;</span><br><span class="line">            <span class="keyword">if</span>(goal.s[i]&gt;goal.s[j] &amp;&amp; goal.s[j]!=<span class="number">0</span>) n2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n1&amp;<span class="number">1</span>)!=(n2&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS::DFS_in</span><span class="params">(state &amp; cur, <span class="keyword">const</span> <span class="keyword">int</span> &amp; steps, <span class="keyword">const</span> <span class="keyword">int</span> &amp; prepos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">memcmp</span>(cur.s,goal.s,<span class="keyword">sizeof</span>(goal.s)))&#123;</span><br><span class="line">        need_steps=steps;</span><br><span class="line">        path.push(cur);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(steps&gt;max_f) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    nodes++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(d[cur.pos][i]==prepos) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(~d[cur.pos][i])&#123;</span><br><span class="line">            state next;</span><br><span class="line">            <span class="built_in">memcpy</span>(next.s,cur.s,<span class="keyword">sizeof</span>(cur.s));</span><br><span class="line">            next.pos=d[cur.pos][i];</span><br><span class="line">            <span class="built_in">std</span>::swap(next.s[cur.pos],next.s[next.pos]);</span><br><span class="line">            <span class="keyword">if</span>(DFS_in(next, steps+<span class="number">1</span>, cur.pos))&#123;</span><br><span class="line">                path.push(cur);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS::set</span><span class="params">(<span class="keyword">const</span> QString &amp; input1, <span class="keyword">const</span> QString &amp; input2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        ini.s[i]=<span class="keyword">int</span>(input1[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        goal.s[i]=<span class="keyword">int</span>(input2[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!ini.s[i]) ini.pos=i;</span><br><span class="line">        <span class="keyword">if</span>(!goal.s[i]) goal.pos=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS::calc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    start=clock();</span><br><span class="line">    <span class="keyword">if</span>(is_solvable(ini,goal))&#123;</span><br><span class="line">        DFS_in(ini,<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    end=clock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QString <span class="title">DFS::print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    QString ans;</span><br><span class="line">    <span class="keyword">if</span>(path.empty())&#123;</span><br><span class="line">        ans.append(<span class="string">&quot;No Solution.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!path.empty())&#123;</span><br><span class="line">        state &amp; cur = path.top();</span><br><span class="line">        QString tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">            tmp.<span class="built_in">sprintf</span>(<span class="string">&quot;%d &quot;</span>,cur.s[i]);</span><br><span class="line">            ans+=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        path.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>IDDFS.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> IDDFS_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IDDFS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QString&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">9</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IDDFS</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 数据成员</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> s[<span class="number">9</span>]; <span class="comment">// 0 represents Space</span></span><br><span class="line">        <span class="keyword">int</span> pos; <span class="comment">// Position of space</span></span><br><span class="line">    &#125;ini,goal;</span><br><span class="line">    <span class="keyword">int</span> max_f=<span class="number">1</span>,nodes=<span class="number">0</span>,need_steps;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;state&gt; path;</span><br><span class="line">    <span class="keyword">clock_t</span> start,end;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工具函数</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp;, <span class="keyword">const</span> state &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">IDDFS_in</span><span class="params">(state &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">const</span> QString &amp;, <span class="keyword">const</span> QString &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">QString <span class="title">steps</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> path.empty()?QString(<span class="string">&quot;&quot;</span>):QString::number(need_steps); &#125;</span><br><span class="line">    <span class="function">QString <span class="title">time_used</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> path.empty()?QString(<span class="string">&quot;&quot;</span>):QString::number((end-start)/<span class="number">1e3</span>); &#125;</span><br><span class="line">    <span class="function">QString <span class="title">traveled_nodes</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> path.empty()?QString(<span class="string">&quot;&quot;</span>):QString::number(nodes); &#125;</span><br><span class="line">    <span class="function">QString <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// IDDFS_H</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>IDDFS.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;IDDFS.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IDDFS::is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp; ini, <span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ini.s[i]&gt;ini.s[j] &amp;&amp; ini.s[j]!=<span class="number">0</span>) n1++;</span><br><span class="line">            <span class="keyword">if</span>(goal.s[i]&gt;goal.s[j] &amp;&amp; goal.s[j]!=<span class="number">0</span>) n2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n1&amp;<span class="number">1</span>)!=(n2&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IDDFS::IDDFS_in</span><span class="params">(state &amp; cur, <span class="keyword">const</span> <span class="keyword">int</span> &amp; steps, <span class="keyword">const</span> <span class="keyword">int</span> &amp; prepos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">memcmp</span>(cur.s,goal.s,<span class="keyword">sizeof</span>(goal.s)))&#123;</span><br><span class="line">        need_steps=steps;</span><br><span class="line">        path.push(cur);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(steps&gt;max_f) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    nodes++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(d[cur.pos][i]==prepos) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(~d[cur.pos][i])&#123;</span><br><span class="line">            state next;</span><br><span class="line">            <span class="built_in">memcpy</span>(next.s,cur.s,<span class="keyword">sizeof</span>(cur.s));</span><br><span class="line">            next.pos=d[cur.pos][i];</span><br><span class="line">            <span class="built_in">std</span>::swap(next.s[cur.pos],next.s[next.pos]);</span><br><span class="line">            <span class="keyword">if</span>(IDDFS_in(next, steps+<span class="number">1</span>, cur.pos))&#123;</span><br><span class="line">                path.push(cur);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IDDFS::set</span><span class="params">(<span class="keyword">const</span> QString &amp; input1, <span class="keyword">const</span> QString &amp; input2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        ini.s[i]=<span class="keyword">int</span>(input1[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        goal.s[i]=<span class="keyword">int</span>(input2[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!ini.s[i]) ini.pos=i;</span><br><span class="line">        <span class="keyword">if</span>(!goal.s[i]) goal.pos=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IDDFS::calc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    start=clock();</span><br><span class="line">    <span class="keyword">if</span>(is_solvable(ini,goal))&#123;</span><br><span class="line">        <span class="keyword">while</span>(!IDDFS_in(ini,<span class="number">0</span>,<span class="number">-1</span>)) max_f++;</span><br><span class="line">    &#125;</span><br><span class="line">    end=clock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QString <span class="title">IDDFS::print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    QString ans;</span><br><span class="line">    <span class="keyword">if</span>(path.empty())&#123;</span><br><span class="line">        ans.append(<span class="string">&quot;No Solution.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!path.empty())&#123;</span><br><span class="line">        state &amp; cur = path.top();</span><br><span class="line">        QString tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">            tmp.<span class="built_in">sprintf</span>(<span class="string">&quot;%d &quot;</span>,cur.s[i]);</span><br><span class="line">            ans+=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        path.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>A_star.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> A_STAR_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A_STAR_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QString&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;bitmap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">9</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> manhattan[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A_star</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 数据成员</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> s[<span class="number">9</span>]; <span class="comment">// 0 represents Space</span></span><br><span class="line">        <span class="keyword">int</span> pos; <span class="comment">// Position of space</span></span><br><span class="line">        <span class="keyword">int</span> steps; <span class="comment">// Steps to reach current state</span></span><br><span class="line">        <span class="keyword">int</span> h; <span class="comment">// Heuristic function</span></span><br><span class="line">        <span class="keyword">int</span> f;</span><br><span class="line">        <span class="keyword">int</span> fa;</span><br><span class="line">    &#125;ini,goal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">clock_t</span> start,end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> A_star_steps, nodes=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">priority_queue</span>&lt;state&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;state&gt; v;</span><br><span class="line">    <span class="keyword">int</span> v_end=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工具函数</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> A_star::state &amp;, <span class="keyword">const</span> A_star::state &amp;);</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc_manhattan</span><span class="params">(<span class="keyword">const</span> state &amp;,<span class="keyword">const</span> state &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp;, <span class="keyword">const</span> state &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">A_star_calc</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print_in</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;, QString &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">const</span> QString &amp;, <span class="keyword">const</span> QString &amp;)</span></span>;</span><br><span class="line">    <span class="function">QString <span class="title">steps</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> q.empty()?QString(<span class="string">&quot;&quot;</span>):QString::number(A_star_steps); &#125;</span><br><span class="line">    <span class="function">QString <span class="title">time_used</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> q.empty()?QString(<span class="string">&quot;&quot;</span>):QString::number((end-start)/<span class="number">1e3</span>); &#125;</span><br><span class="line">    <span class="function">QString <span class="title">traveled_nodes</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> q.empty()?QString(<span class="string">&quot;&quot;</span>):QString::number(nodes); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">QString <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// A_STAR_H</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>A_star.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;A_star.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> A_star::state &amp; x, <span class="keyword">const</span> A_star::state &amp; y)&#123;</span><br><span class="line">    <span class="keyword">return</span> x.f&gt;y.f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A_star::set</span><span class="params">(<span class="keyword">const</span> QString &amp; input1, <span class="keyword">const</span> QString &amp; input2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        ini.s[i]=<span class="keyword">int</span>(input1[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        goal.s[i]=<span class="keyword">int</span>(input2[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!ini.s[i]) ini.pos=i;</span><br><span class="line">        <span class="keyword">if</span>(!goal.s[i]) goal.pos=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">A_star::calc_manhattan</span><span class="params">(<span class="keyword">const</span> state &amp; cur,<span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dis=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cur.s[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.s[i]==goal.s[j])&#123;</span><br><span class="line">                dis+=manhattan[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">A_star::is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp; ini, <span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>; <span class="comment">// Inverse number</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ini.s[i]&gt;ini.s[j] &amp;&amp; ini.s[j]!=<span class="number">0</span>) n1++;</span><br><span class="line">            <span class="keyword">if</span>(goal.s[i]&gt;goal.s[j] &amp;&amp; goal.s[j]!=<span class="number">0</span>) n2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n1&amp;<span class="number">1</span>)!=(n2&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Same parity =&gt; Solvable</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// Different parity =&gt; Insolvable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">A_star::A_star_calc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">bitmap <span class="title">vis</span><span class="params">(<span class="number">362880</span>)</span></span>;</span><br><span class="line">    ini.steps=<span class="number">0</span>;</span><br><span class="line">    ini.h=calc_manhattan(ini,goal);</span><br><span class="line">    ini.f=ini.steps+ini.h;</span><br><span class="line">    ini.fa=<span class="number">-1</span>;</span><br><span class="line">    q.push(ini);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        state cur=q.top();</span><br><span class="line">        v.push_back(cur);</span><br><span class="line">        v_end++;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(!cur.h)&#123; <span class="comment">// Find!</span></span><br><span class="line">            A_star_steps=cur.steps;</span><br><span class="line">            <span class="comment">//print(v_end);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nodes++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123; <span class="comment">// try 4 direction</span></span><br><span class="line">            <span class="keyword">if</span>(~d[cur.pos][i])&#123; <span class="comment">// If current move is accepted</span></span><br><span class="line">                <span class="comment">// Construct the new state after move</span></span><br><span class="line">                state next;</span><br><span class="line">                <span class="built_in">memcpy</span>(next.s, cur.s, <span class="keyword">sizeof</span>(cur.s));</span><br><span class="line">                next.pos=d[cur.pos][i];</span><br><span class="line">                <span class="built_in">std</span>::swap(next.s[cur.pos],next.s[next.pos]);</span><br><span class="line">                next.steps=cur.steps+<span class="number">1</span>;</span><br><span class="line">                next.h=calc_manhattan(next,goal);</span><br><span class="line">                next.f=next.steps+next.h;</span><br><span class="line">                next.fa=v_end;</span><br><span class="line">                <span class="keyword">int</span> code=encode(next.s);</span><br><span class="line">                <span class="keyword">if</span>(!vis.is_visited(code))&#123;</span><br><span class="line">                    vis.visit(code);</span><br><span class="line">                    q.push(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A_star::calc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    start=clock();</span><br><span class="line">    <span class="keyword">if</span>(is_solvable(ini,goal)) A_star_calc();</span><br><span class="line">    end=clock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A_star::print_in</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp; idx, QString &amp; ans)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(~idx)&#123;</span><br><span class="line">        print_in(v[idx].fa, ans);</span><br><span class="line">        QString tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">            tmp.<span class="built_in">sprintf</span>(<span class="string">&quot;%d &quot;</span>,v[idx].s[i]);</span><br><span class="line">            ans+=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QString <span class="title">A_star::print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    QString ans;</span><br><span class="line">    <span class="keyword">if</span>(v.empty())&#123;</span><br><span class="line">        ans.append(<span class="string">&quot;No Solution.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    print_in(v_end, ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>IDA_star.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> IDA_STAR</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IDA_STAR</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QString&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">9</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> manhattan[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IDA_star</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 数据成员</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> s[<span class="number">9</span>]; <span class="comment">// 0 represents Space</span></span><br><span class="line">        <span class="keyword">int</span> pos; <span class="comment">// Position of space</span></span><br><span class="line">    &#125;ini,goal;</span><br><span class="line">    <span class="keyword">int</span> max_f,nodes=<span class="number">0</span>,need_steps;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;state&gt; path;</span><br><span class="line">    <span class="keyword">clock_t</span> start,end;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工具函数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc_manhattan</span><span class="params">(<span class="keyword">const</span> state &amp;,<span class="keyword">const</span> state &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp;, <span class="keyword">const</span> state &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">IDA_star_in</span><span class="params">(state &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">const</span> QString &amp;, <span class="keyword">const</span> QString &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">QString <span class="title">steps</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> path.empty()?QString(<span class="string">&quot;&quot;</span>):QString::number(need_steps); &#125;</span><br><span class="line">    <span class="function">QString <span class="title">time_used</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> path.empty()?QString(<span class="string">&quot;&quot;</span>):QString::number((end-start)/<span class="number">1e3</span>); &#125;</span><br><span class="line">    <span class="function">QString <span class="title">traveled_nodes</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> path.empty()?QString(<span class="string">&quot;&quot;</span>):QString::number(nodes); &#125;</span><br><span class="line">    <span class="function">QString <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>IDA_star.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;IDA_star.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IDA_star::calc_manhattan</span><span class="params">(<span class="keyword">const</span> state &amp; cur,<span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dis=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cur.s[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.s[i]==goal.s[j])&#123;</span><br><span class="line">                dis+=manhattan[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IDA_star::is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp; ini, <span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ini.s[i]&gt;ini.s[j] &amp;&amp; ini.s[j]!=<span class="number">0</span>) n1++;</span><br><span class="line">            <span class="keyword">if</span>(goal.s[i]&gt;goal.s[j] &amp;&amp; goal.s[j]!=<span class="number">0</span>) n2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n1&amp;<span class="number">1</span>)!=(n2&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IDA_star::IDA_star_in</span><span class="params">(state &amp; cur, <span class="keyword">const</span> <span class="keyword">int</span> &amp; steps, <span class="keyword">const</span> <span class="keyword">int</span> &amp; h, <span class="keyword">const</span> <span class="keyword">int</span> &amp; prepos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">memcmp</span>(cur.s,goal.s,<span class="keyword">sizeof</span>(goal.s)))&#123;</span><br><span class="line">        need_steps=steps;</span><br><span class="line">        path.push(cur);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(steps+h&gt;max_f) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    nodes++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(d[cur.pos][i]==prepos) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(~d[cur.pos][i])&#123;</span><br><span class="line">            state next;</span><br><span class="line">            <span class="built_in">memcpy</span>(next.s,cur.s,<span class="keyword">sizeof</span>(cur.s));</span><br><span class="line">            next.pos=d[cur.pos][i];</span><br><span class="line">            <span class="built_in">std</span>::swap(next.s[cur.pos],next.s[next.pos]);</span><br><span class="line">            <span class="keyword">if</span>(IDA_star_in(next, steps+<span class="number">1</span>, calc_manhattan(next,goal), cur.pos))&#123;</span><br><span class="line">                path.push(cur);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IDA_star::set</span><span class="params">(<span class="keyword">const</span> QString &amp; input1, <span class="keyword">const</span> QString &amp; input2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        ini.s[i]=<span class="keyword">int</span>(input1[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        goal.s[i]=<span class="keyword">int</span>(input2[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!ini.s[i]) ini.pos=i;</span><br><span class="line">        <span class="keyword">if</span>(!goal.s[i]) goal.pos=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IDA_star::calc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    max_f=calc_manhattan(ini,goal);</span><br><span class="line">    start=clock();</span><br><span class="line">    <span class="keyword">if</span>(is_solvable(ini,goal))&#123;</span><br><span class="line">        <span class="keyword">while</span>(!IDA_star_in(ini,<span class="number">0</span>,max_f,<span class="number">-1</span>)) max_f++;</span><br><span class="line">    &#125;</span><br><span class="line">    end=clock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QString <span class="title">IDA_star::print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    QString ans;</span><br><span class="line">    <span class="keyword">if</span>(path.empty())&#123;</span><br><span class="line">        ans.append(<span class="string">&quot;No Solution.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!path.empty())&#123;</span><br><span class="line">        state &amp; cur = path.top();</span><br><span class="line">        QString tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">            tmp.<span class="built_in">sprintf</span>(<span class="string">&quot;%d &quot;</span>,cur.s[i]);</span><br><span class="line">            ans+=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        path.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>advanced_analyse_tool.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ADVANCED_ANALYSE_TOOL_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADVANCED_ANALYSE_TOOL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGridLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QString&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Advanced_analyse_tool</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Advanced_analyse_tool</span><span class="params">(QWidget *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~Advanced_analyse_tool()&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">const</span> QString &amp;, <span class="keyword">const</span> QString &amp;, <span class="keyword">const</span> <span class="keyword">int</span> &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Visualize_func</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Heu_analyse_func</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QString input_line;</span><br><span class="line">    QString output_line;</span><br><span class="line">    <span class="keyword">int</span> method;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// ADVANCED_ANALYSE_TOOL_H</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>advanced_analyse_tool.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;advanced_analyse_tool.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bfs_graph.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;a_star_graph.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;dfs_graph.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;iddfs_graph.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ida_star_graph.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;heu_func_select.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Advanced_analyse_tool::Advanced_analyse_tool(QWidget *parent) : QWidget(parent)</span><br><span class="line">&#123;</span><br><span class="line">    QGridLayout *select = <span class="keyword">new</span> QGridLayout(<span class="keyword">this</span>);</span><br><span class="line">    QPushButton *Visualize = <span class="keyword">new</span> QPushButton;</span><br><span class="line">    Visualize-&gt;setText(<span class="string">&quot;Visualize&quot;</span>);</span><br><span class="line">    connect(Visualize, SIGNAL(clicked()), <span class="keyword">this</span>, SLOT(Visualize_func()));</span><br><span class="line">    QPushButton *Heu = <span class="keyword">new</span> QPushButton;</span><br><span class="line">    Heu-&gt;setText(<span class="string">&quot;Heu Analyse&quot;</span>);</span><br><span class="line">    connect(Heu, SIGNAL(clicked()), <span class="keyword">this</span>, SLOT(Heu_analyse_func()));</span><br><span class="line">    select-&gt;addWidget(Visualize,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    select-&gt;addWidget(Heu,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    setWindowTitle(<span class="string">&quot;Advanced Analyse Tools&quot;</span>);</span><br><span class="line">    resize(<span class="number">250</span>,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Advanced_analyse_tool::set</span><span class="params">(<span class="keyword">const</span> QString &amp; _input_line, <span class="keyword">const</span> QString &amp; _output_line, <span class="keyword">const</span> <span class="keyword">int</span> &amp; _method)</span></span>&#123;</span><br><span class="line">    input_line=_input_line;</span><br><span class="line">    output_line=_output_line;</span><br><span class="line">    method=_method;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Advanced_analyse_tool::Visualize_func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(input_line.length()&lt;<span class="number">9</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(output_line.length()&lt;<span class="number">9</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">switch</span>(method)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:&#123;</span><br><span class="line">        BFS_graph *g0 = <span class="keyword">new</span> BFS_graph;</span><br><span class="line">        g0-&gt;<span class="built_in">set</span>(input_line, output_line);</span><br><span class="line">        g0-&gt;show();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">        A_star_graph *g1 = <span class="keyword">new</span> A_star_graph;</span><br><span class="line">        g1-&gt;<span class="built_in">set</span>(input_line, output_line);</span><br><span class="line">        g1-&gt;show();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">        DFS_graph *g2 = <span class="keyword">new</span> DFS_graph;</span><br><span class="line">        g2-&gt;<span class="built_in">set</span>(input_line, output_line);</span><br><span class="line">        g2-&gt;show();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">        IDDFS_graph *g3 = <span class="keyword">new</span> IDDFS_graph;</span><br><span class="line">        g3-&gt;<span class="built_in">set</span>(input_line, output_line);</span><br><span class="line">        g3-&gt;show();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">        IDA_star_graph *g4 = <span class="keyword">new</span> IDA_star_graph;</span><br><span class="line">        g4-&gt;<span class="built_in">set</span>(input_line, output_line);</span><br><span class="line">        g4-&gt;show();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>-&gt;close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Advanced_analyse_tool::Heu_analyse_func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Heu_func_select *s = <span class="keyword">new</span> Heu_func_select;</span><br><span class="line">    s-&gt;<span class="built_in">set</span>(input_line, output_line, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    s-&gt;show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>bfs_graph.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BFS_GRAPH_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BFS_GRAPH_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bitmap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">9</span>][<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BFS_graph</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘图部分</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">BFS_graph</span><span class="params">(QWidget* parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~BFS_graph();</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主算法部分</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">const</span> QString &amp;, <span class="keyword">const</span> QString &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 数据成员</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> s[<span class="number">9</span>]; <span class="comment">// 0 represents Space</span></span><br><span class="line">        <span class="keyword">int</span> pos; <span class="comment">// Position of space</span></span><br><span class="line">        <span class="keyword">int</span> steps; <span class="comment">// Steps to reach current state</span></span><br><span class="line">        <span class="keyword">double</span> px,py;</span><br><span class="line">        <span class="keyword">double</span> fpx,fpy;</span><br><span class="line">    &#125;ini,goal;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;state&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> h=<span class="number">20</span>; <span class="comment">// 每层高</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> w[<span class="number">32</span>]=&#123; <span class="comment">// 第 i 层两节点间宽度的一半</span></span><br><span class="line">        <span class="number">300</span>,</span><br><span class="line">        <span class="number">75</span>,</span><br><span class="line">        <span class="number">18.75</span>,</span><br><span class="line">        <span class="number">4.6875</span>,</span><br><span class="line">        <span class="number">1.17188</span>,</span><br><span class="line">        <span class="number">0.292969</span>,</span><br><span class="line">        <span class="number">0.0732422</span>,</span><br><span class="line">        <span class="number">0.0183105</span>,</span><br><span class="line">        <span class="number">0.00457764</span>,</span><br><span class="line">        <span class="number">0.00114441</span>,</span><br><span class="line">        <span class="number">0.000286102</span>,</span><br><span class="line">        <span class="number">7.15256e-05</span>,</span><br><span class="line">        <span class="number">1.78814e-05</span>,</span><br><span class="line">        <span class="number">4.47035e-06</span>,</span><br><span class="line">        <span class="number">1.11759e-06</span>,</span><br><span class="line">        <span class="number">2.79397e-07</span>,</span><br><span class="line">        <span class="number">6.98492e-08</span>,</span><br><span class="line">        <span class="number">1.74623e-08</span>,</span><br><span class="line">        <span class="number">4.36557e-09</span>,</span><br><span class="line">        <span class="number">1.09139e-09</span>,</span><br><span class="line">        <span class="number">2.72848e-10</span>,</span><br><span class="line">        <span class="number">6.82121e-11</span>,</span><br><span class="line">        <span class="number">1.7053e-11</span>,</span><br><span class="line">        <span class="number">4.26326e-12</span>,</span><br><span class="line">        <span class="number">1.06581e-12</span>,</span><br><span class="line">        <span class="number">2.66454e-13</span>,</span><br><span class="line">        <span class="number">6.66134e-14</span>,</span><br><span class="line">        <span class="number">1.66533e-14</span>,</span><br><span class="line">        <span class="number">4.16334e-15</span>,</span><br><span class="line">        <span class="number">1.04083e-15</span>,</span><br><span class="line">        <span class="number">2.60209e-16</span>,</span><br><span class="line">        <span class="number">6.50521e-17</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工具函数</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp;, <span class="keyword">const</span> state &amp;)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// BFS_GRAPH_H</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>bfs_graph.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bfs_graph.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">BFS_graph::BFS_graph(QWidget* parent)</span><br><span class="line">    : QWidget(parent)&#123;</span><br><span class="line"></span><br><span class="line">    resize(<span class="number">650</span>,<span class="number">700</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BFS_graph::~BFS_graph()&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS_graph::set</span><span class="params">(<span class="keyword">const</span> QString &amp; input1, <span class="keyword">const</span> QString &amp; input2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        ini.s[i]=<span class="keyword">int</span>(input1[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        goal.s[i]=<span class="keyword">int</span>(input2[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!ini.s[i]) ini.pos=i;</span><br><span class="line">        <span class="keyword">if</span>(!goal.s[i]) goal.pos=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS_graph::is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp; ini, <span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ini.s[i]&gt;ini.s[j] &amp;&amp; ini.s[j]!=<span class="number">0</span>) n1++;</span><br><span class="line">            <span class="keyword">if</span>(goal.s[i]&gt;goal.s[j] &amp;&amp; goal.s[j]!=<span class="number">0</span>) n2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n1&amp;<span class="number">1</span>)!=(n2&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS_graph::paintEvent</span><span class="params">(QPaintEvent *)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定绘图设备</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抗锯齿</span></span><br><span class="line">    painter.setRenderHint(QPainter::Antialiasing);</span><br><span class="line">    painter.setRenderHint(QPainter::TextAntialiasing);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置画笔</span></span><br><span class="line">    QPen penLine;</span><br><span class="line">    penLine.setWidth(<span class="number">1</span>); <span class="comment">//线宽</span></span><br><span class="line">    penLine.setColor(Qt::black); <span class="comment">//划线颜色</span></span><br><span class="line">    penLine.setStyle(Qt::SolidLine); <span class="comment">//线的类型，实线、虚线等</span></span><br><span class="line">    penLine.setCapStyle(Qt::FlatCap); <span class="comment">//线端点样式</span></span><br><span class="line">    penLine.setJoinStyle(Qt::BevelJoin); <span class="comment">//线的连接点样式</span></span><br><span class="line">    painter.setBrush(Qt::red); <span class="comment">// 填充颜色</span></span><br><span class="line">    painter.setPen(penLine);</span><br><span class="line"></span><br><span class="line">    <span class="function">QFont <span class="title">font</span><span class="params">(<span class="string">&quot;Fira Code&quot;</span>, <span class="number">13</span>, QFont::Normal, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    painter.setFont(font);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置画布</span></span><br><span class="line">    painter.translate(<span class="number">300</span>,<span class="number">30</span>); <span class="comment">// 坐标原点初始化为 画布上边缘中点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) q.pop(); <span class="comment">// 清空队列，防止重绘时出错</span></span><br><span class="line">    <span class="function">bitmap <span class="title">vis</span><span class="params">(<span class="number">362880</span>)</span></span>;</span><br><span class="line">    ini.steps=<span class="number">0</span>;</span><br><span class="line">    ini.px=ini.py=ini.fpx=ini.fpy=<span class="number">0</span>;</span><br><span class="line">    q.push(ini);</span><br><span class="line">    painter.drawEllipse(ini.px<span class="number">-4</span>,ini.py<span class="number">-4</span>,<span class="number">8</span>,<span class="number">8</span>);</span><br><span class="line">    painter.drawText(ini.px<span class="number">-10</span>,ini.py<span class="number">-10</span>,<span class="string">&quot;Ini&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123; <span class="comment">// Loop until queue is empty</span></span><br><span class="line">        state cur=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        painter.drawLine(cur.px,cur.py,cur.fpx,cur.fpy); <span class="comment">// 画线</span></span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;cur.fpx&lt;&lt;cur.fpy&lt;&lt;cur.px&lt;&lt;cur.py&lt;&lt;Qt::endl;</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">memcmp</span>(cur.s,goal.s,<span class="keyword">sizeof</span>(goal.s)))&#123; <span class="comment">// Find!</span></span><br><span class="line">            painter.drawEllipse(cur.px<span class="number">-4</span>,cur.py<span class="number">-4</span>,<span class="number">8</span>,<span class="number">8</span>);</span><br><span class="line">            painter.drawText(cur.px<span class="number">-15</span>,cur.py+<span class="number">18</span>,<span class="string">&quot;Goal&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123; <span class="comment">// try 4 direction</span></span><br><span class="line">            <span class="keyword">if</span>(~d[cur.pos][i])&#123; <span class="comment">// If current move is accepted</span></span><br><span class="line">                <span class="comment">// Construct the new state after move</span></span><br><span class="line">                state next;</span><br><span class="line">                <span class="built_in">memcpy</span>(next.s,cur.s,<span class="keyword">sizeof</span>(cur.s));</span><br><span class="line">                next.pos=d[cur.pos][i];</span><br><span class="line">                <span class="built_in">std</span>::swap(next.s[cur.pos],next.s[next.pos]);</span><br><span class="line">                next.steps=cur.steps+<span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 设置 next 坐标</span></span><br><span class="line">                next.px=cur.px-(<span class="number">3.0</span>-i*<span class="number">2</span>)*w[next.steps];</span><br><span class="line">                next.py=cur.py+h;</span><br><span class="line">                next.fpx=cur.px;</span><br><span class="line">                next.fpy=cur.py;</span><br><span class="line">                <span class="comment">//qDebug()&lt;&lt;next.px&lt;&lt;next.py&lt;&lt;Qt::endl;</span></span><br><span class="line">                <span class="comment">// Encode new state</span></span><br><span class="line">                <span class="keyword">int</span> code=encode(next.s);</span><br><span class="line">                <span class="keyword">if</span>(!vis.is_visited(code))&#123; <span class="comment">// If the new state is unvisited</span></span><br><span class="line">                    vis.visit(code); <span class="comment">// Mark it as visited</span></span><br><span class="line">                    q.push(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>dfs_graph.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DFS_graph_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DFS_graph_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bitmap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">9</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DFS_graph</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘图部分</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">DFS_graph</span><span class="params">(QWidget* parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~DFS_graph();</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主算法部分</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">const</span> QString &amp;, <span class="keyword">const</span> QString &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 数据成员</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> s[<span class="number">9</span>]; <span class="comment">// 0 represents Space</span></span><br><span class="line">        <span class="keyword">int</span> pos; <span class="comment">// Position of space</span></span><br><span class="line">        <span class="keyword">int</span> steps; <span class="comment">// Steps to reach current state</span></span><br><span class="line">        <span class="keyword">int</span> prepos;</span><br><span class="line">        <span class="keyword">double</span> px,py;</span><br><span class="line">        <span class="keyword">double</span> fpx,fpy;</span><br><span class="line">    &#125;ini,goal;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;state&gt; st;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> h=<span class="number">20</span>; <span class="comment">// 每层高</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> max_depth=<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> w[<span class="number">32</span>]=&#123; <span class="comment">// 第 i 层两节点间宽度的一半</span></span><br><span class="line">        <span class="number">300</span>,</span><br><span class="line">        <span class="number">75</span>,</span><br><span class="line">        <span class="number">18.75</span>,</span><br><span class="line">        <span class="number">4.6875</span>,</span><br><span class="line">        <span class="number">1.17188</span>,</span><br><span class="line">        <span class="number">0.292969</span>,</span><br><span class="line">        <span class="number">0.0732422</span>,</span><br><span class="line">        <span class="number">0.0183105</span>,</span><br><span class="line">        <span class="number">0.00457764</span>,</span><br><span class="line">        <span class="number">0.00114441</span>,</span><br><span class="line">        <span class="number">0.000286102</span>,</span><br><span class="line">        <span class="number">7.15256e-05</span>,</span><br><span class="line">        <span class="number">1.78814e-05</span>,</span><br><span class="line">        <span class="number">4.47035e-06</span>,</span><br><span class="line">        <span class="number">1.11759e-06</span>,</span><br><span class="line">        <span class="number">2.79397e-07</span>,</span><br><span class="line">        <span class="number">6.98492e-08</span>,</span><br><span class="line">        <span class="number">1.74623e-08</span>,</span><br><span class="line">        <span class="number">4.36557e-09</span>,</span><br><span class="line">        <span class="number">1.09139e-09</span>,</span><br><span class="line">        <span class="number">2.72848e-10</span>,</span><br><span class="line">        <span class="number">6.82121e-11</span>,</span><br><span class="line">        <span class="number">1.7053e-11</span>,</span><br><span class="line">        <span class="number">4.26326e-12</span>,</span><br><span class="line">        <span class="number">1.06581e-12</span>,</span><br><span class="line">        <span class="number">2.66454e-13</span>,</span><br><span class="line">        <span class="number">6.66134e-14</span>,</span><br><span class="line">        <span class="number">1.66533e-14</span>,</span><br><span class="line">        <span class="number">4.16334e-15</span>,</span><br><span class="line">        <span class="number">1.04083e-15</span>,</span><br><span class="line">        <span class="number">2.60209e-16</span>,</span><br><span class="line">        <span class="number">6.50521e-17</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工具函数</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp;, <span class="keyword">const</span> state &amp;)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// DFS_graph_H</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>dfs_graph.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;dfs_graph.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">DFS_graph::DFS_graph(QWidget* parent)</span><br><span class="line">    : QWidget(parent)&#123;</span><br><span class="line">    setWindowTitle(<span class="string">&quot;Advanced Analyse Tools&quot;</span>);</span><br><span class="line">    resize(<span class="number">650</span>,<span class="number">700</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DFS_graph::~DFS_graph()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS_graph::set</span><span class="params">(<span class="keyword">const</span> QString &amp; input1, <span class="keyword">const</span> QString &amp; input2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        ini.s[i]=<span class="keyword">int</span>(input1[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        goal.s[i]=<span class="keyword">int</span>(input2[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!ini.s[i]) ini.pos=i;</span><br><span class="line">        <span class="keyword">if</span>(!goal.s[i]) goal.pos=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS_graph::is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp; ini, <span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>; <span class="comment">// Inverse number</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ini.s[i]&gt;ini.s[j] &amp;&amp; ini.s[j]!=<span class="number">0</span>) n1++;</span><br><span class="line">            <span class="keyword">if</span>(goal.s[i]&gt;goal.s[j] &amp;&amp; goal.s[j]!=<span class="number">0</span>) n2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n1&amp;<span class="number">1</span>)!=(n2&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Same parity =&gt; Solvable</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// Different parity =&gt; Insolvable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS_graph::paintEvent</span><span class="params">(QPaintEvent *)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定绘图设备</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抗锯齿</span></span><br><span class="line">    painter.setRenderHint(QPainter::Antialiasing);</span><br><span class="line">    painter.setRenderHint(QPainter::TextAntialiasing);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置画笔</span></span><br><span class="line">    QPen penLine;</span><br><span class="line">    penLine.setWidth(<span class="number">1</span>); <span class="comment">//线宽</span></span><br><span class="line">    penLine.setColor(Qt::black); <span class="comment">//划线颜色</span></span><br><span class="line">    penLine.setStyle(Qt::SolidLine); <span class="comment">//线的类型，实线、虚线等</span></span><br><span class="line">    penLine.setCapStyle(Qt::FlatCap); <span class="comment">//线端点样式</span></span><br><span class="line">    penLine.setJoinStyle(Qt::BevelJoin); <span class="comment">//线的连接点样式</span></span><br><span class="line">    painter.setBrush(Qt::red); <span class="comment">// 填充颜色</span></span><br><span class="line">    painter.setPen(penLine);</span><br><span class="line"></span><br><span class="line">    <span class="function">QFont <span class="title">font</span><span class="params">(<span class="string">&quot;Fira Code&quot;</span>, <span class="number">13</span>, QFont::Normal, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    painter.setFont(font);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置画布</span></span><br><span class="line">    painter.translate(<span class="number">300</span>,<span class="number">30</span>); <span class="comment">// 坐标原点初始化为 画布上边缘中点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_solvable(ini,goal))&#123;</span><br><span class="line">        <span class="keyword">while</span>(!st.empty()) st.pop();</span><br><span class="line">        ini.steps=<span class="number">0</span>;</span><br><span class="line">        ini.prepos=<span class="number">-1</span>;</span><br><span class="line">        ini.px=ini.py=ini.fpx=ini.fpy=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;ini.pos&lt;&lt;Qt::endl;</span></span><br><span class="line"></span><br><span class="line">        painter.drawEllipse(ini.px<span class="number">-4</span>,ini.py<span class="number">-4</span>,<span class="number">8</span>,<span class="number">8</span>);</span><br><span class="line">        painter.drawText(ini.px<span class="number">-10</span>,ini.py<span class="number">-10</span>,<span class="string">&quot;Ini&quot;</span>);</span><br><span class="line"></span><br><span class="line">        st.push(ini);</span><br><span class="line">        <span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line">            state cur=st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            painter.drawLine(cur.px,cur.py,cur.fpx,cur.fpy); <span class="comment">//画线</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">memcmp</span>(cur.s, goal.s, <span class="keyword">sizeof</span>(goal.s)))&#123;</span><br><span class="line">                painter.drawEllipse(cur.px<span class="number">-4</span>,cur.py<span class="number">-4</span>,<span class="number">8</span>,<span class="number">8</span>);</span><br><span class="line">                painter.drawText(cur.px<span class="number">-15</span>,cur.py+<span class="number">18</span>,<span class="string">&quot;Goal&quot;</span>);</span><br><span class="line">                <span class="comment">//qDebug()&lt;&lt;cur.px&lt;&lt;cur.py&lt;&lt;cur.steps;</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cur.steps&gt;max_depth) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&gt;=<span class="number">0</span>;i--)&#123; <span class="comment">// 保持 UDLR 的搜索顺序</span></span><br><span class="line">                <span class="keyword">if</span>(d[cur.pos][i]==cur.prepos) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(~d[cur.pos][i])&#123;</span><br><span class="line">                    state next;</span><br><span class="line">                    <span class="built_in">memcpy</span>(next.s, cur.s, <span class="keyword">sizeof</span>(cur.s));</span><br><span class="line">                    next.pos=d[cur.pos][i];</span><br><span class="line">                    <span class="built_in">std</span>::swap(next.s[next.pos], next.s[cur.pos]);</span><br><span class="line">                    next.steps=cur.steps+<span class="number">1</span>;</span><br><span class="line">                    next.prepos=cur.pos;</span><br><span class="line">                    <span class="comment">// 设置 next 坐标</span></span><br><span class="line">                    next.px=cur.px-(<span class="number">3.0</span>-i*<span class="number">2</span>)*w[next.steps];</span><br><span class="line">                    next.py=cur.py+h;</span><br><span class="line">                    next.fpx=cur.px;</span><br><span class="line">                    next.fpy=cur.py;</span><br><span class="line">                    st.push(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>iddfs_graph.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> IDDFS_graph_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IDDFS_graph_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bitmap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">9</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IDDFS_graph</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘图部分</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">IDDFS_graph</span><span class="params">(QWidget* parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~IDDFS_graph();</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主算法部分</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">const</span> QString &amp;, <span class="keyword">const</span> QString &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 数据成员</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> s[<span class="number">9</span>]; <span class="comment">// 0 represents Space</span></span><br><span class="line">        <span class="keyword">int</span> pos; <span class="comment">// Position of space</span></span><br><span class="line">        <span class="keyword">int</span> steps; <span class="comment">// Steps to reach current state</span></span><br><span class="line">        <span class="keyword">int</span> prepos;</span><br><span class="line">        <span class="keyword">double</span> px,py;</span><br><span class="line">        <span class="keyword">double</span> fpx,fpy;</span><br><span class="line">    &#125;ini,goal;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;state&gt; st;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> h=<span class="number">20</span>; <span class="comment">// 每层高</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> max_depth=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> w[<span class="number">32</span>]=&#123; <span class="comment">// 第 i 层两节点间宽度的一半</span></span><br><span class="line">        <span class="number">300</span>,</span><br><span class="line">        <span class="number">75</span>,</span><br><span class="line">        <span class="number">18.75</span>,</span><br><span class="line">        <span class="number">4.6875</span>,</span><br><span class="line">        <span class="number">1.17188</span>,</span><br><span class="line">        <span class="number">0.292969</span>,</span><br><span class="line">        <span class="number">0.0732422</span>,</span><br><span class="line">        <span class="number">0.0183105</span>,</span><br><span class="line">        <span class="number">0.00457764</span>,</span><br><span class="line">        <span class="number">0.00114441</span>,</span><br><span class="line">        <span class="number">0.000286102</span>,</span><br><span class="line">        <span class="number">7.15256e-05</span>,</span><br><span class="line">        <span class="number">1.78814e-05</span>,</span><br><span class="line">        <span class="number">4.47035e-06</span>,</span><br><span class="line">        <span class="number">1.11759e-06</span>,</span><br><span class="line">        <span class="number">2.79397e-07</span>,</span><br><span class="line">        <span class="number">6.98492e-08</span>,</span><br><span class="line">        <span class="number">1.74623e-08</span>,</span><br><span class="line">        <span class="number">4.36557e-09</span>,</span><br><span class="line">        <span class="number">1.09139e-09</span>,</span><br><span class="line">        <span class="number">2.72848e-10</span>,</span><br><span class="line">        <span class="number">6.82121e-11</span>,</span><br><span class="line">        <span class="number">1.7053e-11</span>,</span><br><span class="line">        <span class="number">4.26326e-12</span>,</span><br><span class="line">        <span class="number">1.06581e-12</span>,</span><br><span class="line">        <span class="number">2.66454e-13</span>,</span><br><span class="line">        <span class="number">6.66134e-14</span>,</span><br><span class="line">        <span class="number">1.66533e-14</span>,</span><br><span class="line">        <span class="number">4.16334e-15</span>,</span><br><span class="line">        <span class="number">1.04083e-15</span>,</span><br><span class="line">        <span class="number">2.60209e-16</span>,</span><br><span class="line">        <span class="number">6.50521e-17</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工具函数</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp;, <span class="keyword">const</span> state &amp;)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// IDDFS_graph_H</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>iddfs_graph.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;IDDFS_graph.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">IDDFS_graph::IDDFS_graph(QWidget* parent)</span><br><span class="line">    : QWidget(parent)&#123;</span><br><span class="line">    setWindowTitle(<span class="string">&quot;Advanced Analyse Tools&quot;</span>);</span><br><span class="line">    resize(<span class="number">650</span>,<span class="number">700</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IDDFS_graph::~IDDFS_graph()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IDDFS_graph::set</span><span class="params">(<span class="keyword">const</span> QString &amp; input1, <span class="keyword">const</span> QString &amp; input2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        ini.s[i]=<span class="keyword">int</span>(input1[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        goal.s[i]=<span class="keyword">int</span>(input2[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!ini.s[i]) ini.pos=i;</span><br><span class="line">        <span class="keyword">if</span>(!goal.s[i]) goal.pos=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IDDFS_graph::is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp; ini, <span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>; <span class="comment">// Inverse number</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ini.s[i]&gt;ini.s[j] &amp;&amp; ini.s[j]!=<span class="number">0</span>) n1++;</span><br><span class="line">            <span class="keyword">if</span>(goal.s[i]&gt;goal.s[j] &amp;&amp; goal.s[j]!=<span class="number">0</span>) n2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n1&amp;<span class="number">1</span>)!=(n2&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Same parity =&gt; Solvable</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// Different parity =&gt; Insolvable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IDDFS_graph::paintEvent</span><span class="params">(QPaintEvent *)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定绘图设备</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抗锯齿</span></span><br><span class="line">    painter.setRenderHint(QPainter::Antialiasing);</span><br><span class="line">    painter.setRenderHint(QPainter::TextAntialiasing);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置画笔</span></span><br><span class="line">    QPen penLine;</span><br><span class="line">    penLine.setWidth(<span class="number">1</span>); <span class="comment">//线宽</span></span><br><span class="line">    penLine.setColor(Qt::black); <span class="comment">//划线颜色</span></span><br><span class="line">    penLine.setStyle(Qt::SolidLine); <span class="comment">//线的类型，实线、虚线等</span></span><br><span class="line">    penLine.setCapStyle(Qt::FlatCap); <span class="comment">//线端点样式</span></span><br><span class="line">    penLine.setJoinStyle(Qt::BevelJoin); <span class="comment">//线的连接点样式</span></span><br><span class="line">    painter.setBrush(Qt::red); <span class="comment">// 填充颜色</span></span><br><span class="line">    painter.setPen(penLine);</span><br><span class="line"></span><br><span class="line">    <span class="function">QFont <span class="title">font</span><span class="params">(<span class="string">&quot;Fira Code&quot;</span>, <span class="number">13</span>, QFont::Normal, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    painter.setFont(font);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置画布</span></span><br><span class="line">    painter.translate(<span class="number">300</span>,<span class="number">30</span>); <span class="comment">// 坐标原点初始化为 画布上边缘中点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_solvable(ini,goal))&#123;</span><br><span class="line">        <span class="keyword">while</span>(!st.empty()) st.pop();</span><br><span class="line">        ini.steps=<span class="number">0</span>;</span><br><span class="line">        ini.prepos=<span class="number">-1</span>;</span><br><span class="line">        ini.px=ini.py=ini.fpx=ini.fpy=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//qDebug()&lt;&lt;ini.pos&lt;&lt;Qt::endl;</span></span><br><span class="line"></span><br><span class="line">        painter.drawEllipse(ini.px<span class="number">-4</span>,ini.py<span class="number">-4</span>,<span class="number">8</span>,<span class="number">8</span>);</span><br><span class="line">        painter.drawText(ini.px<span class="number">-10</span>,ini.py<span class="number">-10</span>,<span class="string">&quot;Ini&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FLAG: st.push(ini);</span><br><span class="line">        <span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line">            state cur=st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            painter.drawLine(cur.px,cur.py,cur.fpx,cur.fpy); <span class="comment">//画线</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">memcmp</span>(cur.s, goal.s, <span class="keyword">sizeof</span>(goal.s)))&#123;</span><br><span class="line">                painter.drawEllipse(cur.px<span class="number">-4</span>,cur.py<span class="number">-4</span>,<span class="number">8</span>,<span class="number">8</span>);</span><br><span class="line">                painter.drawText(cur.px<span class="number">-15</span>,cur.py+<span class="number">18</span>,<span class="string">&quot;Goal&quot;</span>);</span><br><span class="line">                <span class="comment">//qDebug()&lt;&lt;cur.px&lt;&lt;cur.py&lt;&lt;cur.steps;</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cur.steps&gt;max_depth) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&gt;=<span class="number">0</span>;i--)&#123; <span class="comment">// 保持 UDLR 的搜索顺序</span></span><br><span class="line">                <span class="keyword">if</span>(d[cur.pos][i]==cur.prepos) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(~d[cur.pos][i])&#123;</span><br><span class="line">                    state next;</span><br><span class="line">                    <span class="built_in">memcpy</span>(next.s, cur.s, <span class="keyword">sizeof</span>(cur.s));</span><br><span class="line">                    next.pos=d[cur.pos][i];</span><br><span class="line">                    <span class="built_in">std</span>::swap(next.s[next.pos], next.s[cur.pos]);</span><br><span class="line">                    next.steps=cur.steps+<span class="number">1</span>;</span><br><span class="line">                    next.prepos=cur.pos;</span><br><span class="line">                    <span class="comment">// 设置 next 坐标</span></span><br><span class="line">                    next.px=cur.px-(<span class="number">3.0</span>-i*<span class="number">2</span>)*w[next.steps];</span><br><span class="line">                    next.py=cur.py+h;</span><br><span class="line">                    next.fpx=cur.px;</span><br><span class="line">                    next.fpy=cur.py;</span><br><span class="line">                    st.push(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max_depth++;</span><br><span class="line">        <span class="keyword">goto</span> FLAG;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>a_star_graph.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> A_STAR_GRAPH_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A_STAR_GRAPH_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bitmap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">9</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> manhattan[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A_star_graph</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘图部分</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">A_star_graph</span><span class="params">(QWidget* parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~A_star_graph();</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主算法部分</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">const</span> QString &amp;, <span class="keyword">const</span> QString &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 数据成员</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> s[<span class="number">9</span>]; <span class="comment">// 0 represents Space</span></span><br><span class="line">        <span class="keyword">int</span> pos; <span class="comment">// Position of space</span></span><br><span class="line">        <span class="keyword">int</span> steps; <span class="comment">// Steps to reach current state</span></span><br><span class="line">        <span class="keyword">int</span> h; <span class="comment">// Heuristic function</span></span><br><span class="line">        <span class="keyword">int</span> f;</span><br><span class="line">        <span class="keyword">double</span> px,py;</span><br><span class="line">        <span class="keyword">double</span> fpx,fpy;</span><br><span class="line">    &#125;ini,goal;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">priority_queue</span>&lt;state&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> h=<span class="number">20</span>; <span class="comment">// 每层高</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> w[<span class="number">32</span>]=&#123; <span class="comment">// 第 i 层两节点间宽度的一半</span></span><br><span class="line">        <span class="number">300</span>,</span><br><span class="line">        <span class="number">75</span>,</span><br><span class="line">        <span class="number">18.75</span>,</span><br><span class="line">        <span class="number">4.6875</span>,</span><br><span class="line">        <span class="number">1.17188</span>,</span><br><span class="line">        <span class="number">0.292969</span>,</span><br><span class="line">        <span class="number">0.0732422</span>,</span><br><span class="line">        <span class="number">0.0183105</span>,</span><br><span class="line">        <span class="number">0.00457764</span>,</span><br><span class="line">        <span class="number">0.00114441</span>,</span><br><span class="line">        <span class="number">0.000286102</span>,</span><br><span class="line">        <span class="number">7.15256e-05</span>,</span><br><span class="line">        <span class="number">1.78814e-05</span>,</span><br><span class="line">        <span class="number">4.47035e-06</span>,</span><br><span class="line">        <span class="number">1.11759e-06</span>,</span><br><span class="line">        <span class="number">2.79397e-07</span>,</span><br><span class="line">        <span class="number">6.98492e-08</span>,</span><br><span class="line">        <span class="number">1.74623e-08</span>,</span><br><span class="line">        <span class="number">4.36557e-09</span>,</span><br><span class="line">        <span class="number">1.09139e-09</span>,</span><br><span class="line">        <span class="number">2.72848e-10</span>,</span><br><span class="line">        <span class="number">6.82121e-11</span>,</span><br><span class="line">        <span class="number">1.7053e-11</span>,</span><br><span class="line">        <span class="number">4.26326e-12</span>,</span><br><span class="line">        <span class="number">1.06581e-12</span>,</span><br><span class="line">        <span class="number">2.66454e-13</span>,</span><br><span class="line">        <span class="number">6.66134e-14</span>,</span><br><span class="line">        <span class="number">1.66533e-14</span>,</span><br><span class="line">        <span class="number">4.16334e-15</span>,</span><br><span class="line">        <span class="number">1.04083e-15</span>,</span><br><span class="line">        <span class="number">2.60209e-16</span>,</span><br><span class="line">        <span class="number">6.50521e-17</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工具函数</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> A_star_graph::state &amp;, <span class="keyword">const</span> A_star_graph::state &amp;);</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc_manhattan</span><span class="params">(<span class="keyword">const</span> state &amp;,<span class="keyword">const</span> state &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp;, <span class="keyword">const</span> state &amp;)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// A_STAR_GRAPH_H</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>a_star_graph.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;a_star_graph.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">A_star_graph::A_star_graph(QWidget* parent)</span><br><span class="line">    : QWidget(parent)&#123;</span><br><span class="line">    setWindowTitle(<span class="string">&quot;Advanced Analyse Tools&quot;</span>);</span><br><span class="line">    resize(<span class="number">650</span>,<span class="number">700</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A_star_graph::~A_star_graph()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> A_star_graph::state &amp; x, <span class="keyword">const</span> A_star_graph::state &amp; y)&#123;</span><br><span class="line">    <span class="keyword">return</span> x.f&gt;y.f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A_star_graph::set</span><span class="params">(<span class="keyword">const</span> QString &amp; input1, <span class="keyword">const</span> QString &amp; input2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        ini.s[i]=<span class="keyword">int</span>(input1[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        goal.s[i]=<span class="keyword">int</span>(input2[i].toLatin1()-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!ini.s[i]) ini.pos=i;</span><br><span class="line">        <span class="keyword">if</span>(!goal.s[i]) goal.pos=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">A_star_graph::calc_manhattan</span><span class="params">(<span class="keyword">const</span> state &amp; cur,<span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dis=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cur.s[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.s[i]==goal.s[j])&#123;</span><br><span class="line">                dis+=manhattan[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">A_star_graph::is_solvable</span><span class="params">(<span class="keyword">const</span> state &amp; ini, <span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>,n2=<span class="number">0</span>; <span class="comment">// Inverse number</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ini.s[i]&gt;ini.s[j] &amp;&amp; ini.s[j]!=<span class="number">0</span>) n1++;</span><br><span class="line">            <span class="keyword">if</span>(goal.s[i]&gt;goal.s[j] &amp;&amp; goal.s[j]!=<span class="number">0</span>) n2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((n1&amp;<span class="number">1</span>)!=(n2&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Same parity =&gt; Solvable</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// Different parity =&gt; Insolvable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A_star_graph::paintEvent</span><span class="params">(QPaintEvent *)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定绘图设备</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抗锯齿</span></span><br><span class="line">    painter.setRenderHint(QPainter::Antialiasing);</span><br><span class="line">    painter.setRenderHint(QPainter::TextAntialiasing);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置画笔</span></span><br><span class="line">    QPen penLine;</span><br><span class="line">    penLine.setWidth(<span class="number">1</span>); <span class="comment">//线宽</span></span><br><span class="line">    penLine.setColor(Qt::black); <span class="comment">//划线颜色</span></span><br><span class="line">    penLine.setStyle(Qt::SolidLine); <span class="comment">//线的类型，实线、虚线等</span></span><br><span class="line">    penLine.setCapStyle(Qt::FlatCap); <span class="comment">//线端点样式</span></span><br><span class="line">    penLine.setJoinStyle(Qt::BevelJoin); <span class="comment">//线的连接点样式</span></span><br><span class="line">    painter.setBrush(Qt::red); <span class="comment">// 填充颜色</span></span><br><span class="line">    painter.setPen(penLine);</span><br><span class="line"></span><br><span class="line">    <span class="function">QFont <span class="title">font</span><span class="params">(<span class="string">&quot;Fira Code&quot;</span>, <span class="number">13</span>, QFont::Normal, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    painter.setFont(font);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置画布</span></span><br><span class="line">    painter.translate(<span class="number">300</span>,<span class="number">30</span>); <span class="comment">// 坐标原点初始化为 画布上边缘中点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_solvable(ini,goal))&#123;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">        <span class="function">bitmap <span class="title">vis</span><span class="params">(<span class="number">362880</span>)</span></span>;</span><br><span class="line">        ini.steps=<span class="number">0</span>;</span><br><span class="line">        ini.h=calc_manhattan(ini,goal);</span><br><span class="line">        ini.f=ini.steps+ini.h;</span><br><span class="line">        ini.px=ini.py=ini.fpx=ini.fpy=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        painter.drawEllipse(ini.px<span class="number">-4</span>,ini.py<span class="number">-4</span>,<span class="number">8</span>,<span class="number">8</span>);</span><br><span class="line">        painter.drawText(ini.px<span class="number">-10</span>,ini.py<span class="number">-10</span>,<span class="string">&quot;Ini&quot;</span>);</span><br><span class="line"></span><br><span class="line">        q.push(ini);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            state cur=q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            painter.drawLine(cur.px,cur.py,cur.fpx,cur.fpy); <span class="comment">// 画线</span></span><br><span class="line">            <span class="keyword">if</span>(!cur.h)&#123;</span><br><span class="line">                painter.drawEllipse(cur.px<span class="number">-4</span>,cur.py<span class="number">-4</span>,<span class="number">8</span>,<span class="number">8</span>);</span><br><span class="line">                painter.drawText(cur.px<span class="number">-15</span>,cur.py+<span class="number">18</span>,<span class="string">&quot;Goal&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123; <span class="comment">// try 4 direction</span></span><br><span class="line">                <span class="keyword">if</span>(~d[cur.pos][i])&#123; <span class="comment">// If current move is accepted</span></span><br><span class="line">                    <span class="comment">// Construct the new state after move</span></span><br><span class="line">                    state next;</span><br><span class="line">                    <span class="built_in">memcpy</span>(next.s, cur.s, <span class="keyword">sizeof</span>(cur.s));</span><br><span class="line">                    next.pos=d[cur.pos][i];</span><br><span class="line">                    <span class="built_in">std</span>::swap(next.s[cur.pos],next.s[next.pos]);</span><br><span class="line">                    next.steps=cur.steps+<span class="number">1</span>;</span><br><span class="line">                    next.h=calc_manhattan(next,goal);</span><br><span class="line">                    next.f=next.steps+next.h;</span><br><span class="line">                    <span class="comment">// 设置 next 坐标</span></span><br><span class="line">                    next.px=cur.px-(<span class="number">3.0</span>-i*<span class="number">2</span>)*w[next.steps];</span><br><span class="line">                    next.py=cur.py+h;</span><br><span class="line">                    next.fpx=cur.px;</span><br><span class="line">                    next.fpy=cur.py;</span><br><span class="line">                    <span class="comment">//qDebug()&lt;&lt;next.px&lt;&lt;&#x27; &#x27;&lt;&lt;next.py&lt;&lt;Qt::endl;</span></span><br><span class="line">                    <span class="keyword">int</span> code=encode(next.s);</span><br><span class="line">                    <span class="keyword">if</span>(!vis.is_visited(code))&#123;</span><br><span class="line">                        vis.visit(code);</span><br><span class="line">                        q.push(next);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>bitmap.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BITMAP_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BITMAP_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> fact[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bitmap</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span>* buf;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&gt;(<span class="keyword">int</span>)x?(<span class="keyword">int</span>)x+<span class="number">1</span>:(<span class="keyword">int</span>)x;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    bitmap(): buf(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    bitmap(<span class="keyword">const</span> <span class="keyword">int</span> &amp; siz)&#123;</span><br><span class="line">        buf=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">ceil</span>(siz/<span class="number">32</span>)]();</span><br><span class="line">    &#125;</span><br><span class="line">    ~bitmap()&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] buf;</span><br><span class="line">        buf=<span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_visited</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">undo_visit</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// BITMAP_H</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>bitmap.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bitmap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitmap::visit</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    n is in the j-th bit of the i-th int</span></span><br><span class="line"><span class="comment">    +----------+----------+----------+----   ---+----------+----------</span></span><br><span class="line"><span class="comment">    |  1st int |  2nd int |  3rd int |          | i-th int |</span></span><br><span class="line"><span class="comment">    +----------+----------+----------+----   ---+----------+----------</span></span><br><span class="line"><span class="comment">                                                       ↑</span></span><br><span class="line"><span class="comment">                                                    j-th bit</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> i=n/<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n&amp;<span class="number">31</span>; <span class="comment">// Equivalent to j=n%32;</span></span><br><span class="line">    buf[i]|=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       To change the j-th bit from 0 to 1,</span></span><br><span class="line"><span class="comment">       we need to construct a number whose j-th bit is 1 and the rest bits are 0 (1&lt;&lt;j),</span></span><br><span class="line"><span class="comment">       then OR the original number with the constructed number.</span></span><br><span class="line"><span class="comment">       e.g      1100 0000</span></span><br><span class="line"><span class="comment">                0000 0010</span></span><br><span class="line"><span class="comment">            OR  1100 0010</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bitmap::is_visited</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=n/<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n&amp;<span class="number">31</span>;</span><br><span class="line">    <span class="keyword">return</span> ((buf[i]&amp;(<span class="number">1</span>&lt;&lt;j))!=<span class="number">0</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       To check the j-th bit,</span></span><br><span class="line"><span class="comment">       we need to construct a number whose j-th is 1 and the rest bits are 0 (1&lt;&lt;j),</span></span><br><span class="line"><span class="comment">       then AND the original number with the constructed number.</span></span><br><span class="line"><span class="comment">       e.g      1100 0000			        1100 0000</span></span><br><span class="line"><span class="comment">                0000 0010			        0100 0000</span></span><br><span class="line"><span class="comment">           AND  0000 0000 (false)      AND  0100 0000 (true)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitmap::undo_visit</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=n/<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n&amp;<span class="number">31</span>;</span><br><span class="line">    buf[i]|=~(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>eight_puzzle.ui</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;ui version&#x3D;&quot;4.0&quot;&gt;</span><br><span class="line"> &lt;class&gt;eight_puzzle&lt;&#x2F;class&gt;</span><br><span class="line"> &lt;widget class&#x3D;&quot;QWidget&quot; name&#x3D;&quot;eight_puzzle&quot;&gt;</span><br><span class="line">  &lt;property name&#x3D;&quot;geometry&quot;&gt;</span><br><span class="line">   &lt;rect&gt;</span><br><span class="line">    &lt;x&gt;0&lt;&#x2F;x&gt;</span><br><span class="line">    &lt;y&gt;0&lt;&#x2F;y&gt;</span><br><span class="line">    &lt;width&gt;800&lt;&#x2F;width&gt;</span><br><span class="line">    &lt;height&gt;600&lt;&#x2F;height&gt;</span><br><span class="line">   &lt;&#x2F;rect&gt;</span><br><span class="line">  &lt;&#x2F;property&gt;</span><br><span class="line">  &lt;property name&#x3D;&quot;windowTitle&quot;&gt;</span><br><span class="line">   &lt;string&gt;eight_puzzle&lt;&#x2F;string&gt;</span><br><span class="line">  &lt;&#x2F;property&gt;</span><br><span class="line"> &lt;&#x2F;widget&gt;</span><br><span class="line"> &lt;resources&#x2F;&gt;</span><br><span class="line"> &lt;connections&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;ui&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>A_star_fhq_treap.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    T val;</span><br><span class="line">    <span class="keyword">int</span> rnd,siz;</span><br><span class="line">    node* lc;</span><br><span class="line">    node* rc;</span><br><span class="line">    node(T _val=<span class="number">0</span>)&#123;</span><br><span class="line">        val=_val;</span><br><span class="line">        rnd=rand()&amp;<span class="number">32767</span>;</span><br><span class="line">        siz=<span class="number">1</span>;</span><br><span class="line">        lc=rc=<span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update_siz</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fhq_treap</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    node&lt;T&gt;* root;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(node&lt;T&gt;*,node&lt;T&gt;*&amp;,node&lt;T&gt;*&amp;,<span class="keyword">const</span> T&amp;)</span></span>;</span><br><span class="line">    <span class="function">node&lt;T&gt;*&amp; <span class="title">merge</span><span class="params">(node&lt;T&gt;*&amp;,node&lt;T&gt;*&amp;)</span></span>;</span><br><span class="line">    <span class="function">node&lt;T&gt;* <span class="title">kth</span><span class="params">(node&lt;T&gt;*,<span class="keyword">const</span> <span class="keyword">int</span>&amp; k)</span></span>;</span><br><span class="line">    <span class="function">T* <span class="title">p_exist</span><span class="params">(node&lt;T&gt;*,<span class="keyword">const</span> T&amp; x)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    fhq_treap():root(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> T&amp;)</span></span>;</span><br><span class="line">    <span class="function">T* <span class="title">get_min_and_del</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">T* <span class="title">exist</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">9</span>];</span><br><span class="line">    <span class="keyword">int</span> f,g,h;</span><br><span class="line">    state* parent;</span><br><span class="line">    state&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> state&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> state&amp;,<span class="keyword">const</span> state&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> state&amp;,<span class="keyword">const</span> state&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> state&amp;,<span class="keyword">const</span> state&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> state&amp;,<span class="keyword">const</span> state&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> state&amp;,<span class="keyword">const</span> state&amp;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bitmap</span>&#123;</span> <span class="comment">// 位图</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span>* buf;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    bitmap();</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">bitmap</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    ~bitmap();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_visited</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">state ini,goal;</span><br><span class="line"><span class="keyword">int</span> fact[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 曼哈顿距离表</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> manhattan[<span class="number">9</span>][<span class="number">9</span>]=&#123;</span><br><span class="line">        <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,</span><br><span class="line">        <span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br><span class="line">        <span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,</span><br><span class="line">        <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br><span class="line">        <span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,</span><br><span class="line">        <span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,</span><br><span class="line">        <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,</span><br><span class="line">        <span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">        <span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(T&amp;,T&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span>)</span></span>; <span class="comment">// 向上取整</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span>* p)</span></span>; <span class="comment">// 康拓展开</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc_manhattan</span><span class="params">(<span class="keyword">const</span> state &amp;,<span class="keyword">const</span> state &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A_star</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化阶乘数组</span></span><br><span class="line">    fact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        fact[i]=i*fact[i<span class="number">-1</span>];</span><br><span class="line">    <span class="comment">// open 表</span></span><br><span class="line">    fhq_treap&lt;state&gt; open;</span><br><span class="line">    <span class="comment">// close 表</span></span><br><span class="line">    <span class="function">bitmap <span class="title">close</span><span class="params">(<span class="number">362880</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 初始化初始状态的 f,g,h 值，父节点设为空</span></span><br><span class="line">    ini.h=calc_manhattan(ini,goal);</span><br><span class="line">    ini.g=<span class="number">0</span>;</span><br><span class="line">    ini.f=ini.h+ini.g;</span><br><span class="line">    ini.parent=<span class="literal">nullptr</span>;</span><br><span class="line">    <span class="comment">// 初始状态放入 open 表</span></span><br><span class="line">    open.insert(ini);</span><br><span class="line">    <span class="keyword">while</span>(!open.empty())&#123;</span><br><span class="line">        state* cur=open.get_min_and_del(); <span class="comment">// 取出 f 值最小的状态</span></span><br><span class="line">        close.visit(encode(cur-&gt;s)); <span class="comment">// 将取出的状态放入 close 表中</span></span><br><span class="line">        <span class="comment">// 找空格位置</span></span><br><span class="line">        <span class="keyword">int</span> p0;</span><br><span class="line">        <span class="keyword">for</span>(p0=<span class="number">0</span>;p0&lt;<span class="number">9</span>;p0++) <span class="keyword">if</span>(!cur-&gt;s[p0]) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> x=p0/<span class="number">3</span>,y=p0%<span class="number">3</span>;</span><br><span class="line">        <span class="comment">// 四种移动方式</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;h==<span class="number">0</span>)&#123; <span class="comment">// h==0 说明找到了</span></span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;cur-&gt;g&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="comment">// 根据 parent 回溯得到路径</span></span><br><span class="line">                <span class="keyword">for</span>(state* it=cur;it!=<span class="literal">nullptr</span>;it=it-&gt;parent)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">                        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;it-&gt;s[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 尝试移动</span></span><br><span class="line">            <span class="keyword">int</span> new_x=x+dx[i];</span><br><span class="line">            <span class="keyword">int</span> new_y=y+dy[i];</span><br><span class="line">            <span class="keyword">int</span> new_p0=new_x*<span class="number">3</span>+new_y;</span><br><span class="line">            <span class="keyword">if</span>(new_x&gt;=<span class="number">0</span> &amp;&amp; new_x&lt;<span class="number">3</span> &amp;&amp; new_y&gt;=<span class="number">0</span> &amp;&amp; new_y&lt;<span class="number">3</span>)&#123; <span class="comment">// 如果移动合法</span></span><br><span class="line">                 <span class="comment">// 创建移动后新状态</span></span><br><span class="line">                state* t=<span class="keyword">new</span> state;</span><br><span class="line">                *t=*cur;</span><br><span class="line">                swap(t-&gt;s[new_p0],t-&gt;s[p0]);</span><br><span class="line">                t-&gt;h=calc_manhattan(*t,goal);</span><br><span class="line">                t-&gt;g=cur-&gt;g+<span class="number">1</span>;</span><br><span class="line">                t-&gt;f=t-&gt;g+t-&gt;h;</span><br><span class="line">                t-&gt;parent=cur;</span><br><span class="line">                <span class="keyword">if</span>(!close.is_visited(encode(t-&gt;s)))&#123; <span class="comment">// 移动后状态不在 close 表中</span></span><br><span class="line">                    state* p=open.exist(*t); <span class="comment">// 在 open 表中找这个状态</span></span><br><span class="line">                    <span class="keyword">if</span>(p==<span class="literal">nullptr</span>)&#123; <span class="comment">//  open 表中没找到，则插入这个状态</span></span><br><span class="line">                        open.insert(*t);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(*p&lt;*t)&#123; <span class="comment">//  open 表中找到了，比较 f 值大小</span></span><br><span class="line">                        *t=*p; <span class="comment">// open 表中只留 f 小的那个</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    freopen(<span class="string">&quot;Test.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;Test.out&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++) <span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;ini.s[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++) <span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;goal.s[i];</span><br><span class="line">    A_star();</span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    fclose(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">state&amp; state::<span class="keyword">operator</span>=(<span class="keyword">const</span> state&amp; x)&#123;</span><br><span class="line">    f=x.f;</span><br><span class="line">    g=x.g;</span><br><span class="line">    h=x.h;</span><br><span class="line">    parent=x.parent;</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;s[<span class="number">0</span>],&amp;x.s[<span class="number">0</span>],<span class="keyword">sizeof</span>(s));</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> state&amp; x,<span class="keyword">const</span> state&amp; y)&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">memcmp</span>(x.s,y.s,<span class="keyword">sizeof</span>(x.s));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> state&amp; x,<span class="keyword">const</span> state&amp; y)&#123;</span><br><span class="line">    <span class="keyword">return</span> x.f&lt;y.f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> state&amp; x,<span class="keyword">const</span> state&amp; y)&#123;</span><br><span class="line">    <span class="keyword">return</span> x.f&lt;=y.f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> state&amp; x,<span class="keyword">const</span> state&amp; y)&#123;</span><br><span class="line">    <span class="keyword">return</span> x.f&gt;y.f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> state&amp; x,<span class="keyword">const</span> state&amp; y)&#123;</span><br><span class="line">    <span class="keyword">return</span> x.f&gt;=y.f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;(<span class="keyword">int</span>)x?(<span class="keyword">int</span>)x+<span class="number">1</span>:(<span class="keyword">int</span>)x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(T&amp; x,T&amp; y)</span></span>&#123;</span><br><span class="line">    T tmp=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> code=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">9</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(p[j]&lt;p[i])  cnt++;</span><br><span class="line">        code+=fact[<span class="number">8</span>-i]*cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line">bitmap::bitmap():buf(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">bitmap::bitmap(<span class="keyword">int</span> upper_bound)&#123;</span><br><span class="line">    buf=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">ceil</span>(upper_bound/<span class="number">32</span>)];</span><br><span class="line">&#125;</span><br><span class="line">bitmap::~bitmap()&#123;</span><br><span class="line">    <span class="keyword">delete</span> [] buf;</span><br><span class="line">    buf=<span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitmap::visit</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">// n 对应的 bit 为第 i 个 int 的第 j 位</span></span><br><span class="line">    <span class="keyword">int</span> i=n/<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n&amp;<span class="number">31</span>;</span><br><span class="line">    <span class="comment">// a%b==a&amp;(b-1) b 为 2 的幂</span></span><br><span class="line">    buf[i]|=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bitmap::is_visited</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=n/<span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> j=n&amp;<span class="number">31</span>;</span><br><span class="line">    <span class="keyword">return</span> ((buf[i]&amp;(<span class="number">1</span>&lt;&lt;j))!=<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> node&lt;T&gt;::update_siz()&#123;</span><br><span class="line">    siz=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(lc!=<span class="literal">nullptr</span>) siz+=lc-&gt;siz;</span><br><span class="line">    <span class="keyword">if</span>(rc!=<span class="literal">nullptr</span>) siz+=rc-&gt;siz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> fhq_treap&lt;T&gt;::split(node&lt;T&gt;* root,node&lt;T&gt;*&amp; a,node&lt;T&gt;*&amp;b,<span class="keyword">const</span> T&amp; pivot)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span> a=b=<span class="literal">nullptr</span>,<span class="keyword">void</span>();</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;val&lt;=pivot)&#123;</span><br><span class="line">        a=root;</span><br><span class="line">        split(root-&gt;rc,a-&gt;rc,b,pivot);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        b=root;</span><br><span class="line">        split(root-&gt;lc,a,b-&gt;lc,pivot);</span><br><span class="line">    &#125;</span><br><span class="line">    root-&gt;update_siz();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">node&lt;T&gt;*&amp; fhq_treap&lt;T&gt;::merge(node&lt;T&gt;*&amp; a,node&lt;T&gt;*&amp;b)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="literal">nullptr</span>) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="literal">nullptr</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">if</span>(a-&gt;rnd&lt;=b-&gt;rnd)&#123;</span><br><span class="line">        a-&gt;rc=merge(a-&gt;rc,b);</span><br><span class="line">        a-&gt;update_siz();</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        b-&gt;lc=merge(a,b-&gt;lc);</span><br><span class="line">        b-&gt;update_siz();</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">node&lt;T&gt;* fhq_treap&lt;T&gt;::kth(node&lt;T&gt;* _root,<span class="keyword">const</span> <span class="keyword">int</span>&amp; k)&#123;</span><br><span class="line">    assert(_root!=<span class="literal">nullptr</span>); <span class="comment">// 断言</span></span><br><span class="line">    <span class="keyword">int</span> lc_siz=(_root-&gt;lc==<span class="literal">nullptr</span> ? <span class="number">0</span> : _root-&gt;lc-&gt;siz);</span><br><span class="line">    <span class="keyword">if</span>(lc_siz&gt;=k) <span class="keyword">return</span> kth(_root-&gt;lc,k);</span><br><span class="line">    <span class="keyword">if</span>(lc_siz+<span class="number">1</span>&lt;k) <span class="keyword">return</span> kth(_root-&gt;rc,k-lc_siz<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> _root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> fhq_treap&lt;T&gt;::insert(<span class="keyword">const</span> T&amp; _val)&#123;</span><br><span class="line">    node&lt;T&gt;* a=<span class="literal">nullptr</span>;</span><br><span class="line">    node&lt;T&gt;* b=<span class="literal">nullptr</span>;</span><br><span class="line">    node&lt;T&gt;* n=<span class="literal">nullptr</span>;</span><br><span class="line">    split(root,a,b,_val);</span><br><span class="line">    <span class="keyword">if</span>(a!=<span class="literal">nullptr</span> &amp;&amp; (n=kth(a,a-&gt;siz))-&gt;val==_val)&#123;</span><br><span class="line">        <span class="comment">// exist;</span></span><br><span class="line">        root=merge(a,b);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        n=<span class="keyword">new</span> node&lt;T&gt;(_val);</span><br><span class="line">        root=merge(merge(a,n),b);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T* fhq_treap&lt;T&gt;::get_min_and_del()&#123;</span><br><span class="line">    assert(root!=<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;lc==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        T* tmp=&amp;root-&gt;val;</span><br><span class="line">        root=root-&gt;rc;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    node&lt;T&gt;* it;</span><br><span class="line">    <span class="keyword">for</span>(it=root;it-&gt;lc-&gt;lc!=<span class="literal">nullptr</span>;it=it-&gt;lc)&#123;&#125;</span><br><span class="line">    T* tmp=&amp;it-&gt;lc-&gt;val;</span><br><span class="line">    it-&gt;lc=it-&gt;lc-&gt;rc;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T* fhq_treap&lt;T&gt;::p_exist(node&lt;T&gt;* root,<span class="keyword">const</span> T&amp; x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;val==x) <span class="keyword">return</span> &amp;root-&gt;val;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;val&lt;x) <span class="keyword">return</span> p_exist(root-&gt;rc,x);</span><br><span class="line">    <span class="keyword">return</span> p_exist(root-&gt;lc,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T* fhq_treap&lt;T&gt;::exist(<span class="keyword">const</span> T&amp; x)&#123;</span><br><span class="line">    <span class="keyword">return</span> p_exist(root,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">bool</span> fhq_treap&lt;T&gt;::empty()&#123;</span><br><span class="line">    <span class="keyword">return</span> root==<span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc_manhattan</span><span class="params">(<span class="keyword">const</span> state &amp; cur,<span class="keyword">const</span> state &amp; goal)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dis=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.s[i]==goal.s[j])&#123;</span><br><span class="line">                dis+=manhattan[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
