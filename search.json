[{"title":"C++ 学习笔记","url":"/2021/01/19/cpp/","content":"<blockquote class=\"blockquote-center\">\n<div style=\"letter-spacing:1px;padding: 0px 50px 0px 0px\">当想要保护自己重要的人的时候，人就会变得很坚强。</div>\n<div style=\"text-align: right;padding: 0px 200px 0px 0px\">——《火影忍者》白</div>\n</blockquote>\n\n<a id=\"more\"></a>\n\n<h2 id=\"常量指针-amp-指针常量\"><a href=\"#常量指针-amp-指针常量\" class=\"headerlink\" title=\"常量指针 &amp; 指针常量\"></a>常量指针 &amp; 指针常量</h2><p>实际上就是一个剥洋葱的过程，从内到外逐步剥开：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> * p; <span class=\"comment\">// p -&gt; p 是指针 -&gt; p 指向 int -&gt; 这个 int 不可变 =&gt; 常量指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> p; <span class=\"comment\">// p -&gt; p 不可变 -&gt; p 是指针 -&gt; p 指向 int =&gt; 指针常量</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"top-level-const-和-low-level-const\"><a href=\"#top-level-const-和-low-level-const\" class=\"headerlink\" title=\"top-level const 和 low-level const\"></a>top-level const 和 low-level const</h2><p><em>C++ Primer</em> 中对 top-level const 和 low-level const 解释得非常模糊，翻译上也很容易造成误导。top-level const 翻译成 “顶层 const” 没问题，但 low-level const 就不该翻译成 “底层 const” 了，这让 bottom-level const 情何以堪？</p>\n<p>看了一圈，还是 Stack Overflow 上的一个回答直击本质：</p>\n<blockquote>\n<p>使得被修饰的变量本身无法改变的 const 是 top-level const，其他的通过指针或引用等间接途径来限制目标内容不可变的 const 是 low-level const。</p>\n</blockquote>\n<p>现在再看书上的注释就好懂了吧：</p>\n<figure class=\"highlight cpp\"><figcaption><span>C++ Primer Edition 5th P62</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, &amp;r = i;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> a = r;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> ci = i, &amp;cr = ci;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> b = ci;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> c = cr;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> d = &amp;i;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> e = &amp;ci;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> f =ci;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> &amp;g = ci;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> &amp;h = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp;j =<span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> &amp;m = ci;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> *p = &amp;ci;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> &amp;n = i, *p2 = &amp;ci; <span class=\"comment\">// Wrong!</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"类内静态成员的初始化\"><a href=\"#类内静态成员的初始化\" class=\"headerlink\" title=\"类内静态成员的初始化\"></a>类内静态成员的初始化</h2><p>虽然 C++ 新标准已经支持 in-class initializer，但如果等号右边不是常量表达式（比如要调用函数计算），还是需要使用传统 <strong>类内定义，类外初始化</strong> 的技术</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">calc</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">double</span> t; <span class=\"comment\">// 类内定义</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> calc::t = <span class=\"built_in\">atan</span>(<span class=\"number\">2</span>); <span class=\"comment\">// 类外初始化，注意不要加 static</span></span><br></pre></td></tr></table></figure>\n<p>简单的常量表达式，使用 <code>enum</code> 定义会更优雅：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">calc</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> &#123;</span> TOTAL = <span class=\"number\">10</span> &#125;; <span class=\"comment\">// so elegant!</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>如果是 Java，在 <code>static</code> 块里初始化就好了。</p>\n<h2 id=\"开发环境配置\"><a href=\"#开发环境配置\" class=\"headerlink\" title=\"开发环境配置\"></a>开发环境配置</h2><h3 id=\"vscode-关闭-C-11-Warning\"><a href=\"#vscode-关闭-C-11-Warning\" class=\"headerlink\" title=\"vscode 关闭 C++ 11 Warning\"></a>vscode 关闭 C++ 11 Warning</h3><p>首先，在你用的查错插件里将 C++ 版本换为 C++17，我用的 C/C++ Clang Command Adapter，只要在 <code>Clang: Cxxflags</code> 一栏添加 <code>-std=C++17</code> 即可。</p>\n<p>然后，关掉用 Coderunner 一键运行时终端里的警告。打开 <code>settings.json</code>， 在 <code>&quot;code-runner.executorMap&quot;</code>  对应 C++ 的一项里加入 <code>-std=c++17</code> 即可。</p>\n<figure class=\"highlight\"><figcaption><span>settings.json</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;cpp&quot;: &quot;cd $dir &amp;&amp; clang++ -std=c++17 $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,</span><br></pre></td></tr></table></figure>\n<p>最后，关掉调试时的警告。在 <code>tasks.json</code> 的运行参数中加入 <code>&quot;-std=c++17&quot;</code> 即可。</p>\n<figure class=\"highlight\"><figcaption><span>tasks.json</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;args&quot;: [</span><br><span class=\"line\">    &quot;$&#123;fileBasename&#125;&quot;,</span><br><span class=\"line\">    &quot;-o&quot;,</span><br><span class=\"line\">    &quot;$&#123;fileBasenameNoExtension&#125;&quot;,</span><br><span class=\"line\">    &quot;-g&quot;,</span><br><span class=\"line\">    &quot;-std=c++17&quot;, // 加在这里</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<h3 id=\"Jupyter-安装-C-Kernel\"><a href=\"#Jupyter-安装-C-Kernel\" class=\"headerlink\" title=\"Jupyter 安装 C++ Kernel\"></a>Jupyter 安装 C++ Kernel</h3><p>安装 Xeus-Cling Kernel 让我们也能在 Jupyter 上愉快地写 C++。我用的 pyenv 管理 Python 版本，所以先切换到 miniconda 环境，用 conda 新建一个环境来装 Xeus-Cling。注意，根据官方教程只能用 miniconda，而不能用 anaconda。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pyenv <span class=\"built_in\">local</span> miniconda3-4.7.12 <span class=\"comment\"># 切换到 miniconda</span></span><br><span class=\"line\">conda create -n cpp <span class=\"comment\"># 为 xeus-cling 创建名为 cpp 的虚拟环境</span></span><br><span class=\"line\">conda activate cling <span class=\"comment\"># 切换到新创建的 cpp 环境</span></span><br><span class=\"line\">conda install jupyter notebook <span class=\"comment\"># 为新环境安装 jupyter</span></span><br><span class=\"line\">conda install xeus-cling -c conda-forge <span class=\"comment\"># 安装 xeus-cling 内核</span></span><br><span class=\"line\">jupyter kernelspec list <span class=\"comment\"># 查看所有安装的 kernel</span></span><br></pre></td></tr></table></figure>\n<p>如果 <code>xcpp11</code>、<code>xcpp14</code>、<code>xcpp17</code> 都有显示，则说明已经安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Available kernels:</span><br><span class=\"line\">  python3    &#x2F;Users&#x2F;stardust&#x2F;.pyenv&#x2F;versions&#x2F;miniconda3-4.7.12&#x2F;envs&#x2F;cling&#x2F;share&#x2F;jupyter&#x2F;kernels&#x2F;python3</span><br><span class=\"line\">  xcpp11     &#x2F;Users&#x2F;stardust&#x2F;.pyenv&#x2F;versions&#x2F;miniconda3-4.7.12&#x2F;envs&#x2F;cling&#x2F;share&#x2F;jupyter&#x2F;kernels&#x2F;xcpp11</span><br><span class=\"line\">  xcpp14     &#x2F;Users&#x2F;stardust&#x2F;.pyenv&#x2F;versions&#x2F;miniconda3-4.7.12&#x2F;envs&#x2F;cling&#x2F;share&#x2F;jupyter&#x2F;kernels&#x2F;xcpp14</span><br><span class=\"line\">  xcpp17     &#x2F;Users&#x2F;stardust&#x2F;.pyenv&#x2F;versions&#x2F;miniconda3-4.7.12&#x2F;envs&#x2F;cling&#x2F;share&#x2F;jupyter&#x2F;kernels&#x2F;xcpp17</span><br></pre></td></tr></table></figure>\n<p>打开 <code>jupyter notebook</code> ，看看是不是已经可以写 C++ 了。</p>\n"},{"title":"Haskell 学习笔记","url":"/2021/01/19/haskell/","content":"<blockquote class=\"blockquote-center\">\n<div style=\"letter-spacing:1px;padding: 0px 50px 0px 0px\">只要是人，都是依靠自己的知识与认知并被之束缚的生活着的，那就叫做现实。</div>\n<div style=\"text-align: right;padding: 0px 200px 0px 0px\">——《火影忍者》宇智波·鼬</div>\n</blockquote>\n\n<a id=\"more\"></a>"},{"title":"Hexo 折腾手记","url":"/2021/01/19/hexo/","content":"<blockquote class=\"blockquote-center\">\n<div style=\"letter-spacing:1px;padding: 0px 50px 0px 0px\">必须敢于正视，这才可望敢想、敢说、敢做、敢当。</div>\n<div style=\"text-align: right;padding: 0px 200px 0px 0px\">——鲁迅</div>\n</blockquote>\n\n<a id=\"more\"></a>\n\n<h2 id=\"深度优化\"><a href=\"#深度优化\" class=\"headerlink\" title=\"深度优化\"></a>深度优化</h2><h3 id=\"关掉所有多余的信息显示\"><a href=\"#关掉所有多余的信息显示\" class=\"headerlink\" title=\"关掉所有多余的信息显示\"></a>关掉所有多余的信息显示</h3><p>标题下方的访问量、阅读时间、发布时间什么的统统都去掉，妨碍阅读。本文字数还算有点用，但如果开启了显示阅读进度的小方块，也可以关掉。</p>\n<h3 id=\"行内代码块美化\"><a href=\"#行内代码块美化\" class=\"headerlink\" title=\"行内代码块美化\"></a>行内代码块美化</h3><p>默认的行内代码块黑不溜秋，着实不太美观。逛了好多网站，\b都不太满意。最后在思否（segmentfault）的基础上把字体颜色再加深了一点，边框加宽，加上圆角，字体换成 Fira Code，自我感觉还不错：<code>My Preference</code></p>\n<p><em>Updates</em>：把浅粉色背景完全去掉了，看上去更清爽</p>\n<h3 id=\"跨行代码块美化\"><a href=\"#跨行代码块美化\" class=\"headerlink\" title=\"跨行代码块美化\"></a>跨行代码块美化</h3><p>左边行号的大黑边太辣眼睛了，改改改。我最喜欢的代码块样式是 mkdocs-material 的，简洁大方。网上很火的 mac 样式我不太喜欢，上面的红绿灯实在难看，还占了本来可以写语言、文件名、路径等附加信息的地方。</p>\n<p>代码高亮主题我选的是 atom-one-light，和整体风格比较搭，不过自带的也还不错的说。</p>\n<figure class=\"highlight cpp\"><figcaption><span>Hello_World.cpp</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 祖传 Hello World</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;Hello World!&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"站外链接美化\"><a href=\"#站外链接美化\" class=\"headerlink\" title=\"站外链接美化\"></a>站外链接美化</h3><p><a href=\"https://github.com/Stardusten\">猫猫能有什么坏心眼呢</a></p>\n<h4 id=\"颜色改为蓝色\"><a href=\"#颜色改为蓝色\" class=\"headerlink\" title=\"颜色改为蓝色\"></a>颜色改为蓝色</h4><p>链接都是灰色的，不太醒目，颜色改为蓝色会更好看。</p>\n<h4 id=\"添加提示图标\"><a href=\"#添加提示图标\" class=\"headerlink\" title=\"添加提示图标\"></a>添加提示图标</h4><p>对于站外链接，在右边添加一个提示图标。</p>\n<h3 id=\"换掉默认的分类页\"><a href=\"#换掉默认的分类页\" class=\"headerlink\" title=\"换掉默认的分类页\"></a>换掉默认的分类页</h3><p>默认的分类页不能自定义页面显示顺序，干脆关掉，自己新建一个目录页代替原有的分类页。</p>\n<p>先用 <code>hexo new page &quot;page_name&quot;</code> 新建一个名为 page_name（当然你可以自己取名字，比如我要用来做目录，就取名为 contents）的文件夹，里面自动生成一个 <code>index.md</code> 文件。打开 <code>index.md</code>，在元信息中加入以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">type</span>: <span class=\"string\">&quot;contents&quot;</span></span><br><span class=\"line\">comments: <span class=\"literal\">false</span> <span class=\"comment\"># 关闭评论</span></span><br><span class=\"line\">sidebar: <span class=\"literal\">false</span> <span class=\"comment\"># 关闭侧栏</span></span><br></pre></td></tr></table></figure>\n<p>接下来，在主题配置文件的 menu 一项中加入刚刚创建的 contents，格式仿照上面已有的内容：</p>\n<figure class=\"highlight m\"><table><tr><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  #home: / || fa fa-home</span><br><span class=\"line\">  #about: /about/ || fa fa-user</span><br><span class=\"line\">  tags: /tags/ || fa fa-tags</span><br><span class=\"line\">  #categories: /categories/ || fa fa-th</span><br><span class=\"line\">  archives: /archives/ || fa fa-archive</span><br><span class=\"line\">  #schedule: /schedule/ || fa fa-calendar</span><br><span class=\"line\">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class=\"line\">  #commonweal: /<span class=\"number\">404</span>/ || fa fa-heartbeat</span><br><span class=\"line\">  contents: /contents/ || fa fa-th # 加到这里</span><br></pre></td></tr></table></figure>\n<p>注意 <code>||</code> 后面的部分是用来指定图标的，所有能用的图标参见 <a href=\"fontawesome.com\">Fontawesome</a>。</p>\n<p>如果还需改变这一页在 menu 中的名字，修改 <code>/languages/zh-Hans.yml</code> 的相关项即可。</p>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><h3 id=\"站内搜索提示编码错误\"><a href=\"#站内搜索提示编码错误\" class=\"headerlink\" title=\"站内搜索提示编码错误\"></a>站内搜索提示编码错误</h3><p><em>Reference</em>： <a href=\"https://github.com/wzpan/hexo-generator-search/issues/8\">Github issue</a></p>\n<p><em>Solution</em>：改用 <code>json</code> 索引即可</p>\n<ol>\n<li><p>装 <code>hexo-generator-search</code> 插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></li>\n<li><p>修改 hexo 配置文件如下：</p>\n<figure class=\"highlight bash\"><figcaption><span>_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">  path: search.json <span class=\"comment\"># 注意这里扩展名改为 .json</span></span><br><span class=\"line\">  field: post</span><br><span class=\"line\">  content: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Java 学习笔记","url":"/2021/01/20/java/","content":"<blockquote class=\"blockquote-center\">\n<div style=\"letter-spacing:1px;padding: 0px 50px 0px 0px\">如果Java能实现真的垃圾回收，那大部分的程序都会在执行时删除自己。</div>\n<div style=\"text-align: right;padding: 0px 200px 0px 0px\">—— Robert Swell</div>\n</blockquote>\n\n<a id=\"more\"></a>\n"},{"title":"Latex 学习笔记","url":"/2021/01/21/latex/","content":"<blockquote class=\"blockquote-center\">\n<div style=\"letter-spacing:1px;padding: 0px 50px 0px 0px\">当想要保护自己重要的人的时候，人就会变得很坚强。</div>\n<div style=\"text-align: right;padding: 0px 200px 0px 0px\">——《火影忍者》白</div>\n</blockquote>\n\n<a id=\"more\"></a>"},{"title":"Markdown 学习笔记","url":"/2021/01/18/md/","content":"<blockquote class=\"blockquote-center\">\n<div style=\"letter-spacing:1px;padding: 0px 50px 0px 0px\">有目标是好事，不过太过于执着的话也许就会让人偏离正道，这个要记在心里。</div>\n<div style=\"text-align: right;padding: 0px 200px 0px 0px\">——《火影忍者》宇智波·止水</div>\n</blockquote>\n\n<a id=\"more\"></a>\n\n<h2 id=\"行内代码块输入反引号\"><a href=\"#行内代码块输入反引号\" class=\"headerlink\" title=\"行内代码块输入反引号 `\"></a>行内代码块输入反引号 <code>`</code></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#96;    &#x3D;&gt;  &#96;&#96; &#96; &#96;&#96;</span><br><span class=\"line\">&#96;&#96;   &#x3D;&gt;  &#96; &#96;&#96; &#96;</span><br></pre></td></tr></table></figure>"},{"title":"Python 学习笔记","url":"/2021/01/19/python/","content":"<blockquote class=\"blockquote-center\">\n<div style=\"letter-spacing:1px;padding: 0px 50px 0px 0px\">人因为有难忘的记忆而变得坚强，这就是所谓的成长吧。</div>\n<div style=\"text-align: right;padding: 0px 200px 0px 0px\">——《火影忍者》纲手</div>\n</blockquote>\n\n<a id=\"more\"></a>"},{"title":"Wolfram Language 学习笔记","url":"/2021/01/20/wolfram/","content":"<blockquote class=\"blockquote-center\">\n<div style=\"letter-spacing:1px;padding: 0px 50px 0px 0px\">大学四年，不应去追求成功，而应该追求自身的成长，找到自己可以持续投入的东西。</div>\n<div style=\"text-align: right;padding: 0px 200px 0px 0px\">——《CS 自救指北》CXS</div>\n</blockquote>\n\n<a id=\"more\"></a>\n\n<p>Wolfram Language 是一种自由的语言，你可以用你喜欢的任何方式去学习它、使用它。我本希望通过它学习函数式编程 Functional Programming，无奈相关资源太少，最后还是决定从 Haskell 入门，研读《Haskell 趣学指南》，同时尝试用 Wolfram Language 实现书中的 Haskell 代码。</p>\n<p>事实证明，这的确有一定挑战性：已经小成的 C/C++、刚入门的 Python，不学自会的 Java、正在学的 Haskell、Wolfram Language 快把爷整精分了。不过多语言同时学还是有点好处的，可以比较同一功能不同语言的实现，从而更深入地理解这一功能；“精分” 的过程同样也帮助了对不同语言语法的记忆。</p>\n<p>在这里点名表扬 Wolfram Language 官方的文档，至少和 Python 是一个级别的了，非常详细。可惜入坑指南和 Python 比还有一定差距，过于简陋。所以本文也希望成为通过 Wolfram Language 学 FP 一篇不错的入坑指南。因为官方文档做的非常好，所以 <strong>凡是能通过看文档学的内容一律给文档链接</strong>，不再赘述。</p>\n<h2 id=\"调用函数\"><a href=\"#调用函数\" class=\"headerlink\" title=\"调用函数\"></a>调用函数</h2><p>Wolfram Language 不仅支持普通的前缀调用，还支持以中缀、后缀的方式调用函数。合理使用这三种调用方式，能使代码逻辑清晰，增强可读性。</p>\n<h3 id=\"前缀调用\"><a href=\"#前缀调用\" class=\"headerlink\" title=\"前缀调用\"></a>前缀调用</h3><p><em>Reference</em>： <a href=\"https://reference.wolfram.com/language/ref/Prefix.html?q=Prefix\">Prefix</a></p>\n<ol>\n<li><p><strong>@ 与 @@</strong></p>\n<p> 注意区别 <code>@ Prefix</code> 与 <code>@@ Apply</code> ：<code>@</code> 相当于一对中括号，而 <code>@@</code> 会将其右边的函数头用左边的替换。</p>\n <figure class=\"highlight mma\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">f</span> <span class=\"operator\">@</span> <span class=\"variable\">g</span><span class=\"punctuation\">[</span><span class=\"variable\">x</span><span class=\"punctuation\">]</span> <span class=\"operator\">&lt;=&gt;</span> <span class=\"variable\">f</span><span class=\"punctuation\">[</span><span class=\"variable\">g</span><span class=\"punctuation\">[</span><span class=\"variable\">x</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"variable\">f</span> <span class=\"operator\">@@</span> <span class=\"variable\">g</span><span class=\"punctuation\">[</span><span class=\"variable\">x</span><span class=\"punctuation\">]</span> <span class=\"operator\">&lt;=&gt;</span> <span class=\"variable\">f</span><span class=\"punctuation\">[</span><span class=\"variable\">x</span><span class=\"punctuation\">]</span> <span class=\"comment\">(* g 被 f 替换 *)</span></span><br></pre></td></tr></table></figure>\n<p> 所以你知道下面四种写法结果不同的原因了吗？（提示：可以用 <code>FullForm</code> 函数观察表达式的完整形式，注意 <code>&#123;&#125;</code> 只是语法糖，本质上也是函数调用）</p>\n <figure class=\"highlight mma\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Plus</span> <span class=\"punctuation\">[</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">2</span><span class=\"punctuation\">]</span> <span class=\"comment\">(* Result: 3 *)</span></span><br><span class=\"line\"><span class=\"built_in\">Plus</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">2</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span> <span class=\"comment\">(* Result: &#123;1,2&#125; *)</span></span><br><span class=\"line\"><span class=\"built_in\">Plus</span> <span class=\"operator\">@</span> <span class=\"punctuation\">&#123;</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">2</span><span class=\"punctuation\">&#125;</span> <span class=\"comment\">(* Result: &#123;1,2&#125; *)</span></span><br><span class=\"line\"><span class=\"built_in\">Plus</span> <span class=\"operator\">@@</span> <span class=\"punctuation\">&#123;</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">2</span><span class=\"punctuation\">&#125;</span> <span class=\"comment\">(* Result: 3 *)</span></span><br></pre></td></tr></table></figure>\n<p> <em>Reference</em>： <a href=\"https://mathematica.stackexchange.com/questions/56882/postfix-with-two-arguments\">Postfix with two arguments</a></p>\n</li>\n<li><p><strong>@ 实现多参数调用</strong></p>\n<p> <code>@</code> 只能用于单参数调用，如果你实在想让 <code>@</code> 支持多参数调用，有下面两种方案，分别对应参数后置、参数前置两种选择：</p>\n <figure class=\"highlight mma\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Plus</span> <span class=\"operator\">@</span> <span class=\"built_in\">Sequence</span><span class=\"punctuation\">[</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">2</span><span class=\"operator\">,</span><span class=\"number\">3</span><span class=\"punctuation\">]</span> <span class=\"comment\">(* Result: 6 *)</span></span><br><span class=\"line\"><span class=\"built_in\">Plus</span> <span class=\"punctuation\">[</span><span class=\"type\">#</span><span class=\"operator\">,</span><span class=\"number\">2</span><span class=\"operator\">,</span><span class=\"number\">3</span><span class=\"punctuation\">]</span><span class=\"operator\">&amp;</span> <span class=\"operator\">@</span> <span class=\"number\">1</span> <span class=\"comment\">(* Result: 6 *)</span></span><br></pre></td></tr></table></figure>\n<p> 第一种方法使用 <code>Sequence</code> 函数拼接参数序列，详细使用参见<a href=\"https://reference.wolfram.com/language/ref/Sequence.html?q=Sequence\">Sequence</a></p>\n<p> 第二种方式使用纯函数语法改造原有函数。看上去这两种方法很有些费力不讨好的味道，但的确值得学习，这体现了 Wolfram Language 语法上的灵活性。</p>\n<p> <em>Reference</em>： <a href=\"https://mathematica.stackexchange.com/questions/37040/difference-between-and\">Stack Exchange: Difference between @ and @@</a></p>\n</li>\n</ol>\n<h3 id=\"中缀调用\"><a href=\"#中缀调用\" class=\"headerlink\" title=\"中缀调用\"></a>中缀调用</h3><p><em>Reference</em>：  <a href=\"https://reference.wolfram.com/language/ref/Infix.html\">Infix</a></p>\n<p>注意：中缀调用 ≠ 嵌套调用</p>\n<figure class=\"highlight mma\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">2</span><span class=\"operator\">,</span><span class=\"number\">3</span><span class=\"punctuation\">&#125;</span><span class=\"operator\">~</span><span class=\"built_in\">Join</span><span class=\"operator\">~</span><span class=\"punctuation\">&#123;</span><span class=\"number\">4</span><span class=\"operator\">,</span><span class=\"number\">5</span><span class=\"operator\">,</span><span class=\"number\">6</span><span class=\"punctuation\">&#125;</span><span class=\"operator\">~</span><span class=\"built_in\">Join</span><span class=\"operator\">~</span><span class=\"punctuation\">&#123;</span><span class=\"number\">7</span><span class=\"operator\">,</span><span class=\"number\">8</span><span class=\"operator\">,</span><span class=\"number\">9</span><span class=\"punctuation\">&#125;</span> <span class=\"operator\">&lt;=&gt;</span> <span class=\"built_in\">Join</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">2</span><span class=\"operator\">,</span><span class=\"number\">3</span><span class=\"punctuation\">&#125;</span><span class=\"operator\">,</span><span class=\"punctuation\">&#123;</span><span class=\"number\">4</span><span class=\"operator\">,</span><span class=\"number\">5</span><span class=\"operator\">,</span><span class=\"number\">6</span><span class=\"punctuation\">&#125;</span><span class=\"operator\">,</span><span class=\"punctuation\">&#123;</span><span class=\"number\">7</span><span class=\"operator\">,</span><span class=\"number\">8</span><span class=\"operator\">,</span><span class=\"number\">9</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"number\">1</span><span class=\"operator\">~</span><span class=\"built_in\">Plus</span><span class=\"operator\">~</span><span class=\"number\">2</span><span class=\"operator\">~</span><span class=\"built_in\">Minus</span><span class=\"operator\">~</span><span class=\"number\">3</span> <span class=\"operator\">!=</span> <span class=\"built_in\">Minus</span><span class=\"punctuation\">[</span><span class=\"built_in\">Plus</span><span class=\"punctuation\">[</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">2</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"后缀调用\"><a href=\"#后缀调用\" class=\"headerlink\" title=\"后缀调用\"></a>后缀调用</h3><p><em>Reference</em>：  <a href=\"https://reference.wolfram.com/language/ref/Infix.html\">Posfix</a></p>\n<figure class=\"highlight mma\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#123;</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">2</span><span class=\"operator\">,</span><span class=\"number\">3</span><span class=\"punctuation\">&#125;</span><span class=\"operator\">,</span><span class=\"punctuation\">&#123;</span><span class=\"number\">4</span><span class=\"operator\">,</span><span class=\"number\">5</span><span class=\"operator\">,</span><span class=\"number\">6</span><span class=\"punctuation\">&#125;</span><span class=\"operator\">,</span><span class=\"punctuation\">&#123;</span><span class=\"number\">7</span><span class=\"operator\">,</span><span class=\"number\">8</span><span class=\"operator\">,</span><span class=\"number\">9</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span> <span class=\"operator\">//</span> <span class=\"built_in\">Flatten</span> <span class=\"operator\">//</span> <span class=\"built_in\">Total</span></span><br></pre></td></tr></table></figure>\n<p>同样可以使用纯函数语法改造原有函数，以实现 <strong>多参数调用</strong>：</p>\n<figure class=\"highlight mma\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"operator\">//</span> <span class=\"built_in\">Plus</span><span class=\"punctuation\">[</span><span class=\"type\">#</span><span class=\"operator\">,</span><span class=\"number\">2</span><span class=\"operator\">,</span><span class=\"number\">3</span><span class=\"punctuation\">]</span><span class=\"operator\">&amp;</span> <span class=\"comment\">(* Result: 6 *)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p><em>Reference</em>：  <a href=\"https://reference.wolfram.com/language/ref/Map.html\">Map</a></p>\n<h3 id=\"Apply\"><a href=\"#Apply\" class=\"headerlink\" title=\"Apply\"></a>Apply</h3><p><em>Reference</em>：  <a href=\"https://reference.wolfram.com/language/ref/Apply.html?q=Apply\">Apply</a></p>\n<h2 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h2><p><em>Reference</em>：  <a href=\"https://reference.wolfram.com/language/tutorial/FunctionsAndPrograms.html#13037\">函数与程序</a></p>\n<p>官方文档非常详细，这里不再赘述。但提醒一点：过程式语法中，函数体是用小括号 <code>()</code> ，而不是中括号、大括号括起来的。可以显式地使用 <code>Return</code> 函数以设置一个或多个出口；也可以省去最后一个表达式末尾的分号，这样会默认返回该表达式的值。但可以看到，后一种方法最多也只能设置一个出口。</p>\n<h2 id=\"模式匹配\"><a href=\"#模式匹配\" class=\"headerlink\" title=\"模式匹配\"></a>模式匹配</h2><p><em>Reference</em>：  <a href=\"https://reference.wolfram.com/language/guide/RulesAndPatterns.html\">规则与模式</a></p>\n<ol>\n<li><code>x_</code> ：只匹配 <strong>一个</strong> 表达式</li>\n<li><code>x__</code> ： 匹配 <strong>1 个或多个</strong> 表达式</li>\n<li><code>x___</code> ：匹配 <strong>0 个、1 个或多个</strong> 表达式</li>\n</ol>\n<p>定义函数时使用模式匹配，可以省去一大串难看的 If 树。下面以 <em>递归计算斐波拉契数列</em> 和 <em>快速排序</em> 为例，体会模式匹配的强大：</p>\n<figure class=\"highlight mma\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">(*Fibonacci Sequence*)</span></span><br><span class=\"line\"><span class=\"variable\">Fib</span><span class=\"punctuation\">[</span><span class=\"number\">1</span><span class=\"punctuation\">]</span><span class=\"operator\">:=</span><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"variable\">Fib</span><span class=\"punctuation\">[</span><span class=\"number\">2</span><span class=\"punctuation\">]</span><span class=\"operator\">:=</span><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"variable\">Fib</span><span class=\"punctuation\">[</span><span class=\"type\">x_</span><span class=\"punctuation\">]</span><span class=\"operator\">:=</span><span class=\"variable\">Fib</span><span class=\"punctuation\">[</span><span class=\"variable\">x</span><span class=\"operator\">-</span><span class=\"number\">1</span><span class=\"punctuation\">]</span><span class=\"operator\">+</span><span class=\"variable\">Fib</span><span class=\"punctuation\">[</span><span class=\"variable\">x</span><span class=\"operator\">-</span><span class=\"number\">2</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"operator\">------</span></span><br><span class=\"line\"><span class=\"variable\">Fib</span><span class=\"punctuation\">[</span><span class=\"number\">10</span><span class=\"punctuation\">]</span> <span class=\"comment\">(* Result: 55 *)</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight mma\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">(*Quick Sort*)</span></span><br><span class=\"line\"><span class=\"variable\">qsort</span><span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span><span class=\"operator\">:=</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"variable\">qsort</span><span class=\"punctuation\">[</span><span class=\"type\">l_</span><span class=\"punctuation\">]</span><span class=\"operator\">:=</span><span class=\"built_in\">Join</span><span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"variable\">qsort</span><span class=\"punctuation\">[</span><span class=\"built_in\">Select</span><span class=\"punctuation\">[</span><span class=\"built_in\">Rest</span><span class=\"punctuation\">[</span><span class=\"variable\">l</span><span class=\"punctuation\">]</span><span class=\"operator\">,</span><span class=\"punctuation\">(</span><span class=\"type\">#</span><span class=\"operator\">&lt;=</span><span class=\"built_in\">First</span><span class=\"punctuation\">[</span><span class=\"variable\">l</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span><span class=\"operator\">&amp;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"operator\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span><span class=\"built_in\">First</span><span class=\"punctuation\">[</span><span class=\"variable\">l</span><span class=\"punctuation\">]</span><span class=\"punctuation\">&#125;</span><span class=\"operator\">,</span></span><br><span class=\"line\">    <span class=\"variable\">qsort</span><span class=\"punctuation\">[</span><span class=\"built_in\">Select</span><span class=\"punctuation\">[</span><span class=\"built_in\">Rest</span><span class=\"punctuation\">[</span><span class=\"variable\">l</span><span class=\"punctuation\">]</span><span class=\"operator\">,</span><span class=\"punctuation\">(</span><span class=\"type\">#</span><span class=\"operator\">&gt;</span><span class=\"built_in\">First</span><span class=\"punctuation\">[</span><span class=\"variable\">l</span><span class=\"punctuation\">]</span><span class=\"punctuation\">)</span><span class=\"operator\">&amp;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"operator\">------</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">4</span><span class=\"operator\">,</span><span class=\"number\">5</span><span class=\"operator\">,</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">4</span><span class=\"punctuation\">&#125;</span> <span class=\"operator\">//</span> <span class=\"variable\">qsort</span> <span class=\"comment\">(* Result: &#123;1,1,1,4,4,5&#125; *)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数</h2><h3 id=\"纯函数递归\"><a href=\"#纯函数递归\" class=\"headerlink\" title=\"纯函数递归\"></a>纯函数递归</h3><p>Wolfram Language 中，<code>#0</code> 就是纯函数自己，可以用来实现纯函数递归。要在 Python 中实现这一点可不容易。</p>\n<figure class=\"highlight mma\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">If</span><span class=\"punctuation\">[</span><span class=\"type\">#</span><span class=\"operator\">==</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"type\">#</span><span class=\"operator\">*</span><span class=\"type\">#0</span><span class=\"punctuation\">[</span><span class=\"type\">#</span><span class=\"operator\">-</span><span class=\"number\">1</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"operator\">&amp;</span><span class=\"punctuation\">[</span><span class=\"number\">3</span><span class=\"punctuation\">]</span> <span class=\"comment\">(*计算 3 的阶乘*)</span></span><br><span class=\"line\"><span class=\"built_in\">If</span><span class=\"punctuation\">[</span><span class=\"type\">#</span><span class=\"operator\">==</span><span class=\"number\">0</span><span class=\"operator\">||</span><span class=\"type\">#</span><span class=\"operator\">==</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"type\">#0</span><span class=\"punctuation\">[</span><span class=\"type\">#</span><span class=\"operator\">-</span><span class=\"number\">1</span><span class=\"punctuation\">]</span><span class=\"operator\">+</span><span class=\"type\">#0</span><span class=\"punctuation\">[</span><span class=\"type\">#</span><span class=\"operator\">-</span><span class=\"number\">2</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"operator\">&amp;</span><span class=\"punctuation\">[</span><span class=\"number\">5</span><span class=\"punctuation\">]</span> <span class=\"comment\">(*计算斐波拉契数列第 5 项*)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数组合\"><a href=\"#函数组合\" class=\"headerlink\" title=\"函数组合\"></a>函数组合</h2><p><em>Reference</em>：  <a href=\"https://reference.wolfram.com/language/ref/Composition.html\">Composition</a></p>\n<h2 id=\"局部化变量\"><a href=\"#局部化变量\" class=\"headerlink\" title=\"局部化变量\"></a>局部化变量</h2><p><em>Reference</em>：  <a href=\"https://reference.wolfram.com/language/ref/Module.html?q=Module\">Module</a></p>\n<p>Wolfram Language 中似乎没有一般编程语言中 <strong>作用域</strong> 的概念，所有变量如果不加约束，都是全局的。很多时候这会带来不便，比如下面版本的快速排序就因此无法得到正确的答案：</p>\n<figure class=\"highlight mma\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">qsort</span><span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span><span class=\"operator\">:=</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"variable\">qsort</span><span class=\"punctuation\">[</span><span class=\"type\">l_</span><span class=\"punctuation\">]</span><span class=\"operator\">:=</span><span class=\"punctuation\">(</span></span><br><span class=\"line\">    <span class=\"variable\">fst</span><span class=\"operator\">=</span><span class=\"built_in\">First</span><span class=\"punctuation\">[</span><span class=\"variable\">l</span><span class=\"punctuation\">]</span><span class=\"operator\">;</span></span><br><span class=\"line\">    <span class=\"variable\">rst</span><span class=\"operator\">=</span><span class=\"built_in\">Rest</span><span class=\"punctuation\">[</span><span class=\"variable\">l</span><span class=\"punctuation\">]</span><span class=\"operator\">;</span></span><br><span class=\"line\">    <span class=\"variable\">qsort</span><span class=\"punctuation\">[</span><span class=\"built_in\">Select</span><span class=\"punctuation\">[</span><span class=\"variable\">rst</span><span class=\"operator\">,</span><span class=\"punctuation\">(</span><span class=\"type\">#</span><span class=\"operator\">&lt;=</span><span class=\"variable\">fst</span><span class=\"punctuation\">)</span><span class=\"operator\">&amp;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"operator\">~</span><span class=\"built_in\">Join</span><span class=\"operator\">~</span><span class=\"punctuation\">&#123;</span><span class=\"variable\">fst</span><span class=\"punctuation\">&#125;</span><span class=\"operator\">~</span><span class=\"built_in\">Join</span><span class=\"operator\">~</span><span class=\"variable\">qsort</span><span class=\"punctuation\">[</span><span class=\"built_in\">Select</span><span class=\"punctuation\">[</span><span class=\"variable\">rst</span><span class=\"operator\">,</span><span class=\"punctuation\">(</span><span class=\"type\">#</span><span class=\"operator\">&gt;</span><span class=\"variable\">fst</span><span class=\"punctuation\">)</span><span class=\"operator\">&amp;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"operator\">------</span></span><br><span class=\"line\"><span class=\"variable\">qsort</span><span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">4</span><span class=\"operator\">,</span><span class=\"number\">5</span><span class=\"operator\">,</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">4</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span> <span class=\"comment\">(* Result: &#123;1,1,1&#125; *)</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight mma\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">qsort</span><span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span><span class=\"operator\">:=</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"variable\">qsort</span><span class=\"punctuation\">[</span><span class=\"type\">l_</span><span class=\"punctuation\">]</span><span class=\"operator\">:=</span><span class=\"built_in\">Module</span><span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span><span class=\"variable\">fst</span><span class=\"operator\">=</span><span class=\"built_in\">First</span><span class=\"punctuation\">[</span><span class=\"variable\">l</span><span class=\"punctuation\">]</span><span class=\"operator\">,</span><span class=\"variable\">rst</span> <span class=\"operator\">=</span> <span class=\"built_in\">Rest</span><span class=\"punctuation\">[</span><span class=\"variable\">l</span><span class=\"punctuation\">]</span><span class=\"punctuation\">&#125;</span><span class=\"operator\">,</span></span><br><span class=\"line\">    <span class=\"built_in\">Join</span><span class=\"punctuation\">[</span><span class=\"variable\">qsort</span><span class=\"punctuation\">[</span><span class=\"built_in\">Select</span><span class=\"punctuation\">[</span><span class=\"variable\">rst</span><span class=\"operator\">,</span><span class=\"punctuation\">(</span><span class=\"type\">#</span><span class=\"operator\">&lt;=</span><span class=\"variable\">fst</span><span class=\"punctuation\">)</span><span class=\"operator\">&amp;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"operator\">,</span><span class=\"punctuation\">&#123;</span><span class=\"variable\">fst</span><span class=\"punctuation\">&#125;</span><span class=\"operator\">,</span><span class=\"variable\">qsort</span><span class=\"punctuation\">[</span><span class=\"built_in\">Select</span><span class=\"punctuation\">[</span><span class=\"variable\">rst</span><span class=\"operator\">,</span><span class=\"punctuation\">(</span><span class=\"type\">#</span><span class=\"operator\">&gt;</span><span class=\"variable\">fst</span><span class=\"punctuation\">)</span><span class=\"operator\">&amp;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"operator\">------</span></span><br><span class=\"line\"><span class=\"variable\">qsort</span><span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">4</span><span class=\"operator\">,</span><span class=\"number\">5</span><span class=\"operator\">,</span><span class=\"number\">1</span><span class=\"operator\">,</span><span class=\"number\">4</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span> <span class=\"comment\">(* Result: &#123;1,1,1,4,4,5&#125; *)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"扔掉循环\"><a href=\"#扔掉循环\" class=\"headerlink\" title=\"扔掉循环\"></a>扔掉循环</h2><p>如果你学过任何一门面向过程的编程语言，如 C++，那你一定学过循环结构。虽然 Wolfram Language 支持面向过程编程范式，C/C++ 的语法略作修改就能跑起来，但速度往往很不理想。</p>\n<h2 id=\"画图\"><a href=\"#画图\" class=\"headerlink\" title=\"画图\"></a>画图</h2><h3 id=\"Work-with-LaTeX\"><a href=\"#Work-with-LaTeX\" class=\"headerlink\" title=\"Work with $\\LaTeX$\"></a>Work with $\\LaTeX$</h3><p>MaTex 可以让我们协同使用 $\\LaTeX$ 和 Wolfram Language 这两大神器，下面给出 Mac OS 的安装方法，其他平台安装方式见 <a href=\"https://github.com/szhorvat/MaTeX\">GitHub 地址</a>.</p>\n<ol>\n<li>安装 MacTex</li>\n<li>打开 Mathematica ，执行 <code>ResourceFunction[&quot;MaTeXInstall&quot;][]</code> 即可安装 MaTex</li>\n<li>执行 <code>&lt;&lt;MaTeX`</code> 加载 MaTex（别丢了最后的反引号）</li>\n<li>输入 <code>MaTeX[&quot;x^2&quot;]</code> 看看是不是已经能够使用了</li>\n</ol>\n<h4 id=\"XeLaTex-中文支持\"><a href=\"#XeLaTex-中文支持\" class=\"headerlink\" title=\"XeLaTex 中文支持\"></a>XeLaTex 中文支持</h4><p>MaTex 默认使用 PDFLaTex 渲染，但 Mac OS 上使用 XeLatex 会比 PDFLaTex 更方便：一来可以直接调用系统字体，二来原生 Unicode 支持不要太香。</p>\n<p>一行命令将 PDFLaTex 换为 XeLatex：</p>\n<figure class=\"highlight mma\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">ConfigureMaTeX</span><span class=\"punctuation\">[</span><span class=\"string\">&quot;pdfLaTeX&quot;</span> <span class=\"operator\">-&gt;</span> <span class=\"string\">&quot;/Library/TeX/texbin/xelatex&quot;</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n<p>下面添加常用中文宏包：</p>\n<figure class=\"highlight mma\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">SetOptions</span><span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"variable\">MaTeX</span><span class=\"operator\">,</span> <span class=\"string\">&quot;BasePreamble&quot;</span> <span class=\"operator\">-&gt;</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;\\\\usepackage&#123;lmodern,exscale&#125;&quot;</span><span class=\"operator\">,</span> </span><br><span class=\"line\">        <span class=\"string\">&quot;\\\\usepackage&#123;amsmath,amssymb&#125;&quot;</span><span class=\"operator\">,</span> </span><br><span class=\"line\">        <span class=\"string\">&quot;\\\\usepackage&#123;xeCJK&#125;&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n<p>试试执行 <code>MaTeX[&quot;Miao \\\\text&#123;猫猫能有什么坏心眼呢&#125;&quot;]</code>，看中文是否已经可以显示。</p>\n<h4 id=\"自动加载\"><a href=\"#自动加载\" class=\"headerlink\" title=\"自动加载\"></a>自动加载</h4><p>每次使用都要执行 <code>&lt;&lt;MaTeX`</code> 实在是有些麻烦，可以将其加入 <code>init.m</code> 中，实现打开时自动加载。修改 <code>init.m</code> 的具体方法参见 <a href=\"https://reference.wolfram.com/language/tutorial/ConfigurationFiles.html.zh?source=footer\">Wolfram 系统配置文件</a>，<a href=\"https://reference.wolfram.com/language/ref/file/init.m.html.zh?source=footer\">init.m</a></p>\n<p>Mac OS 下做如下修改即可：</p>\n<figure class=\"highlight mma\"><figcaption><span>./Library/Mathematica/Kernel/init.m</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">(** User Mathematica initialization file **)</span></span><br><span class=\"line\"><span class=\"operator\">&lt;&lt;</span><span class=\"variable\">MaTeX</span><span class=\"operator\">`</span></span><br><span class=\"line\"><span class=\"variable\">ConfigureMaTeX</span><span class=\"punctuation\">[</span><span class=\"string\">&quot;pdfLaTeX&quot;</span> <span class=\"operator\">-&gt;</span> <span class=\"string\">&quot;/Library/TeX/texbin/xelatex&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"built_in\">SetOptions</span><span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"variable\">MaTeX</span><span class=\"operator\">,</span> <span class=\"string\">&quot;BasePreamble&quot;</span> <span class=\"operator\">-&gt;</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;\\\\usepackage&#123;lmodern,exscale&#125;&quot;</span><span class=\"operator\">,</span> </span><br><span class=\"line\">        <span class=\"string\">&quot;\\\\usepackage&#123;amsmath,amssymb&#125;&quot;</span><span class=\"operator\">,</span> </span><br><span class=\"line\">        <span class=\"string\">&quot;\\\\usepackage&#123;xeCJK&#125;&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n<img data-src='https://cdn.jsdelivr.net/gh/Stardusten/Pic@master/uPic/p1.svg' alt='p1' width='400px'/>\n\n\n<p>更多教程移步 <a href=\"http://szhorvat.net/pelican/latex-typesetting-in-mathematica.html\">开发者博客</a>，在 <a href=\"https://gitter.im/MaTeX-help/Lobby\">Gitter 讨论组</a> 获得帮助。</p>\n"}]